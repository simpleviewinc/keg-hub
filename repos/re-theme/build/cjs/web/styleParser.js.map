{"version":3,"file":"styleParser.js","sources":["../../../src/styleParser/validate.js","../../../src/styleParser/addToDom.js","../../../src/styleParser/cssToJs.js","../../../src/styleParser/styleSheetParser.js"],"sourcesContent":["import { isArr, isFunc } from '@keg-hub/jsutils'\nimport { hasDomAccess } from '../helpers/hasDomAccess'\n\n/**\n * Validates the passed in arguments to ensure styles can be parsed\n * @function\n * @param {Array} classNames - Array of className to convert into data-attributes\n * @param {boolean} [toDom=true] - Should the parsed styles be added to the dom\n * \n * @returns {Object|boolean} - Passed in args or false if args are invalid\n */\nexport const validateArguments = (args={}, fallbackCB) => {\n\n  // Ensure we have dom access and classNames is an array\n  // Otherwise log error an return a string\n  if (!hasDomAccess() || !isArr(args.classNames)){\n    console.error(`[ Error ] styleSheetParser requires Dom Access and an array of class names!`)\n    return { valid: false}\n  }\n\n  // Use the default fallbackCB when no callback is passed\n  const callback = args.callback || fallbackCB\n  if (!isFunc(callback)){\n    console.error(`[ Error ] styleSheetParser requires a function callback.\\nIt received:`, callback)\n    return { valid: false}\n  }\n\n  return { ...args, callback }\n}\n","/**\n * Appends the passed in styles to the DOM\n * @param {string} styles - Style to be added to the dom\n */\nexport const addToDom = styles => {\n\n  const dataCss = document.createElement('style')\n  dataCss.type = 'text/css'\n\n  // Based on the browser, we need to set the styles differently\n  dataCss.styleSheet\n    ? (dataCss.styleSheet.cssText = styles)\n    : (dataCss.appendChild(document.createTextNode(styles)))\n\n  // Add the styles to the dom\n  document.getElementsByTagName(\"head\")[0].appendChild(dataCss)\n\n}\n","import { exists, camelCase, isArr } from '@keg-hub/jsutils'\n\n/**\n * Matches all content between `{}`\n * @example\n * getStyleContent(\".my-class { color: blue }\") === \" color: blue \"\n * @function\n * @param {string} styleStr - Css styles in string format\n * \n * @returns {string} - Content inbetween the {} of the passed in string\n */\nconst getStyleContent = styleStr => {\n  const matches = [ ...styleStr.matchAll(/\\{(.+?)\\}/gi) ]\n  return isArr(matches) && isArr(matches[0]) ? matches[0][1] : ''\n}\n\n/**\n * Converts from css formatted name to js Object format\n * @example\n * cssToJs(\"{ color: blue; font-size: 12px; }\") === { color: 'blue', fontSize: '12px' }\n * @function\n * @param {string} styleStr - Css styles in string format\n * @param {Object} styleObj - Holds the converted styles\n *\n * @returns {Object} - Passed in styleObj, with the styleStr added in object format\n */\nexport const cssToJs = (styleStr, styleObj={}) => {\n  \n  const styles = getStyleContent(styleStr).trim().split(';')\n\n  return styles.reduce((parsed, styleRule) => {\n    if(styleRule.indexOf(':') === -1) return parsed\n\n    let [ name, value ] = styleRule.split(':')\n    name = camelCase(name.trim())\n    value = value.trim()\n\n    return !exists(name) || !exists(value) || name === '' || value === ''\n      ? parsed\n      : { ...parsed, [name]: value }\n\n  }, styleObj)\n\n}\n","import { isArr, checkCall } from '@keg-hub/jsutils'\nimport { validateArguments } from './validate'\nimport { addToDom } from './addToDom'\nimport { cssToJs } from './cssToJs'\n\n/**\n * Converts to the data-class text from the rootSelector class\n * @example\n * .my-class-name => [data-class~=\"my-class-name\"] \n * @param {Object} cssRule - Rule to be updated form a styleSheet on the dom\n * @param {string} rootSelector - Class the matches the cssRule\n * @param {string} styleText - Past updated style rules\n * \n * @returns {string} - Updated style text with the cssRule converted to a data-class attribute\n */\nconst convertToDataClass = (cssRule, rootSelector, formatted) => {\n\n  const selectorRef = rootSelector.substring(1)\n  const dataClass = `[data-class~=\"${selectorRef}\"]`\n  const dataRule = cssRule.cssText.replace(rootSelector, dataClass)\n\n  formatted.asObj[dataClass] = cssToJs(dataRule, formatted.asObj[dataClass])\n  formatted.dataClass[selectorRef] = formatted.asObj[dataClass]\n  formatted.asStr += `${dataRule}\\n`\n\n  return formatted\n}\n\n/**\n * Loops a style sheets rules and looks for matching className selectors\n * @function\n * @param {Object} formatted - Object to hold the parsed styles\n * @param {Object} sheet - Dom StyleSheet Object\n * @param {Array} classNames - Array of className to convert into data-attributes\n * @param {function} callback - Function to call on matching className\n * \n * @returns {Object|string} - CssInJs object or string of the converted styles\n */\nconst loopSheetCssRules = (formatted, sheet, classNames, callback) => {\n  // Check the rules of each styleSheet for a matching class\n  return Array.from(sheet.cssRules)\n    .reduce((formatted, cssRule) => {\n\n      if (!cssRule.selectorText || !cssRule.cssText) return formatted\n\n      // Get the rootSelector of the cssRule, any sub-rule definitions will not work\n      // .my-class-name => WORKS\n      // .root-class-name .my-class-name => DOES NOT WORK\n      const rootSelector = cssRule.selectorText.split(' ').shift()\n\n      // Check if the rootSelector is in the classNames\n      // If it is, then call the callback\n      return classNames.includes(rootSelector)\n        ? checkCall(callback, cssRule, rootSelector, formatted)\n        : formatted\n\n    }, formatted)\n}\n\n/**\n * Loops over the styles sheets currently on the DOM\n * <br/>Searches each one for a matching class within the passed in classNames\n * <br/>If it exists, then it converts it to `data-class-name` attribute\n * @function\n * @param {Array} classNames - Array of className to convert into data-attributes\n * @param {boolean} [toDom=true] - Should the parsed styles be added to the dom\n * \n * @returns {Object|string} - CssInJs object or string of the converted styles\n */\nexport const styleSheetParser = (args) => {\n\n  const {\n    classNames,\n    callback,\n    toDom=true,\n    format,\n    valid\n  } = validateArguments(args, convertToDataClass)\n\n  if(valid === false) return {}\n\n  const parsedStyles = isArr(classNames) &&\n    // Have to convert all styleSheets form the DOM into an array to loop over them\n    Array.from(document.styleSheets).reduce(\n      (formatted, sheet) => loopSheetCssRules(formatted, sheet, classNames, callback),\n      { asStr: '', asObj: {}, dataClass: {} }\n    )\n\n  toDom && stylesText && addToDom(parsedStyles.asStr)\n\n  return parsedStyles\n\n}\n\n// TODO: These the data class data should be stored in a look up\n// Then in the useCss hook, it uses that look up to find the styles\n// That way the styles do not need to be passed around to components\n// Instead a components can just pass in the dataClass Id, and get back the styles\n\n"],"names":["validateArguments","args","fallbackCB","hasDomAccess","isArr","classNames","console","error","valid","callback","isFunc","addToDom","styles","dataCss","document","createElement","type","styleSheet","cssText","appendChild","createTextNode","getElementsByTagName","getStyleContent","styleStr","matches","matchAll","cssToJs","styleObj","trim","split","reduce","parsed","styleRule","indexOf","name","value","camelCase","exists","convertToDataClass","cssRule","rootSelector","formatted","selectorRef","substring","dataClass","dataRule","replace","asObj","asStr","loopSheetCssRules","sheet","Array","from","cssRules","selectorText","shift","includes","checkCall","styleSheetParser","toDom","format","parsedStyles","styleSheets","stylesText"],"mappings":"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"}