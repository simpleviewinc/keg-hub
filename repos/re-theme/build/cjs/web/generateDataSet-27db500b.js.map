{"version":3,"file":"generateDataSet-27db500b.js","sources":["../../../src/helpers/noOp.js","../../../src/helpers/stringHasher.js","../../../src/helpers/getCssSelector.js","../../../src/styleParser/generateDataSet.js"],"sourcesContent":["/**\n * Consistent object which can be reused to keep it's identity\n * @object\n */\nexport const noOp = () => {}\nexport const noOpObj = Object.freeze({})","import { isStr } from '@keg-hub/jsutils'\n\n/**\n * Creates a hash from a passed in string consistently\n * <br/>Not intended to be secure\n * <br/>Value comes from being a pure function\n * <br/>Given the same input, it will always return the same output\n * <br/>There is no expectation to convert back from the hash to the original string\n * @function\n * @param {string} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {string} - Hashed version of the string\n */\nexport const stringHasher = (str, maxLength=0) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse().join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash<<5) - hash) + char\n    // Convert to positive 32bit integer\n    hash = `${ Math.abs(hash & hash) }`\n  }\n\n  return maxLength ? hash.slice(0, maxLength) : hash\n}","import { exists } from '@keg-hub/jsutils'\n\n/**\n * Builds the format used to select the web dom element and apply styles to it\n * @function\n * @param {string} config - Define how the format is built\n * @param {string} config.selector - Reference used to build the format\n * @param {string} config.prefix - prefix used to filter references to be updated\n * @param {string} config.format - Template format to build on found reference\n *\n * @returns {string} - Built format\n */\nexport const getCssSelector = ({ selector, prefix, format }) => {\n  format = (format || `[data-class~=\"{{selector}}\"]`).replace(/\\s/g, '')\n\n  const hasRef = selector.indexOf('.') === 0 ||\n    selector.indexOf('#') === 0 ||\n    selector.indexOf('[') === 0\n\n  return hasRef\n    ? selector\n    : !exists(prefix) || (prefix && selector.indexOf(prefix) === 0)\n      ? `${format.replace('{{selector}}', selector)}`\n      : selector\n\n}\n","import { noOpObj } from '../helpers/noOp'\nimport { stringHasher } from '../helpers/stringHasher'\nimport { getCssSelector } from '../helpers/getCssSelector'\nimport { isObj, reduceObj, get, set } from '@keg-hub/jsutils'\n\n/**\n * Adds a value to the passed in styleObj at the passed in rulePath\n * @function\n * @param {Object} styleObj - Object to be updated with styles\n * @param {string} rulePath - Path on the object to update\n * @param {string|number} value - Value to set at the rulePath of the styleObj\n *\n * @returns {string} - Hashed version of the string\n */\nconst addRuleToStyles = (styleObj, rulePath, value) => {\n  set(styleObj, rulePath, value)\n  return styleObj\n}\n\n/**\n * Calls addRuleToStyles passing props based on the web || cssProps existence\n * @function\n * @param {Object} web - Object that stores web Styles\n * @param {Object} cssProps - Object that stores native Styles and the dataSet object\n * @param {string} rulePath - Path on the object to update\n * @param {string|number} value - Value to set at the rulePath of the styleObj\n *\n * @returns {string} - Hashed version of the string\n */\nconst buildStyleRules = (current, config, rule, value) => {\n  const { web, cssProps, custom } = current\n  const cssValue = isObj(custom) && custom[rule] || value\n\n  const selector = getCssSelector(config)\n  const rulePath = web ? `styles.${selector}.${rule}` : `style.${rule}`\n\n  addRuleToStyles(web || cssProps, rulePath, cssValue)\n\n  return { web, cssProps, selector }\n}\n\n/**\n * Adds the dataSet to the cssProps object\n * @function\n * @param {Object} web - Object that stores web Styles\n * @param {Object} cssProps - Object that stores native Styles and the dataSet object\n * @param {string} key - Name of the css rule || child style object\n * @param {string|number} value - Value to set at the rulePath of the styleObj\n *\n * @returns {string} - Hashed version of the string\n */\nconst addDataSet = (web, cssProps, key, selector, dataSet) => {\n  (web && get(web, `styles.${selector}`) || get(cssProps, `${key}.style`)) &&\n    set(cssProps, `${key}.dataSet`,  dataSet)\n}\n\n/**\n * Builds style rules of child style objects\n * @function\n * @param {Object} web - Object that stores web Styles\n * @param {Object} cssProps - Object that stores native Styles and the dataSet object\n * @param {string} rootClass - Root class to build the rules for\n * @param {string} key - Name of the css rule || child style object\n * @param {string|number|Object} value - Value to set at the rulePath of the styleObj\n *\n * @returns {string} - Built child style object\n */\nconst buildDataSet = (current, config, key, value) => {\n  const { web, cssProps } = current\n  const custom = isObj(current.custom) && current.custom[key] || noOpObj\n\n  // Build the class name to be used in the dataSet and web\n  const selector = `${config.selector}-${key}`\n\n  // Recursively call buildDataSet on each child object of the original cssProps\n  const built = generateDataSet(\n    web,\n    value,\n    custom,\n    { ...config, selector },\n  )\n\n  // Set the sub-cssProps to the key of the parent cssProps\n  cssProps[key] = built.cssProps\n\n  addDataSet(web, cssProps, key, built.selector, { class: selector })\n\n  // Create a hash of the selector to identify it later in in the HeadProvider\n  web && web.hash.push(stringHasher(selector))\n\n  // Merge web styles and return web and cssProps\n  return { cssProps, web: web && { ...web, ...built.web } }\n\n}\n\n/**\n * Builds the cssProps to be returned to the calling component\n * <br/> The method returns valid component props, which means\n * <br/> The cssProps can and should be applied directly to the component\n * <br/> It builds a dataSet: { class: <dynamic-class> } based on the path to found style rules\n * @example\n * const css = { content: { icon: { color: 'green' }}}\n * const cssProps = buildDataSet(`class`, css)\n * // cssProps === { content: { icon: { style: { color: 'blue' }, dataSet: { class: `class-content-icon` }}}}\n * // dataSet.class === css.content.icon === `class-content-icon`\n * // The class value `cssProps.content.icon.dataSet.class` is built from the cssStyle path to the Icon\n * @function\n * \n * @param {Object} web - Empty object to hold the styles when in on a Web Platform\n * @param {Object} css - CssInJs style object\n * @param {Object} [custom={}] - Custom styles to merge with the theme css\n * @param {Object} [config={}] - Config object for building style rules\n * \n * @returns {Object} - cssProps Object, containing style and dataSet keys\n */\nexport const generateDataSet = (web, css, custom, config={}) => {\n\n  return reduceObj(css, (key, value, built) => {\n    // Check if value is an object\n    return isObj(value)\n      // If it is, we know the key should be added to the dataSet\n      ? buildDataSet(\n          built,\n          config,\n          key,\n          value,\n        )\n      // If it's not an object, it must by style rules\n      // So make call to add it to the styles object\n      : buildStyleRules(\n          built,\n          config,\n          key,\n          value,\n        )\n\n  }, { cssProps: {}, web, custom })\n}\n"],"names":["noOpObj","Object","freeze","stringHasher","str","maxLength","isStr","length","split","reverse","join","hash","i","char","charCodeAt","Math","abs","slice","getCssSelector","selector","prefix","format","replace","hasRef","indexOf","exists","addRuleToStyles","styleObj","rulePath","value","set","buildStyleRules","current","config","rule","web","cssProps","custom","cssValue","isObj","addDataSet","key","dataSet","get","buildDataSet","built","generateDataSet","push","css","reduceObj"],"mappings":";;;;;IAKaA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd;;ACShB,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAsB;AAAA,MAAhBC,SAAgB,uEAAN,CAAM;AAChD,MAAI,CAACC,aAAK,CAACF,GAAD,CAAN,IAAeA,GAAG,CAACG,MAAJ,IAAc,CAAjC,EAAoC,OAAO,CAAP;AAEpCH,EAAAA,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,EAAV,EAAcC,OAAd,GAAwBC,IAAxB,CAA6B,EAA7B,CAAN;AAEA,MAAIC,IAAI,GAAG,CAAX;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACG,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACnC,QAAMC,KAAI,GAAGT,GAAG,CAACU,UAAJ,CAAeF,CAAf,CAAb;AACAD,IAAAA,IAAI,GAAI,CAACA,IAAI,IAAE,CAAP,IAAYA,IAAb,GAAqBE,KAA5B,CAFmC;AAInCF,IAAAA,IAAI,aAAOI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGA,IAAhB,CAAP,CAAJ;AACD;AAED,SAAON,SAAS,GAAGM,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcZ,SAAd,CAAH,GAA8BM,IAA9C;AACD,CAdM;;ACFA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,OAAkC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC9DA,EAAAA,MAAM,GAAG,CAACA,MAAM,oCAAP,EAA2CC,OAA3C,CAAmD,KAAnD,EAA0D,EAA1D,CAAT;AAEA,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,OAAT,CAAiB,GAAjB,MAA0B,CAA1B,IACbL,QAAQ,CAACK,OAAT,CAAiB,GAAjB,MAA0B,CADb,IAEbL,QAAQ,CAACK,OAAT,CAAiB,GAAjB,MAA0B,CAF5B;AAIA,SAAOD,MAAM,GACTJ,QADS,GAET,CAACM,cAAM,CAACL,MAAD,CAAP,IAAoBA,MAAM,IAAID,QAAQ,CAACK,OAAT,CAAiBJ,MAAjB,MAA6B,CAA3D,aACKC,MAAM,CAACC,OAAP,CAAe,cAAf,EAA+BH,QAA/B,CADL,IAEEA,QAJN;AAMD,CAbM;;ACEP,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA+B;AACrDC,EAAAA,WAAG,CAACH,QAAD,EAAWC,QAAX,EAAqBC,KAArB,CAAH;AACA,SAAOF,QAAP;AACD,CAHD;AAeA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAUC,MAAV,EAAkBC,IAAlB,EAAwBL,KAAxB,EAAkC;AAAA,MAChDM,GADgD,GACtBH,OADsB,CAChDG,GADgD;AAAA,MAC3CC,QAD2C,GACtBJ,OADsB,CAC3CI,QAD2C;AAAA,MACjCC,MADiC,GACtBL,OADsB,CACjCK,MADiC;AAExD,MAAMC,QAAQ,GAAGC,aAAK,CAACF,MAAD,CAAL,IAAiBA,MAAM,CAACH,IAAD,CAAvB,IAAiCL,KAAlD;AAEA,MAAMV,QAAQ,GAAGD,cAAc,CAACe,MAAD,CAA/B;AACA,MAAML,QAAQ,GAAGO,GAAG,oBAAahB,QAAb,cAAyBe,IAAzB,oBAA2CA,IAA3C,CAApB;AAEAR,EAAAA,eAAe,CAACS,GAAG,IAAIC,QAAR,EAAkBR,QAAlB,EAA4BU,QAA5B,CAAf;AAEA,SAAO;AAAEH,IAAAA,GAAG,EAAHA,GAAF;AAAOC,IAAAA,QAAQ,EAARA,QAAP;AAAiBjB,IAAAA,QAAQ,EAARA;AAAjB,GAAP;AACD,CAVD;AAsBA,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAACL,GAAD,EAAMC,QAAN,EAAgBK,GAAhB,EAAqBtB,QAArB,EAA+BuB,OAA/B,EAA2C;AAC5D,GAACP,GAAG,IAAIQ,WAAG,CAACR,GAAD,mBAAgBhB,QAAhB,EAAV,IAAyCwB,WAAG,CAACP,QAAD,YAAcK,GAAd,YAA7C,KACEX,WAAG,CAACM,QAAD,YAAcK,GAAd,eAA8BC,OAA9B,CADL;AAED,CAHD;AAgBA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACZ,OAAD,EAAUC,MAAV,EAAkBQ,GAAlB,EAAuBZ,KAAvB,EAAiC;AAAA,MAC5CM,GAD4C,GAC1BH,OAD0B,CAC5CG,GAD4C;AAAA,MACvCC,QADuC,GAC1BJ,OAD0B,CACvCI,QADuC;AAEpD,MAAMC,MAAM,GAAGE,aAAK,CAACP,OAAO,CAACK,MAAT,CAAL,IAAyBL,OAAO,CAACK,MAAR,CAAeI,GAAf,CAAzB,IAAgDzC,OAA/D,CAFoD;AAKpD,MAAMmB,QAAQ,aAAMc,MAAM,CAACd,QAAb,cAAyBsB,GAAzB,CAAd,CALoD;AAQpD,MAAMI,KAAK,GAAGC,eAAe,CAC3BX,GAD2B,EAE3BN,KAF2B,EAG3BQ,MAH2B,wFAItBJ,MAJsB;AAIdd,IAAAA,QAAQ,EAARA;AAJc,KAA7B,CARoD;AAgBpDiB,EAAAA,QAAQ,CAACK,GAAD,CAAR,GAAgBI,KAAK,CAACT,QAAtB;AAEAI,EAAAA,UAAU,CAACL,GAAD,EAAMC,QAAN,EAAgBK,GAAhB,EAAqBI,KAAK,CAAC1B,QAA3B,EAAqC;AAAE,aAAOA;AAAT,GAArC,CAAV,CAlBoD;AAqBpDgB,EAAAA,GAAG,IAAIA,GAAG,CAACxB,IAAJ,CAASoC,IAAT,CAAc5C,YAAY,CAACgB,QAAD,CAA1B,CAAP,CArBoD;AAwBpD,SAAO;AAAEiB,IAAAA,QAAQ,EAARA,QAAF;AAAYD,IAAAA,GAAG,EAAEA,GAAG,0FAASA,GAAT,GAAiBU,KAAK,CAACV,GAAvB;AAApB,GAAP;AAED,CA1BD;IAgDaW,eAAe,GAAG,SAAlBA,eAAkB,CAACX,GAAD,EAAMa,GAAN,EAAWX,MAAX,EAAiC;AAAA,MAAdJ,MAAc,uEAAP,EAAO;AAE9D,SAAOgB,iBAAS,CAACD,GAAD,EAAM,UAACP,GAAD,EAAMZ,KAAN,EAAagB,KAAb,EAAuB;AAE3C,WAAON,aAAK,CAACV,KAAD,CAAL;AAAA,MAEHe,YAAY,CACVC,KADU,EAEVZ,MAFU,EAGVQ,GAHU,EAIVZ,KAJU,CAFT;AAAA,MAUHE,eAAe,CACbc,KADa,EAEbZ,MAFa,EAGbQ,GAHa,EAIbZ,KAJa,CAVnB;AAiBD,GAnBe,EAmBb;AAAEO,IAAAA,QAAQ,EAAE,EAAZ;AAAgBD,IAAAA,GAAG,EAAHA,GAAhB;AAAqBE,IAAAA,MAAM,EAANA;AAArB,GAnBa,CAAhB;AAoBD;;;;;"}