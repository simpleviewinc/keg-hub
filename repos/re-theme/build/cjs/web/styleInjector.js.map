{"version":3,"file":"styleInjector.js","sources":["../../../src/styleInjector/injectHelpers.js","../../../src/constants/ruleOverrides.js","../../../src/helpers/noOp.js","../../../src/styleInjector/useStyleTag.js","../../../src/styleInjector/styleInjector.js"],"sourcesContent":["import { isArr, isStr, exists, omitKeys, pickKeys } from '@keg-hub/jsutils'\nimport { hasDomAccess } from '../helpers/hasDomAccess'\nimport { addThemeEvent } from '../theme/themeEvent'\nimport { Constants } from '../constants'\nimport { ruleOverrides } from '../constants/ruleOverrides'\n\n/**\n * Cache the current environment\n */\nconst { NODE_ENV } = process.env\nconst isProduction = NODE_ENV === 'production'\nconst domAccess = hasDomAccess()\n\n/**\n * Cache holder to hold the main StyleSheet Dom element\n */\nlet KegStyleSheet\n\n/**\n * Caches selectors already added to the Dom\n */\nconst selectorCache = new Set()\n\n/**\n * Checks if a selector already exists in the selector cache\n * @param {string} selector - selector to check if already exists\n * @param {string} sizeKey - Current size being rendered\n * \n * @return {Boolean} - If the selector has already been cached\n */\nconst selectorExists = selector => selectorCache.has(selector)\n\n/**\n * Gets the cached style sheet, or finds it on the DOM\n * @function\n * \n * @returns {Object} - Keg Style sheet\n */\nconst getKegSheet = () => {\n  KegStyleSheet = KegStyleSheet || document.head.querySelector(Constants.KEG_STYLES_TAG_ID)\n  return KegStyleSheet\n}\n\n/**\n * External hyphenator helpers, created outside the method to improve performance\n * @Object\n */\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @param {string} str - camelCase style rule rule\n * \n * @returns {string} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => ('-' + match.toLowerCase())\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {string} str - camelCase style rule rule\n *\n * @returns {string} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}\n\n/**\n * Creates a hash from a passed in string consistently\n * <br/>Not intended to be secure\n * <br/>Value comes from being a pure function\n * <br/>Given the same input, it will always return the same output\n * <br/>There is no expectation to convert back from the hash to the original string\n * @function\n * @param {string} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {string} - Hashed version of the string\n */\nexport const hashString = (str, maxLength=0) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse().join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash<<5) - hash) + char\n    // Convert to positive 32bit integer\n    hash = `${ Math.abs(hash & hash) }`\n  }\n\n  return maxLength ? hash.slice(0, maxLength) : hash\n}\n\n/**\n * Filters out styles that require extra help to convert to CSS\n * <br/>In these cases, we let react-native-web handel through the style attribute\n * @function\n * @param {Object} style - Object containing style rules\n * @param {Array} filter - Custom style rules to filter out\n *\n * @returns {Object} - Contains separated objects with filtered styles, non-filtered styles\n */\nexport const filterRules = (style, filter) => {\n  const toFilter = isArr(filter) ? ruleOverrides.filter.concat(filter) : ruleOverrides.filter\n  return {\n    style: omitKeys(style, toFilter),\n    filtered: pickKeys(style, toFilter)\n  }\n}\n\n/**\n * Creates a unique selector based on the passed in className and cssString\n * @function\n * @param {string|Array<string>} className - Original className(s) used as a css selector\n * @param {string} cssString - Css rules for the className in string format\n * @param {string=} filterPrefix - optional prefix to filter by\n * \n * @returns {{hashClass:string, selector:string}} - returns selector string and hashClass string\n */\nexport const getSelector = (className, cssString, filterPrefix) => {\n\n  // filter by prefix if passed in\n  const filterWithPrefix = cls => {\n    return cls && filterPrefix\n      ? cls.startsWith(filterPrefix)\n      : cls\n  }\n\n  const selector = !exists(className)\n    ? false\n    : isArr(className)\n      ? className.filter(filterWithPrefix).pop()\n      : isStr(className) && className.split(' ').filter(filterWithPrefix).pop()\n\n  const hashClass = `keg-${hashString(cssString)}`\n  return {\n    hashClass,\n    selector: selector\n      ? `.${selector.trim()}.${hashClass}`.trim()\n      : `.${hashClass}`.trim()\n  } \n}\n\n/**\n * Adds a css string to the KegStyleSheet\n * @param {string} selector - Css selector to add the style rules to\n * @param {string} css - Style rules to be added \n * \n * @returns {Void}\n */\nexport const addStylesToDom = (selector, css) => {\n\n  // skip if these styles are already inserted\n  if (!domAccess || !css || selectorExists(selector)) return\n\n  // Cache the selector with the size\n  // So next time we can look up if the size changed\n  selectorCache.add(selector)\n  \n  const KegSheet = getKegSheet()\n  // The insertRule method is a lot faster then append method\n  // But it does not allow you to see the styles in the inspector\n  // So we only want to use it when in production\n  // We have to wrap it in @media all selector\n  // This is due to the limitations of insertRule requiring the css to be wrapped\n  isProduction\n    ? KegSheet.sheet.insertRule(`@media all {${css.all}}`)\n    : KegSheet.append(css.all)\n\n}\n\n/**\n * Removes any keys stored in the selectorCache\n * <br/>Removes all styles applied to the Dom\n * @function\n * \n * @returns {Void}\n */\nconst clearStyleSheet = () => {\n  selectorCache.clear()\n  const KegSheet = getKegSheet()\n  KegSheet.textContent = ''\n}\n\n/**\n * Add an event listener to the Theme Build event\n * Any time the theme rebuilds, we want to reset the styles added to the dom\n */\naddThemeEvent(Constants.BUILD_EVENT, clearStyleSheet)\n\n/**\n * Creates a <style> Element on the dom, is called immediately\n * \n * @returns {Object} - finds or creates style tag with Constants.KEG_STYLES_TAG_ID as the id\n */\n;(() => {\n\n  if(!domAccess) return\n\n  KegStyleSheet = document.head.querySelector(Constants.KEG_STYLES_TAG_ID)\n\n  if (KegStyleSheet) return KegStyleSheet\n\n  KegStyleSheet = document.createElement('style')\n  KegStyleSheet.id = Constants.KEG_STYLES_TAG_ID\n  document.head.append(KegStyleSheet)\n\n})()","export const ruleOverrides = {\n  // Important rules should include the prefixed version\n  // Because important rules are checked after going through the prefixer\n  // Important rules have `!important` added to them to allow overwriting the style attribute\n  important: [],\n\n  // Filtered rules are not added to the Dom with CSS\n  // They are filtered out and passed on to react-native-web to manage\n  filter: [\n    'aspectRatio',\n    'elevation',\n    'overlayColor',\n    'resizeMode',\n    'tintColor',\n    'backgroundSize',\n    'animationKeyframes',\n    'placeholderTextColor',\n    'pointerEvents',\n    'scrollbarWidth',\n  ]\n}","/**\n * Consistent object which can be reused to keep it's identity\n * @object\n */\nexport const noOp = () => {}\nexport const noOpObj = Object.freeze({})","import { useMemo } from 'react'\nimport { addStylesToDom, getSelector, hyphenator, filterRules } from './injectHelpers'\nimport { isArr, eitherArr, isObj } from '@keg-hub/jsutils'\nimport { useTheme } from '../hooks/useTheme'\nimport {\n  prefixStyles,\n  flattenArray,\n  flattenStyle,\n  createReactDOMStyle,\n  createCompileableStyle,\n} from './reactNativeWeb'\nimport { ruleOverrides } from '../constants/ruleOverrides'\nimport { noOpObj } from '../helpers/noOp'\n\n/**\n * Checks if the rule is enforce and adds !important to it\n * @param {Object} style - Styles rules to be converted to style rules string\n * \n * @returns {string} - Style rules Object converted into a style rules string\n */\nconst checkImportant = (property, value, important) => (\n  important.includes(property)\n    ? `${value} !important`\n    : value\n)\n\n/**\n * Creates a style rules string from a JS object\n * @param {Object} style - Styles rules to be converted to style rules string\n * \n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const createBlock = (style, config) => {\n  const important = ruleOverrides.important.concat(config?.important)\n  \n  const prefixed = prefixStyles(createReactDOMStyle(style))\n  const cssString = Object.keys(prefixed)\n    .map(property => {\n      const value = checkImportant(property, prefixed[property], important)\n      const prop = hyphenator(property)\n\n      return isArr(value)\n        ? value.map(val => (`${prop}:${val}`)).join(';')\n        : `${prop}:${value}`\n    })\n    .sort().join(';')\n\n  return `{${cssString}}`\n}\n\n/**\n * Converts a JS style object into a style rules string\n * @param {Object} style - Styles rules to be converted to style rules string\n * \n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const convertToCss = (style, config) => {\n  const stlArr = flattenArray(eitherArr(style, [style]))\n\n  return stlArr.reduce((rules, stl) => {\n    if(!isObj(stl)) return rules\n    \n    const { style:cleanStyle, filtered } = filterRules(stl, config?.filter)\n    Object.assign(rules.filtered, filtered)\n\n    const flat = flattenStyle(cleanStyle)\n    const compiled = createCompileableStyle(flat)\n    rules.blocks.push(createBlock(compiled, config))\n\n    return rules\n  }, { blocks: [], filtered: {} })\n\n}\n\n/**\n * Custom hook to convert a JS style object into a valid css string\n * <br/>After converting it, it appends it to the Dom\n * <br/>It also keeps a hash of all appended styles rules to avoid duplication\n * @param {Object} style - Styles rules to be converted and added to the Dom\n * @param {string|Array<string>} className - Css selector(s) of the style fules\n * \n * @returns {Object} - className Css selector of the added style rules\n */\nexport const useStyleTag = (style, className='', config) => {\n  // Ensure config is an object\n  config = isObj(config) ? config : noOpObj\n\n  const theme = useTheme()\n  const themeSize = theme?.RTMeta?.size\n  const themeKey = theme?.RTMeta?.key\n\n  return useMemo(() => {\n    const { blocks, filtered } = convertToCss(style, config)\n\n    // Create a unique selector based on the className and built blocks\n    const {hashClass, selector} = getSelector(className, blocks.join(''), 'keg')\n\n    // Adds the css selector ( className ) to each block\n    const css = blocks.reduce((css, block) => {\n      const fullBlock = `${selector}${block}`\n      css.all += fullBlock\n      css.rules.push(fullBlock)\n\n      return css\n    }, { all: '', rules: [] })\n\n    addStylesToDom(selector, css, themeKey)\n    return {\n      css,\n      filteredStyle: filtered,\n      classList: eitherArr(className, [className]).concat([hashClass]),\n    }\n  }, [style, className, themeSize, themeKey, config])\n\n}\n","import React from 'react'\nimport { useStyleTag } from './useStyleTag'\n\n/**\n * Helper component that actually calls the useStyleTag hook\n * <br/>Call the useStyleTag hook here to allow calling the hook conditionally\n * <br/>and not break the rules of Hooks\n * @param {Object} props - All props passed to the wrapped Component\n * @param {Object} props.Component - Component being wrapped by the HOC\n * @param {string} props.KegDefClass - Default className of the wrapped Component\n * @param {Object} props.style - Styles to be added to the Dom\n * \n * @returns {string} - className Css selector of the added style rules\n */\nconst BuildWithStyles = React.forwardRef((props, ref) => {\n  const { Component, children, config, className, style, ...buildProps } = props\n  const { className:KegDefClass } = config\n  \n  const { classList, filteredStyle } = useStyleTag(style, className || KegDefClass, config)\n\n  return (\n    <Component\n      {...buildProps}\n      style={filteredStyle}\n      ref={ref}\n      className={classList}\n    >\n      {children}\n    </Component>\n  )\n})\n\n/**\n * Custom Hoc that wraps a component, and extracts the style prop from props\n * <br/>It then appends the style props to the Dom\n * <br/>Component must accept a className prop to work properly\n * @param {Object} Component - React Component to wrap\n * @param {Object} config - Settings for the Hoc\n * \n * @returns {Function} - Anonymous function that wraps the passed in Component\n */\nexport const StyleInjector = (Component, config={}) => {\n  return React.forwardRef(({ style, ...props}, ref) => {\n    return !style\n      ? (<Component {...props} style={style} ref={ref} />)\n      : (\n          <BuildWithStyles\n            {...props}\n            style={style}\n            config={config}\n            Component={Component}\n            ref={ref}\n          />\n        )\n  })\n}\n\n"],"names":["KegStyleSheet","ruleOverrides","important","filter","domAccess","hasDomAccess","selectorCache","Set","getKegSheet","document","head","querySelector","Constants","KEG_STYLES_TAG_ID","uppercasePattern","msPattern","hyphenCache","toHyphenLower","match","toLowerCase","getSelector","className","cssString","filterPrefix","filterWithPrefix","cls","startsWith","selector","exists","isArr","pop","isStr","split","hashClass","str","maxLength","length","reverse","join","hash","i","char","charCodeAt","Math","abs","slice","hashString","trim","addStylesToDom","css","has","selectorExists","add","KegSheet","sheet","insertRule","all","addThemeEvent","BUILD_EVENT","clear","textContent","createElement","id","append","noOpObj","Object","freeze","createBlock","style","config","concat","prefixed","prefixStyles","createReactDOMStyle","keys","map","property","value","includes","checkImportant","prop","rule","hasOwnProperty","hRule","replace","test","hyphenator","val","sort","convertToCss","flattenArray","eitherArr","reduce","rules","stl","isObj","toFilter","omitKeys","filtered","pickKeys","filterRules","cleanStyle","assign","flat","flattenStyle","compiled","createCompileableStyle","blocks","push","useStyleTag","theme","useTheme","themeSize","RTMeta","_theme$RTMeta","size","themeKey","_theme$RTMeta2","key","useMemo","block","fullBlock","filteredStyle","classList","BuildWithStyles","React","forwardRef","props","ref","Component","children","buildProps","KegDefClass"],"mappings":"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"}