{"version":3,"file":"index.js","sources":["../../../node_modules/prop-types/factoryWithThrowingShims.js","../../../node_modules/prop-types/index.js","../../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../../src/context/reThemeProvider.js","../../../src/hooks/nativeThemeHook.js","../../../src/dimensions/dimensions.native.js","../../../src/dimensions/useDimensions.js","../../../src/hooks/useStylesCallback.js","../../../src/theme/withTheme.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useState, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ReThemeContext } from './reThemeContext'\nimport { Dimensions } from 'ReDimensions'\nimport { getSize } from '../dimensions/sizeMap'\nimport { buildTheme, getDefaultTheme } from '../theme'\nimport { getCurrentTheme } from '../theme/manageTheme'\nimport { get } from '@keg-hub/jsutils'\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge, platforms } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n\n    // Get the size we should change to\n    const changeToSize = getSize(width)\n\n    // If no size to change to, just return\n    if (!changeToSize) return\n\n    // Get the string version of the size to change to\n    const sizeToBe = changeToSize[0]\n\n    // Get the current theme to check the size\n    const currentTheme = getCurrentTheme()\n    // Get the current size string version\n    const currentSize = get(currentTheme, [ 'RTMeta', 'key' ])\n\n    // Check if the sizes are not equal, and if so update the Dimensions with the new size\n    // Update the state with the updated dimensions data\n    sizeToBe !== currentSize &&\n      setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listeners\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listeners\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  const builtTheme = useMemo(() => {\n    return buildTheme(\n      theme,\n      dimensions.width,\n      dimensions.height,\n      merge && getDefaultTheme(),\n      platforms\n    )\n  }, [ theme, dimensions.width, dimensions.height, merge, platforms ])\n\n  return (\n    <ReThemeContext.Provider value={builtTheme}>\n      { children }\n    </ReThemeContext.Provider>\n  )\n}\n\nReThemeProvider.propTypes = {\n  /**\n  Global defined Application theme\n  */\n  theme: PropTypes.object.isRequired,\n  /**\n  Should merge passed in theme prop with the current theme\n  */\n  merge: PropTypes.bool,\n  /**\n  Custom theme platform to use for the current context\n  */\n  platforms: PropTypes.array,\n  /**\n   Child components to wrap the with ReTheme provider\n  */\n  children: PropTypes.node,\n}\n","import { useRef, useState, useLayoutEffect } from 'react'\nimport { get, shallowEqual } from '@keg-hub/jsutils'\n\n/**\n * Checks it two passed in objects are equal pointers or equal as json strings\n * @param {Object} obj1 - Object to check\n * @param {Object} obj2 - Object to check\n *\n * @returns {boolean} - If objects are equal\n */\nconst checkEqual = (obj1, obj2) => obj1 === obj2 || shallowEqual(obj1, obj2)\n\n/**\n * Placeholder hook when on native device\n * @param {Object} offValue - When on native, this theme will always be used\n * @param {Object} onValue - Active theme, only used when on web\n * @param {Object} options - Options object that could hold am element ref\n *\n * @returns {Array} - Hook formatted array, same as on web\n */\nexport const nativeThemeHook = (offValue, onValue, options) => {\n  // Get the ref object\n  const hookRef = get(options, 'ref', useRef())\n\n  // Set the default value\n  const [ value, setValue ] = useState(offValue)\n\n  useLayoutEffect(() => {\n    !checkEqual(offValue, value) && setValue(value)\n  }, [ offValue, onValue ])\n\n  // Return an array matching the same format as on web\n  return [ hookRef, offValue, setValue ]\n}\n","let RNDimensions\n\nconst loadReactNativeDimensions = () => {\n  const { Dimensions } = require('react-native')\n  return Dimensions\n}\n\nconst checkDimensions = callBack => {\n  return (...props) => {\n    RNDimensions = RNDimensions || loadReactNativeDimensions()\n\n    return RNDimensions\n      ? callBack(...props)\n      : console.error(\n        `[ ReTheme ERROR ] - Missing Dimensions`,\n        `\\n   - You must initialize 'Dimensions' before using the 'ReThemeProvider'`,\n        `\\n   - Do this by calling 'setRNDimensions(Dimensions)'`,\n        `\\n   - The first argument must be the 'Dimensions' export of 'react-native'`,\n        `\\n   - Or an Object with a matching API`\n      )\n  }\n}\n\nexport const setRNDimensions = dims => (RNDimensions = dims)\n\nexport const Dimensions = {\n  get: checkDimensions((...params) => {\n    return RNDimensions ? RNDimensions.get(...params) : { width: 0, height: 0 }\n  }),\n  set: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.set(...params)\n  }),\n  update: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.update(...params)\n  }),\n  addEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.addEventListener(...params)\n  }),\n  removeEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.removeEventListener(...params)\n  }),\n}\n","/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport { checkCall, isObj, isEmptyColl } from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} cbDependencies - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n *\n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (stylesCb, cbDependencies, customStyles) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies || [])\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(() => checkCall(cb, theme, styles, ...cbDependencies) || {}, [\n    theme,\n    cb,\n    styles,\n  ])\n}\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n"],"names":["emptyFunction","emptyFunctionWithReset","resetWarningCache","module","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$0","ReThemeProvider","children","theme","doMerge","merge","platforms","Boolean","useState","Dimensions","get","dimensions","setDimensions","onChange","win","window","width","height","scale","fontScale","changeToSize","getSize","sizeToBe","currentTheme","getCurrentTheme","useEffect","addEventListener","removeEventListener","builtTheme","useMemo","buildTheme","getDefaultTheme","React","ReThemeContext","Provider","value","propTypes","nativeThemeHook","offValue","onValue","options","hookRef","useRef","setValue","useLayoutEffect","obj1","obj2","shallowEqual","dims","shouldUnmount","stylesCb","cbDependencies","customStyles","cb","useCallback","styles","isObj","isEmptyColl","useTheme","checkCall","Component","Consumer"],"mappings":"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"}