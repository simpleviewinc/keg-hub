{"version":3,"file":"index.js","sources":["../../../src/dimensions/useDimensions.js","../../../src/theme/withTheme.js","../../../src/hooks/useTheme.js","../../../src/styleParser/cssProperties.js","../../../src/styleParser/jsToCss.js","../../../src/hooks/useCss.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/nativeThemeHook.js"],"sourcesContent":["/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from './dimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/** @module hooks */\n\nimport { useContext } from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Uses the useContext hook from react to get the current theme ( Value prop of the context )\n *\n * @returns { Object } - Current theme\n */\nexport const useTheme = () => {\n  return useContext(ReThemeContext)\n}\n","  \nexport default {\n  noUnits: {\n    animationIterationCount: true,\n    borderImageOutset: true,\n    borderImageSlice: true,\n    borderImageWidth: true,\n    boxFlex: true,\n    boxFlexGroup: true,\n    boxOrdinalGroup: true,\n    columnCount: true,\n    columns: true,\n    flex: true,\n    flexGrow: true,\n    flexPositive: true,\n    flexShrink: true,\n    flexNegative: true,\n    flexOrder: true,\n    gridRow: true,\n    gridRowEnd: true,\n    gridRowSpan: true,\n    gridRowStart: true,\n    gridColumn: true,\n    gridColumnEnd: true,\n    gridColumnSpan: true,\n    gridColumnStart: true,\n    fontWeight: true,\n    lineClamp: true,\n    lineHeight: true,\n    opacity: true,\n    order: true,\n    orphans: true,\n    tabSize: true,\n    widows: true,\n    zIndex: true,\n    zoom: true,\n\n    // SVG-related properties\n    fillOpacity: true,\n    floodOpacity: true,\n    stopOpacity: true,\n    strokeDasharray: true,\n    strokeDashoffset: true,\n    strokeMiterlimit: true,\n    strokeOpacity: true,\n    strokeWidth: true,\n  }\n}\n","import { isNum, isObj } from '@keg-hub/jsutils'\nimport cssProperties from './cssProperties'\n\n/**\n * Converts JS CSS rule into CSS string\n * @param  { object } rule - style as JS CSS\n * @return { string } rule convert into CSS string\n */\nconst createRules = rule => (\n  Object\n    .entries(rule)\n    .reduce((ruleString, [ propName, propValue ]) => {\n      const name = propName\n        .replace(/([A-Z])/g, matches => `-${matches[0].toLowerCase()}`)\n\n      const hasUnits = !cssProperties.noUnits[propName]\n      const val = hasUnits && isNum(propValue) && propValue + 'px' || propValue\n\n      return `${ruleString}\\n\\t${name}: ${val};`\n    }, '')\n)\n\n/**\n * Converts a block of JS CSS into CSS string\n * @param  { string } selector - CSS selector for the rules\n * @param  { object } rls - CSS rules to be converted into a string\n * @return\n */\nconst createBlock = (selector, rls) => {\n  const subSelect = []\n\n  const filteredRls = Object.keys(rls)\n    .reduce((filtered, key) => {\n\n      !isObj(rls[key])\n        ? (filtered[key] = rls[key])\n        : (subSelect.push([ `${selector} ${key}`, rls[key] ]))\n\n      return filtered\n    }, {})\n\n  const styRls = createRules(filteredRls)\n  let block = `${selector} {${styRls}\\n}\\n`\n\n  subSelect.length &&\n    subSelect.map(subItem => block += createBlock(subItem[0], subItem[1]))\n\n  return block\n}\n\n  /**\n  * Converts the JS styles into a css string\n  * @param  { array of objects } rules - array of object styles to add convert into string\n  * @return { string } styles objects converted into string as formatted css styles\n  */\nexport const jsToCss = rules => {\n  return Object\n    .entries(rules)\n    .reduce((styles, [ selector, rls ]) => (styles + createBlock(selector, rls)), '')\n}\n","import { useTheme } from './useTheme'\nimport { noOpObj } from '../helpers/noOp'\nimport { useContext, useMemo } from 'react'\nimport { jsToCss } from '../styleParser/jsToCss'\nimport { HeadContext } from '../head/headContext'\nimport { getRNPlatform } from '../context/platform'\nimport { hasDomAccess } from '../helpers/hasDomAccess'\nimport { generateDataSet } from '../styleParser/generateDataSet'\nimport { checkCall, get, isStr, isObj, exists, uniqArr, isEmptyColl } from '@keg-hub/jsutils'\n\n/**\n * Cache holder for quick check if we're using web styles or not\n * <br> Can be overridden by passing inline to the useCss hook\n * @object\n */\nlet __webPlatform\n\n\n/**\n * Validates the passed in theme style object to ensure the key value pairs are style rules\n * <br/>If style object is not valid, then it will throw!\n * <br/>Should only run in production\n * <br/>Bypassed when in production\n * @function\n * @param {Object} style - CssInJs style object\n * @param {string} selector - Root class name for build the sub-data-call attributes\n *\n * @returns {boolean} - If themeStyles is a valid styles object\n */\nconst validTheme = (themeStyles, selector) => {\n  return process.env.NODE_ENV === 'production' ||\n    Boolean(isObj(themeStyles) && selector) ||\n    console.error(\n      `[ ReTheme ERROR ] - Invalid styleRef`,\n      `\\n   - useCss hook requires a valid theme reference of type 'Object' || 'string'`,\n      `\\n   - As string - must be a dot delimited path to a styles object on the global theme`,\n      `\\n   - As Object - must be a valid CssInJs styles object`,\n      `\\n`,\n      `\\n   - A 'root class' of type 'string' is also required`,\n      `\\n   - It can be a key on the 'styleRef' as '$class' or '$className'`,\n      `\\n   - Or passed as the third argument to the 'useCss' hook`\n    )\n}\n\n/**\n * Checks if we should use web css style sheets or inline styles base on inline and platform\n * @function\n * @param {string} inline - Force use inline styles regardless of platform\n * \n * @returns {boolean} - true if using a web platform, false if not on web || inline === true\n */\nconst checkWebPlatform = inline => {\n  return inline\n    ? false\n    : exists(__webPlatform)\n      ? __webPlatform\n      : checkCall(() => {\n          const platform = getRNPlatform()\n          // Cache the web platform call so we don't have to call this again\n          // The Platform doesn't change, so it's not an issue\n          __webPlatform = hasDomAccess() && platform.OS === 'web'\n            ? true\n            : false\n\n          return __webPlatform\n        })\n}\n\n/**\n * Custom hook for adding styles to the Dom in a web context\n * When on native, will return a dataSet and style prop to be applied to the element\n * @example\n * const { cssProps, styleProps } = useCss(styleRef, customStyles, rootClass)\n * <Style {...styleProps} />\n * <View {...cssProps} >My View</View>\n * \n * @param {Object|string} styleRef - CssInJs style object with a $class || $className key\n *                                   Or a dot separate string path within the main Theme\n * @param {Object} [customStyles={}] - Custom styles to merge with the theme css\n * @param {Object} config - Defines how the hook should build the dataSet and styles\n * @param {boolean} [config.inline=false] - Always return inline styles\n * @param {string} [config.selector=styleRef.$class] - Root css selector to use for all dataSet props overrides $class in theme\n * @param {string} config.prefix - Filters only theme objects that start with this prefix\n * @param {string|function} config.format - Template for building the css selector\n * \n * @returns { Object } - Current theme\n */\nexport const useCss = (styleRef, customStyles, config={}) => {\n  const { rootClass, inline, selector, id } = config\n  \n  const theme = useTheme()\n  const head = useContext(HeadContext)\n\n  // Check if the styleRef is a theme path as a string\n  // Or it could be an style object from the theme\n  const themeStyles = useMemo(() => {\n    return isStr(styleRef) ? get(theme, styleRef, noOpObj) : (styleRef || noOpObj)\n  }, [ styleRef, theme ])\n  \n  // Ensure the custom styles are an object and not empty\n  const custom = !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n    ? noOpObj\n    : customStyles\n\n  return useMemo(() => {\n    // Extract the $class and $className from the themeStyles\n    const { $class, $className, ...cssStyle } = (themeStyles || noOpObj)\n    const selector = rootClass || $className || $class || id\n\n    if(!validTheme(themeStyles, selector)) return noOpObj\n\n    // Check if we should add the styles to the Dom\n    const webContent = checkWebPlatform(inline) && { styles: {}, hash: [] }\n\n    // Builds the dataSet prop dynamically form \n    // The passed in cssStyle object\n    const { cssProps, web } = generateDataSet(\n      webContent,\n      cssStyle,\n      custom,\n      { selector, ...config }\n    )\n\n    if(!web) return { cssProps, styleProps: {} }\n\n    // TODO: this it not currently being handled after the refactor\n    // Need to update to use the hash based on custom styles\n    const hashId = web && uniqArr(web.hash).join('-')\n\n    // When on web, add the styles to a Dom <style> element\n    // This allows using css sudo classes like :hover\n    return {\n      cssProps,\n      styleProps: {\n        id: hashId,\n        // Only build the styles if the hashId does not all ready exist\n        children: head.hasHash(hashId) ? '' : jsToCss(web.styles, hashId),\n      }\n    }\n\n  }, [ themeStyles, custom, rootClass, inline, selector, id ])\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport { checkCall, isObj, isEmptyColl } from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} cbDependencies - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n * \n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (stylesCb, cbDependencies, customStyles) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies || [])\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(() => checkCall(cb, theme, styles, ...cbDependencies) || {}, [ theme, cb, styles ])\n}\n","import { useRef, useState, useLayoutEffect } from 'react'\nimport { get, jsonEqual } from '@keg-hub/jsutils'\n\n/**\n * Checks it two passed in objects are equal pointers or equal as json strings\n * @param {Object} obj1 - Object to check\n * @param {Object} obj2 - Object to check\n *\n * @returns {boolean} - If objects are equal\n */\nconst checkEqual = (obj1, obj2) => obj1 === obj2 || jsonEqual(obj1, obj2)\n\n/**\n * Placeholder hook when on native device\n * @param {Object} offValue - When on native, this theme will always be used\n * @param {Object} onValue - Active theme, only used when on web\n * @param {Object} options - Options object that could hold am element ref\n *\n * @returns {Array} - Hook formatted array, same as on web\n */\nexport const nativeThemeHook = (offValue, onValue, options) => {\n  // Get the ref object\n  const hookRef = get(options, 'ref', useRef())\n\n  // Set the default value\n  const [ value, setValue ] = useState(offValue)\n\n  useLayoutEffect(() => {\n    !checkEqual(offValue, value) && setValue(value)\n  }, [ offValue, onValue ])\n\n  // Return an array matching the same format as on web\n  return [ hookRef, offValue, setValue ]\n}\n"],"names":["useDimensions","useState","Dimensions","get","dimensions","setDimensions","onChange","win","window","width","height","scale","fontScale","useEffect","addEventListener","shouldUnmount","removeEventListener","withTheme","Component","props","React","ReThemeContext","value","useTheme","useContext","noUnits","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","createRules","rule","Object","entries","reduce","ruleString","propName","propValue","name","replace","matches","toLowerCase","hasUnits","cssProperties","val","isNum","createBlock","selector","rls","subSelect","filteredRls","keys","filtered","key","isObj","push","styRls","block","length","map","subItem","jsToCss","rules","styles","__webPlatform","checkWebPlatform","inline","exists","checkCall","platform","getRNPlatform","hasDomAccess","OS","useCss","styleRef","customStyles","config","rootClass","id","theme","head","HeadContext","themeStyles","useMemo","isStr","noOpObj","custom","isEmptyColl","$class","$className","cssStyle","webContent","hash","generateDataSet","cssProps","web","styleProps","hashId","uniqArr","join","children","hasHash","useStylesCallback","stylesCb","cbDependencies","cb","useCallback","checkEqual","obj1","obj2","jsonEqual","nativeThemeHook","offValue","onValue","options","hookRef","useRef","setValue","useLayoutEffect"],"mappings":"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"}