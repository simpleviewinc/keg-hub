{"version":3,"file":"colors.js","sources":["../../../src/helpers/colors.js"],"sourcesContent":["import { isObj, isArr, isStr, isNum } from '@keg-hub/jsutils'\n\nconst convertToPercent = (num, percent) =>\n  parseInt((num * (100 + percent)) / 100)\n\nconst checkColorMax = num => (num < 255 ? num : 255)\n\nconst convertToColor = (num, percent) => {\n  const asPercent = convertToPercent(num, percent)\n  const withMax = checkColorMax(asPercent)\n  const asStr = withMax.toString(16)\n\n  return asStr.length == 1 ? `0${asStr}` : asStr\n}\n\nconst mapOpacity = (opacity, color) => {\n  // Map opacity amounts by .5\n  for (let amount = 100; amount >= 0; amount -= 5)\n    opacity[`_${amount}`] = opacity((amount / 100).toFixed(2), color)\n\n  return opacity\n}\n\n/**\n * Convert hex color to rgba\n * @param  {string} hex - color to convert\n *\n * @param {number} opacity - from 0-1\n * @return rgba as string\n */\nexport const hexToRgba = (hex, opacity, asObj) => {\n  if (!hex)\n    return (\n      console.warn('Can not convert hex to rgba', hex) || `rgba(255,255,255,0)`\n    )\n\n  hex = hex.indexOf('#') === 0 ? hex.replace('#', '') : hex\n  hex = hex.length === 3 ? `${hex}${hex}` : hex\n\n  opacity = opacity > 1 ? (opacity / 100).toFixed(4) : opacity\n\n  const rgbaObj = {\n    r: parseInt(hex.substring(0, 2), 16),\n    g: parseInt(hex.substring(2, 4), 16),\n    b: parseInt(hex.substring(4, 6), 16),\n    a: !opacity && opacity !== 0 ? 1 : opacity,\n  }\n\n  return asObj ? rgbaObj : toRgb(rgbaObj)\n}\n\n/**\n * Convert a hex color to rgba setting the opacity to the passed in amount prop\n * @param {number} amount - Opacity amount\n * @param {string|Object} color - color to convert\n *\n * @return rgba as string\n */\nexport const opacity = mapOpacity((amount, color) => {\n  return isStr(color) && color.indexOf('#') === 0\n    ? hexToRgba(color, amount)\n    : isObj(color)\n      ? toRgb(color, amount)\n      : `rgba(${color || '0,0,0'}, ${amount})`\n})\n\n/**\n * Shades a hex color based on the passed in percent\n * @param {string} color - Hex color to shade\n * @param {number} percent - amount to shared, can be positive or negitive\n *\n * @returns {string} - Shaded hex string\n */\nexport const shadeHex = (color, percent) => {\n  const rgba = hexToRgba(color, 1, true)\n\n  return (\n    '#' +\n    convertToColor(rgba.r, percent) +\n    convertToColor(rgba.g, percent) +\n    convertToColor(rgba.b, percent)\n  )\n}\n\n/**\n * Convert { r: 0, g: 0, b:0, a: 0 } object to rgba() string\n * @param {string|number|object} red - red color value or an object with r,g,b,a values\n * @param {string|number} green - green color value\n * @param {string|number} blue - blue color value\n * @param {number|float} alpha - opacity - from 0-1\n *\n * @return {string} rgba string\n */\nexport const toRgb = (red, green, blue, alpha) => {\n  const obj = isObj(red) ? red : { r: red, g: green, b: blue, a: alpha }\n  obj.a = !obj.a && obj.a !== 0 ? 1 : obj.a\n\n  return `rgba(${obj.r}, ${obj.g}, ${obj.b}, ${obj.a})`\n}\n\n/**\n * Builds a CSS transition rule\n * @param {Array} [props=[]] - CSS rules to have the transition applied to\n * @param {number} [speed=250] - Speed of the transition\n * @param {string} [timingFunc='ease'] - Type of transition animation to use\n *\n * @returns {Object} - Built CSS transition rule\n */\nexport const transition = (props = [], speed = 250, timingFunc = 'ease') => {\n  speed = isNum(speed) ? `${speed}ms` : isStr(speed) ? speed : `250ms`\n\n  return typeof props === 'string'\n    ? { transition: `${props} ${speed} ${timingFunc}` }\n    : isArr(props)\n      ? {\n          transition: props\n            .reduce((trans, prop) => {\n              trans.push(`${prop} ${speed} ${timingFunc}`)\n              return trans\n            }, [])\n            .join(', '),\n        }\n      : null\n}\n"],"names":["convertToColor","num","percent","asStr","checkColorMax","parseInt","convertToPercent","toString","length","hexToRgba","hex","opacity","asObj","console","warn","indexOf","replace","toFixed","rgbaObj","r","substring","g","b","a","toRgb","color","amount","mapOpacity","isStr","isObj","red","green","blue","alpha","obj","rgba","props","speed","timingFunc","isNum","transition","isArr","reduce","trans","prop","push","join"],"mappings":"sGAOMA,eAAiB,SAACC,EAAKC,OAGrBC,EALc,SAAAF,UAAQA,EAAM,IAAMA,EAAM,IAI9BG,CAPO,SAACH,EAAKC,UAC7BG,SAAUJ,GAAO,IAAMC,GAAY,KAKjBI,CAAiBL,EAAKC,IAElBK,SAAS,WAER,GAAhBJ,EAAMK,kBAAkBL,GAAUA,GAkB9BM,UAAY,SAACC,EAAKC,EAASC,OACjCF,EACH,OACEG,QAAQC,KAAK,8BAA+BJ,0BAIhDA,EAAqB,KADrBA,EAA2B,IAArBA,EAAIK,QAAQ,KAAaL,EAAIM,QAAQ,IAAK,IAAMN,GAC5CF,iBAAkBE,UAAMA,GAAQA,EAE1CC,EAAUA,EAAU,GAAKA,EAAU,KAAKM,QAAQ,GAAKN,MAE/CO,EAAU,CACdC,EAAGd,SAASK,EAAIU,UAAU,EAAG,GAAI,IACjCC,EAAGhB,SAASK,EAAIU,UAAU,EAAG,GAAI,IACjCE,EAAGjB,SAASK,EAAIU,UAAU,EAAG,GAAI,IACjCG,EAAIZ,GAAuB,IAAZA,EAAoBA,EAAJ,UAG1BC,EAAQM,EAAUM,MAAMN,IAUpBP,EA3CM,SAACA,EAASc,OAEtB,IAAIC,EAAS,IAAKA,GAAU,EAAGA,GAAU,EAC5Cf,aAAYe,IAAYf,GAASe,EAAS,KAAKT,QAAQ,GAAIQ,UAEtDd,EAsCcgB,EAAW,SAACD,EAAQD,UAClCG,QAAMH,IAAiC,IAAvBA,EAAMV,QAAQ,KACjCN,UAAUgB,EAAOC,GACjBG,QAAMJ,GACJD,MAAMC,EAAOC,kBACLD,GAAS,qBAAYC,UA8BxBF,MAAQ,SAACM,EAAKC,EAAOC,EAAMC,OAChCC,EAAML,QAAMC,GAAOA,EAAM,CAAEX,EAAGW,EAAKT,EAAGU,EAAOT,EAAGU,EAAMT,EAAGU,UAC/DC,EAAIX,EAAKW,EAAIX,GAAe,IAAVW,EAAIX,EAAcW,EAAIX,EAAR,iBAEjBW,EAAIf,eAAMe,EAAIb,eAAMa,EAAIZ,eAAMY,EAAIX,uEAxB3B,SAACE,EAAOvB,OACxBiC,EAAO1B,UAAUgB,EAAO,GAAG,SAG/B,IACAzB,eAAemC,EAAKhB,EAAGjB,GACvBF,eAAemC,EAAKd,EAAGnB,GACvBF,eAAemC,EAAKb,EAAGpB,2CA4BD,eAACkC,yDAAQ,GAAIC,yDAAQ,IAAKC,yDAAa,cAC/DD,EAAQE,QAAMF,aAAYA,QAAYT,QAAMS,GAASA,UAE7B,iBAAVD,EACV,CAAEI,qBAAeJ,cAASC,cAASC,IACnCG,QAAML,GACJ,CACEI,WAAYJ,EACTM,QAAO,SAACC,EAAOC,UACdD,EAAME,eAAQD,cAAQP,cAASC,IACxBK,IACN,IACFG,KAAK,OAEV"}