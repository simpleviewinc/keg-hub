{"version":3,"file":"styleInjector-c481fb87.js","sources":["../../../src/constants/ruleOverrides.js","../../../src/styleInjector/injectHelpers.js","../../../src/helpers/noOp.js","../../../src/styleInjector/useStyleTag.js","../../../src/styleInjector/styleInjector.js"],"sourcesContent":["export const ruleOverrides = {\n  // Important rules should include the prefixed version\n  // Because important rules are checked after going through the prefixer\n  // Important rules have `!important` added to them to allow overwriting the style attribute\n  important: [],\n\n  // Filtered rules are not added to the Dom with CSS\n  // They are filtered out and passed on to react-native-web to manage\n  filter: [\n    'aspectRatio',\n    'elevation',\n    'overlayColor',\n    'resizeMode',\n    'tintColor',\n    'backgroundSize',\n    'animationKeyframes',\n    'placeholderTextColor',\n    'pointerEvents',\n    'scrollbarWidth',\n  ],\n}\n","import { addThemeEvent } from '../theme/themeEvent'\nimport { Constants } from '../constants'\nimport { ruleOverrides } from '../constants/ruleOverrides'\nimport {\n  hashString,\n  hasDomAccess,\n  isArr,\n  isStr,\n  exists,\n  omitKeys,\n  pickKeys,\n} from '@keg-hub/jsutils'\n\n/**\n * Cache the current environment\n */\nconst { NODE_ENV } = process.env\nconst isProduction = NODE_ENV === 'production'\nconst domAccess = hasDomAccess()\n\n/**\n * Cache holder to hold the main StyleSheet Dom element\n */\nlet KegStyleSheet\n\n/**\n * Caches selectors already added to the Dom\n */\nconst selectorCache = new Set()\n\n/**\n * Checks if a selector already exists in the selector cache\n * @param {string} selector - selector to check if already exists\n * @param {string} sizeKey - Current size being rendered\n *\n * @return {Boolean} - If the selector has already been cached\n */\nconst selectorExists = selector => selectorCache.has(selector)\n\n/**\n * Gets the cached style sheet, or finds it on the DOM\n * @function\n *\n * @returns {Object} - Keg Style sheet\n */\nconst getKegSheet = () => {\n  KegStyleSheet =\n    KegStyleSheet || document.head.querySelector(Constants.KEG_STYLES_TAG_ID)\n  return KegStyleSheet\n}\n\n/**\n * Filters out styles that require extra help to convert to CSS\n * <br/>In these cases, we let react-native-web handel through the style attribute\n * @function\n * @param {Object} style - Object containing style rules\n * @param {Array} filter - Custom style rules to filter out\n *\n * @returns {Object} - Contains separated objects with filtered styles, non-filtered styles\n */\nexport const filterRules = (style, filter) => {\n  const toFilter = isArr(filter)\n    ? ruleOverrides.filter.concat(filter)\n    : ruleOverrides.filter\n  return {\n    style: omitKeys(style, toFilter),\n    filtered: pickKeys(style, toFilter),\n  }\n}\n\n/**\n * Creates a unique selector based on the passed in className and cssString\n * @function\n * @param {string|Array<string>} className - Original className(s) used as a css selector\n * @param {string} cssString - Css rules for the className in string format\n * @param {string=} filterPrefix - optional prefix to filter by\n *\n * @returns {{hashClass:string, selector:string}} - returns selector string and hashClass string\n */\nexport const getSelector = (className, cssString, filterPrefix) => {\n  // filter by prefix if passed in\n  const filterWithPrefix = cls => {\n    return cls && filterPrefix ? cls.startsWith(filterPrefix) : cls\n  }\n\n  const selector = !exists(className)\n    ? false\n    : isArr(className)\n      ? className.filter(filterWithPrefix).pop()\n      : isStr(className) && className.split(' ').filter(filterWithPrefix)\n        .pop()\n\n  const hashClass = `keg-${hashString(cssString)}`\n  return {\n    hashClass,\n    selector: selector\n      ? `.${selector.trim()}.${hashClass}`.trim()\n      : `.${hashClass}`.trim(),\n  }\n}\n\n/**\n * Adds a css string to the KegStyleSheet\n * @param {string} selector - Css selector to add the style rules to\n * @param {Object} css - Style rules as an object\n * @param {string} css.all - Style rules to be added as a string\n *\n * @returns {Void}\n */\nexport const addStylesToDom = (selector, css) => {\n  // skip if these styles are already inserted\n  if (!domAccess || !css || selectorExists(selector)) return\n\n  // Cache the selector with the size\n  // So next time we can look up if the size changed\n  selectorCache.add(selector)\n  const KegSheet = getKegSheet()\n  // The insertRule method is a lot faster then append method\n  // But it does not allow you to see the styles in the inspector\n  // So we only want to use it when in production\n  // We have to wrap it in @media all selector\n  // This is due to the limitations of insertRule requiring the css to be wrapped\n  isProduction\n    ? KegSheet.sheet.insertRule(`@media all {${css.all}}`)\n    : KegSheet.append(css.all)\n}\n\n/**\n * Removes any keys stored in the selectorCache\n * <br/>Removes all styles applied to the Dom\n * @function\n *\n * @returns {Void}\n */\nconst clearStyleSheet = () => {\n  selectorCache.clear()\n  const KegSheet = getKegSheet()\n  KegSheet.textContent = ''\n}\n\n/**\n * Add an event listener to the Theme Build event\n * Any time the theme rebuilds, we want to reset the styles added to the dom\n */\naddThemeEvent(Constants.BUILD_EVENT, clearStyleSheet)\n\n/**\n * Creates a <style> Element on the dom, is called immediately\n *\n * @returns {Object} - finds or creates style tag with Constants.KEG_STYLES_TAG_ID as the id\n */\n;(() => {\n  if (!domAccess) return\n\n  KegStyleSheet = document.head.querySelector(Constants.KEG_STYLES_TAG_ID)\n\n  if (KegStyleSheet) return KegStyleSheet\n\n  KegStyleSheet = document.createElement('style')\n  KegStyleSheet.id = Constants.KEG_STYLES_TAG_ID\n  document.head.append(KegStyleSheet)\n})()\n","/**\n * Consistent object which can be reused to keep it's identity\n * @object\n */\nexport const noOp = () => {}\nexport const noOpObj = Object.freeze({})\n","import { useMemo } from 'react'\nimport { addStylesToDom, getSelector, filterRules } from './injectHelpers'\nimport { eitherArr, hyphenator, isArr, isObj, flatArr } from '@keg-hub/jsutils'\nimport { useTheme } from '../hooks/useTheme'\nimport {\n  prefixStyles,\n  flattenStyle,\n  createReactDOMStyle,\n  createCompileableStyle,\n} from './reactNativeWeb'\nimport { ruleOverrides } from '../constants/ruleOverrides'\nimport { noOpObj } from '../helpers/noOp'\n\n/**\n * Checks if the rule is enforce and adds !important to it\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nconst checkImportant = (property, value, important) =>\n  important.includes(property) ? `${value} !important` : value\n\n/**\n * Creates a style rules string from a JS object\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const createBlock = (style, config) => {\n  const important = ruleOverrides.important.concat(config?.important)\n  const prefixed = prefixStyles(createReactDOMStyle(style))\n  const cssString = Object.keys(prefixed)\n    .map(property => {\n      const value = checkImportant(property, prefixed[property], important)\n      const prop = hyphenator(property)\n\n      return isArr(value)\n        ? value.map(val => `${prop}:${val}`).join(';')\n        : `${prop}:${value}`\n    })\n    .sort()\n    .join(';')\n\n  return `{${cssString}}`\n}\n\n/**\n * Converts a JS style object into a style rules string\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const convertToCss = (style, config) => {\n  const stlArr = flatArr(eitherArr(style, [style]))\n\n  return stlArr.reduce(\n    (rules, stl) => {\n      if (!isObj(stl)) return rules\n\n      const { style: cleanStyle, filtered } = filterRules(stl, config?.filter)\n      Object.assign(rules.filtered, filtered)\n\n      const flat = flattenStyle(cleanStyle)\n      const compiled = createCompileableStyle(flat)\n      rules.blocks.push(createBlock(compiled, config))\n\n      return rules\n    },\n    { blocks: [], filtered: {} }\n  )\n}\n\n/**\n * Custom hook to convert a JS style object into a valid css string\n * <br/>After converting it, it appends it to the Dom\n * <br/>It also keeps a hash of all appended styles rules to avoid duplication\n * @param {Object} style - Styles rules to be converted and added to the Dom\n * @param {string|Array<string>} className - Css selector(s) of the style fules\n *\n * @returns {Object} - className Css selector of the added style rules\n */\nexport const useStyleTag = (style, className = '', config) => {\n  // Ensure config is an object\n  config = isObj(config) ? config : noOpObj\n\n  const theme = useTheme()\n  const themeSize = theme?.RTMeta?.size\n  const themeKey = theme?.RTMeta?.key\n\n  return useMemo(() => {\n    const { blocks, filtered } = convertToCss(style, config)\n\n    // Create a unique selector based on the className and built blocks\n    const { hashClass, selector } = getSelector(\n      className,\n      blocks.join(''),\n      'keg'\n    )\n\n    // Adds the css selector ( className ) to each block\n    const css = blocks.reduce(\n      (css, block) => {\n        const fullBlock = `${selector}${block}`\n        css.all += fullBlock\n        css.rules.push(fullBlock)\n\n        return css\n      },\n      { all: '', rules: [] }\n    )\n\n    addStylesToDom(selector, css, themeKey)\n    return {\n      css,\n      filteredStyle: filtered,\n      classList: eitherArr(className, [className]).concat([hashClass]),\n    }\n  }, [ style, className, themeSize, themeKey, config ])\n}\n","import React from 'react'\nimport { useStyleTag } from './useStyleTag'\nimport { isStr } from '@keg-hub/jsutils'\n\n/**\n * Helper component that actually calls the useStyleTag hook\n * <br/>Call the useStyleTag hook here to allow calling the hook conditionally\n * <br/>and not break the rules of Hooks\n * @param {Object} props - All props passed to the wrapped Component\n * @param {Object} props.Component - Component being wrapped by the HOC\n * @param {string} props.KegDefClass - Default className of the wrapped Component\n * @param {Object} props.style - Styles to be added to the Dom\n *\n * @returns {string} - className Css selector of the added style rules\n */\nconst BuildWithStyles = React.forwardRef((props, ref) => {\n  const { Component, children, config, className, style, ...buildProps } = props\n  const { className: KegDefClass } = config\n  const { classList, filteredStyle } = useStyleTag(\n    style,\n    className || KegDefClass,\n    config\n  )\n\n  return (\n    <Component\n      {...buildProps}\n      style={filteredStyle}\n      className={isStr(Component) ? classList.join(' ') : classList}\n      ref={ref}\n    >\n      { children }\n    </Component>\n  )\n})\n\n/**\n * Custom Hoc that wraps a component, and extracts the style prop from props\n * <br/>It then appends the style props to the Dom\n * <br/>Component must accept a className prop to work properly\n * @param {Object} Component - React Component to wrap\n * @param {Object} config - Settings for the Hoc\n *\n * @returns {Function} - Anonymous function that wraps the passed in Component\n */\nexport const StyleInjector = (Component, config = {}) => {\n  return React.forwardRef((allProps, ref) => {\n    const { style, ...props } = allProps\n    return !style ? (\n      <Component\n        {...props}\n        style={style}\n        ref={ref}\n      />\n    ) : (\n      <BuildWithStyles\n        {...props}\n        style={style}\n        config={config}\n        Component={Component}\n        ref={ref}\n      />\n    )\n  })\n}\n"],"names":["KegStyleSheet","ruleOverrides","important","filter","domAccess","hasDomAccess","selectorCache","Set","getKegSheet","document","head","querySelector","Constants","KEG_STYLES_TAG_ID","getSelector","className","cssString","filterPrefix","filterWithPrefix","cls","startsWith","selector","exists","isArr","pop","isStr","split","hashClass","hashString","trim","addStylesToDom","css","has","selectorExists","add","sheet","insertRule","all","addThemeEvent","BUILD_EVENT","clear","textContent","createElement","id","append","noOpObj","Object","freeze","createBlock","style","config","concat","prefixed","prefixStyles","createReactDOMStyle","keys","map","property","value","includes","checkImportant","prop","hyphenator","val","join","sort","convertToCss","flatArr","eitherArr","reduce","rules","stl","isObj","toFilter","omitKeys","filtered","pickKeys","filterRules","cleanStyle","assign","flat","flattenStyle","compiled","createCompileableStyle","blocks","push","useStyleTag","theme","useTheme","themeSize","RTMeta","_theme$RTMeta","size","themeKey","_theme$RTMeta2","key","useMemo","block","fullBlock","filteredStyle","classList","BuildWithStyles","React","forwardRef","props","ref","Component","children","buildProps","KegDefClass","StyleInjector","allProps"],"mappings":"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"}