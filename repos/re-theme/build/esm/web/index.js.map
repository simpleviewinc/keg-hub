{"version":3,"file":"index.js","sources":["../../../src/dimensions/dimensions.js","../../../src/dimensions/useDimensions.js","../../../node_modules/prop-types/factoryWithThrowingShims.js","../../../node_modules/prop-types/index.js","../../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../../src/theme/withTheme.js","../../../src/context/reThemeProvider.js","../../../src/hooks/usePointerState.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/useThemeState.js","../../../src/hooks/useThemeHover.js","../../../src/hooks/useThemeActive.js","../../../src/hooks/useThemeFocus.js","../../../src/hooks/useStyle.js"],"sourcesContent":["export { Dimensions } from './webDimensions'\nexport const setRNDimensions = dims => {}\n","/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useState, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ReThemeContext } from './reThemeContext'\nimport { Dimensions } from 'ReDimensions'\nimport { getSize } from '../dimensions/sizeMap'\nimport { buildTheme, getDefaultTheme } from '../theme'\nimport { getCurrentTheme } from '../theme/manageTheme'\nimport { get } from '@keg-hub/jsutils'\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge, platforms } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n\n    // Get the size we should change to\n    const changeToSize = getSize(width)\n\n    // If no size to change to, just return\n    if (!changeToSize) return\n\n    // Get the string version of the size to change to\n    const sizeToBe = changeToSize[0]\n\n    // Get the current theme to check the size\n    const currentTheme = getCurrentTheme()\n    // Get the current size string version\n    const currentSize = get(currentTheme, [ 'RTMeta', 'key' ])\n\n    // Check if the sizes are not equal, and if so update the Dimensions with the new size\n    // Update the state with the updated dimensions data\n    sizeToBe !== currentSize &&\n      setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listeners\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listeners\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  const builtTheme = useMemo(() => {\n    return buildTheme(\n      theme,\n      dimensions.width,\n      dimensions.height,\n      merge && getDefaultTheme(),\n      platforms\n    )\n  }, [ theme, dimensions.width, dimensions.height, merge, platforms ])\n\n  return (\n    <ReThemeContext.Provider value={builtTheme}>\n      { children }\n    </ReThemeContext.Provider>\n  )\n}\n\nReThemeProvider.propTypes = {\n  /**\n  Global defined Application theme\n  */\n  theme: PropTypes.object.isRequired,\n  /**\n  Should merge passed in theme prop with the current theme\n  */\n  merge: PropTypes.bool,\n  /**\n  Custom theme platform to use for the current context\n  */\n  platforms: PropTypes.array,\n  /**\n   Child components to wrap the with ReTheme provider\n  */\n  children: PropTypes.node,\n}\n","import { useRef, useState, useMemo, useCallback, useEffect } from 'react'\nimport { checkCall, hasDomAccess, isFunc, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Tracks if the hover pointer state can be enabled\n * @type boolean\n */\nlet isHoverEnabled = false\n\n/**\n * Adds mouse event listeners to the document for tracking hover state\n * Uses mouse move event to enable when hover is enabled\n * @type function\n *\n * @returns {void}\n */\nconst setDomListeners = () => {\n  /**\n   * This code checks for mouse movement that occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch AND mouse events on low-powered devices\n   */\n  const HOVER_THRESHOLD_MS = 1000\n  let lastTouchTimestamp = 0\n\n  const enableHover = () => {\n    !isHoverEnabled &&\n      Date.now() - lastTouchTimestamp > HOVER_THRESHOLD_MS &&\n      (isHoverEnabled = true)\n  }\n\n  const disableHover = () => {\n    lastTouchTimestamp = Date.now()\n    isHoverEnabled && (isHoverEnabled = false)\n  }\n\n  document.addEventListener('touchstart', disableHover, true)\n  document.addEventListener('touchmove', disableHover, true)\n  document.addEventListener('mousemove', enableHover, true)\n}\n\nhasDomAccess() && setDomListeners()\n\n/**\n * Builds event listeners and state for an element based on the pointerState to track\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n *\n * @return {Object} - Current state of the pointerState being tracked, and event listeners to be attached to the element\n */\nconst useEventCallBacks = ({\n  pointerState,\n  onEvent,\n  offEvent,\n  onName,\n  offName,\n}) => {\n  const [ status, setStatus ] = useState(false)\n\n  const handleOff = useCallback(\n    event => {\n      checkCall(offEvent, event)\n      setStatus(false)\n    },\n    [ status, setStatus, offEvent ]\n  )\n\n  const handleOn = useCallback(\n    event => {\n      // For hover events we need to check if hover is enabled\n      if (pointerState === 'hover' && !isHoverEnabled) return\n\n      checkCall(onEvent, event)\n      setStatus(true)\n\n      // For active events, we need to attach the mouseup listener to the document, so it always gets called on mouse up\n      pointerState === 'active' &&\n        document.addEventListener(offName, handleOff, { once: true })\n    },\n    [ pointerState, status, setStatus, onEvent ]\n  )\n\n  return {\n    [pointerState]: status,\n    [onName]: handleOn,\n    [offName]: handleOff,\n  }\n}\n\n/**\n * Builds all element event listeners to track updates to the mouse state\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track\n *\n * @return {Object} - Contains mouse states, and event listeners functions\n */\nconst useElementEvents = (options = noOpObj, pointerState) => {\n  const { hover = false, onPointerIn, onPointerOut } =\n    pointerState === 'hover'\n      ? useEventCallBacks({\n        pointerState,\n        onName: 'onPointerIn',\n        offName: 'onPointerOut',\n        onEvent: options.onPointerIn,\n        offEvent: options.onPointerOut,\n      })\n      : noOpObj\n\n  const { focus = false, onFocus, onBlur } =\n    pointerState === 'focus'\n      ? useEventCallBacks({\n        pointerState,\n        onName: 'onFocus',\n        offName: 'onBlur',\n        onEvent: options.onFocus,\n        offEvent: options.onBlur,\n      })\n      : noOpObj\n\n  const { active = false, onPointerDown } =\n    pointerState === 'active'\n      ? useEventCallBacks({\n        pointerState,\n        onName: 'onPointerDown',\n        offName: 'mouseup',\n        onEvent: options.onPointerDown,\n        offEvent: options.onMouseUp,\n      })\n      : noOpObj\n\n  return useMemo(() => {\n    // Get the events to be returned based on the pointerState\n    // Use the Dom event names, NOT the react event names,\n    // because these events are directly added to the element through the Dom API\n    const events =\n      pointerState === 'hover'\n        ? { pointerover: onPointerIn, pointerout: onPointerOut }\n        : pointerState === 'focus'\n          ? { focus: onFocus, blur: onBlur }\n          : { pointerdown: onPointerDown }\n\n    return {\n      active,\n      focus,\n      hover,\n      events,\n    }\n  }, [\n    active,\n    focus,\n    hover,\n    onBlur,\n    onFocus,\n    onPointerDown,\n    onPointerIn,\n    onPointerOut,\n    options.ref,\n    pointerState,\n  ])\n}\n\n/**\n * Loops over the passed in events and adds or removes them from the passed in element\n * @type function\n * @param {Dom Element} element - Element to attach mouse events to\n * @param {Object} events - Dom events to attach to the element\n * @param {string} method - Name of the method used to update events on the element\n *\n * @return {void}\n */\nconst loopElementEvents = (element, events, method) => {\n  Object.entries(events).map(([ eventName, action ]) =>\n    element[method](eventName, action)\n  )\n}\n\n/**\n * Creates a callback ref to get access to the Element from a ref\n * @type function\n * @param {Object} passedRef - Custom react ref to allow reusing a Ref on a component\n * @param {Object} events - Dom events to attach to the element obtained from the ref\n *\n * @return {function} - callbackRef to apply to the element to be tracked\n */\nconst createCBRef = (passedRef, events) => {\n  const elementRef = useRef(null)\n\n  /**\n   * Creates a ref as a function, to be passed as a prop to the element being tracked\n   * <br/>Also checks for a custom ref and updates it if needed\n   */\n  const callbackRef = useCallback(\n    element => {\n      elementRef.current = element\n\n      isFunc(passedRef)\n        ? passedRef(element)\n        : passedRef && (passedRef.current = element)\n    },\n    [ elementRef.current, passedRef, passedRef.current ]\n  )\n\n  /**\n   * Hooks that Ensure the event listeners are added to the dom element\n   * <br/>Also removes them when the element is removed\n   */\n  useEffect(() => {\n    elementRef.current &&\n      loopElementEvents(elementRef.current, events, 'addEventListener')\n\n    return () => {\n      elementRef.current &&\n        loopElementEvents(elementRef.current, events, 'removeEventListener')\n    }\n  }, [ elementRef.current, events ])\n\n  return callbackRef\n}\n\n/**\n * Gets the current state of the pointer / mouse\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track. Must be one of hover, active, or focus\n *\n * @return {Object} - States of the pointed relative to the passed in pointerState\n */\nexport const usePointerState = (options = noOpObj, pointerState) => {\n  const { events, hover, active, focus } = useElementEvents(\n    options,\n    pointerState\n  )\n\n  return {\n    hover,\n    focus,\n    active,\n    events,\n    ref: createCBRef(options.ref, events),\n  }\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport {\n  checkCall,\n  isObj,\n  isEmptyColl,\n  noPropObj,\n  noPropArr,\n} from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} [cbDependencies=[]] - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n *\n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (\n  stylesCb,\n  cbDependencies = noPropArr,\n  customStyles\n) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies)\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(\n    () => checkCall(cb, theme, styles, ...cbDependencies) || noPropObj,\n    [ theme, cb, styles ]\n  )\n}\n","/** @module hooks */\n\nimport { useRef, useMemo } from 'react'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { usePointerState } from './usePointerState'\n\n/**\n * Returns the offValue or onValue based on the passed in compareState\n * @param {*} offValue - return when compareState is false\n * @param {*} onValue - return when compareState is true\n * @param {boolean} noMerge - Should the offValue and onValue be merged\n * @param {boolean} compareState - Current state to check\n *\n * @return {*} offValue, onValue or merged values based on the compareState\n */\nconst useCompareState = (offValue, onValue, noMerge, compareState) => {\n  return useMemo(() => {\n    return compareState\n      ? noMerge\n        ? onValue\n        : deepMerge(offValue, onValue)\n      : offValue\n  }, [ offValue, onValue, noMerge, compareState ])\n}\n\n/**\n * Wrapper helper to build hooks for tracking mouse state\n * @param {string} pointerState - State the should be tracked. Must be one of hover, active, or focus\n *\n * @returns {function} - React hook function to track the state\n */\nexport const useThemeState = pointerState => {\n  /**\n   * Tracks the state of the mouse\n   * @param {*} offValue - Value to return when the state is off\n   * @param {*} onValue - Value to return when the state is on\n   * @param {Object} options - Settings to manage the hook\n   * @param {Object|function} options.ref - Custom react ref to allow reusing a Ref on a component\n   * @param {Object|function} options.noMerge - The offValue and onValue should NOT be merged when the internal pointer state is true\n   *                                            Defaults to true, which matches the default CSS spec of hover / active / focus states\n   *\n   * @returns {Array} - Ref and styles to be applied to the element\n   */\n  return (offValue, onValue, options = {}) => {\n    const defaultRef = useRef(null)\n    const currentState = usePointerState(\n      {\n        ...options,\n        ref: options.ref || defaultRef,\n      },\n      pointerState\n    )\n\n    const pointerRef = currentState.ref\n    const compareState = currentState[pointerState]\n    const themeStyles = useCompareState(\n      offValue,\n      onValue,\n      Boolean(options.noMerge),\n      compareState\n    )\n\n    return [ pointerRef, themeStyles ]\n  }\n}\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeHover hook based on the 'pointerover' and 'pointerout' events\n */\nexport const useThemeHover = useThemeState('hover')\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeActive hook based on the 'mousedown' and 'mouseup' events\n */\nexport const useThemeActive = useThemeState('active')\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeFocus hook based on the 'focus' and 'blur' events\n */\nexport const useThemeFocus = useThemeState('focus')\n","/** @module hooks */\n\nimport { useMemo } from 'react'\nimport { useTheme } from './useTheme'\nimport { noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Merges styles defined by styleArgs into a memoized style object\n * @param  {...(string | Object)} styleArgs - any number of strings or style objects. Strings are expected to be theme paths, which will be used to get the associated theme object for that path.\n * @returns {Object} - result of merging style objects\n * @example\n * const textStyles = useStyle('todos.text', textStylesObject)\n * const myStyles = useStyle(\n *  'settings.button',\n *  { main: { margin: 5 }},\n *  inputStyles,\n *  'someOtherPath.button'\n * )\n */\nexport const useStyle = (...styleArgs) => {\n  const theme = useTheme()\n  return useMemo(() => theme.get(...styleArgs) || noPropObj, [\n    theme,\n    ...styleArgs,\n  ])\n}\n"],"names":["setRNDimensions","dims","useDimensions","useState","Dimensions","get","dimensions","setDimensions","onChange","win","window","width","height","scale","fontScale","useEffect","addEventListener","shouldUnmount","removeEventListener","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$0","withTheme","Component","React","ReThemeContext","Consumer","value","theme","ReThemeProvider","children","doMerge","merge","platforms","Boolean","changeToSize","getSize","sizeToBe","currentTheme","getCurrentTheme","builtTheme","useMemo","buildTheme","getDefaultTheme","Provider","propTypes","lastTouchTimestamp","disableHover","isHoverEnabled","hasDomAccess","Date","now","document","useEventCallBacks","pointerState","onEvent","offEvent","onName","offName","status","setStatus","handleOff","useCallback","event","checkCall","handleOn","once","useElementEvents","options","noOpObj","onPointerIn","onPointerOut","hover","onFocus","onBlur","focus","onPointerDown","onMouseUp","active","events","pointerover","pointerout","blur","pointerdown","ref","loopElementEvents","method","Object","entries","map","eventName","action","createCBRef","passedRef","elementRef","useRef","callbackRef","current","isFunc","usePointerState","useStylesCallback","stylesCb","cbDependencies","noPropArr","customStyles","cb","useTheme","styles","isObj","isEmptyColl","noPropObj","useCompareState","offValue","onValue","noMerge","compareState","deepMerge","useThemeState","defaultRef","currentState","pointerRef","themeStyles","useThemeHover","useThemeActive","useThemeFocus","useStyle","styleArgs"],"mappings":"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"}