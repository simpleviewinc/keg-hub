{"version":3,"file":"index.js","sources":["../../../src/hooks/usePointerState.js","../../../src/dimensions/dimensions.js","../../../src/dimensions/useDimensions.js","../../../src/theme/withTheme.js","../../../src/context/reThemeProvider.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/useThemeState.js","../../../src/hooks/useThemeHover.js","../../../src/hooks/useThemeActive.js","../../../src/hooks/useThemeFocus.js","../../../src/hooks/useStyle.js"],"sourcesContent":["import { useRef, useState, useMemo, useCallback, useEffect } from \"react\"\nimport { checkCall, isFunc, noOpObj } from '@keg-hub/jsutils'\nimport { hasDomAccess } from '../helpers/hasDomAccess'\n\n/**\n * Tracks if the hover pointer state can be enabled \n * @type boolean\n */\nlet isHoverEnabled = false\n\n/**\n * Adds mouse event listeners to the document for tracking hover state\n * Uses mouse move event to enable when hover is enabled\n * @type function\n *\n * @returns {void}\n */\nconst setDomListeners = () => {\n  /**\n   * This code checks for mouse movement that occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch AND mouse events on low-powered devices\n   */\n  const HOVER_THRESHOLD_MS = 1000\n  let lastTouchTimestamp = 0\n\n  const enableHover = () => {\n    !isHoverEnabled &&\n      (Date.now() - lastTouchTimestamp) > HOVER_THRESHOLD_MS &&\n      (isHoverEnabled = true)\n  }\n\n  const disableHover = () => {\n    lastTouchTimestamp = Date.now()\n    isHoverEnabled && (isHoverEnabled = false)\n  }\n\n  document.addEventListener(\"touchstart\", disableHover, true)\n  document.addEventListener(\"touchmove\", disableHover, true)\n  document.addEventListener(\"mousemove\", enableHover, true)\n}\n\nhasDomAccess() && setDomListeners()\n\n/**\n * Builds event listeners and state for an element based on the pointerState to track\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n *\n * @return {Object} - Current state of the pointerState being tracked, and event listeners to be attached to the element\n */\nconst useEventCallBacks = ({ pointerState, onEvent, offEvent, onName, offName }) => {\n  const [status, setStatus] = useState(false)\n\n  const handleOff = useCallback(event => {\n    checkCall(offEvent, event)\n    setStatus(false)\n  }, [status, setStatus, offEvent])\n\n  const handleOn = useCallback(event => {\n    // For hover events we need to check if hover is enabled\n    if(pointerState === 'hover' && !isHoverEnabled) return\n\n    checkCall(onEvent, event)\n    setStatus(true)\n\n    // For active events, we need to attach the mouseup listener to the document, so it always gets called on mouse up\n    pointerState === 'active' && \n      document.addEventListener(offName, handleOff, { once: true })\n\n  }, [pointerState, status, setStatus, onEvent])\n\n  return {\n    [pointerState]: status,\n    [onName]: handleOn,\n    [offName]: handleOff,\n  }\n}\n\n/**\n * Builds all element event listeners to track updates to the mouse state\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track\n *\n * @return {Object} - Contains mouse states, and event listeners functions\n */\nconst useElementEvents = (options=noOpObj, pointerState) => {\n\n  const {\n    hover=false,\n    onPointerIn,\n    onPointerOut\n  } = pointerState === 'hover'\n    ? useEventCallBacks({\n        pointerState,\n        onName: 'onPointerIn',\n        offName: 'onPointerOut',\n        onEvent: options.onPointerIn,\n        offEvent: options.onPointerOut,\n      })\n    : noOpObj\n\n  const {\n    focus=false,\n    onFocus,\n    onBlur\n  } = pointerState === 'focus'\n    ? useEventCallBacks({\n        pointerState,\n        onName: 'onFocus',\n        offName: 'onBlur',\n        onEvent: options.onFocus,\n        offEvent: options.onBlur,\n      })\n    : noOpObj\n\n  const {\n    active=false,\n    onPointerDown,\n  } = pointerState === 'active'\n    ? useEventCallBacks({\n        pointerState,\n        onName: 'onPointerDown',\n        offName: 'mouseup',\n        onEvent: options.onPointerDown,\n        offEvent: options.onMouseUp,\n      })\n    : noOpObj\n\n  return useMemo(() => {\n    // Get the events to be returned based on the pointerState\n    // Use the Dom event names, NOT the react event names,\n    // because these events are directly added to the element through the Dom API\n    const events = pointerState === 'hover'\n      ? { pointerover: onPointerIn, pointerout: onPointerOut }\n      : pointerState === 'focus'\n        ? { focus: onFocus, blur: onBlur }\n        : { pointerdown: onPointerDown }\n\n    return {\n      active,\n      focus,\n      hover,\n      events,\n    }\n  }, [\n    active,\n    focus,\n    hover,\n    onBlur,\n    onFocus,\n    onPointerDown,\n    onPointerIn,\n    onPointerOut,\n    options.ref,\n    pointerState,\n  ])\n}\n\n/**\n * Loops over the passed in events and adds or removes them from the passed in element\n * @type function\n * @param {Dom Element} element - Element to attach mouse events to\n * @param {Object} events - Dom events to attach to the element\n * @param {string} method - Name of the method used to update events on the element\n * \n * @return {void}\n */\nconst loopElementEvents = (element, events, method) => {\n  Object.entries(events)\n    .map(([ eventName, action ]) => element[method](eventName, action))\n}\n\n/**\n * Creates a callback ref to get access to the Element from a ref\n * @type function\n * @param {Object} passedRef - Custom react ref to allow reusing a Ref on a component\n * @param {Object} events - Dom events to attach to the element obtained from the ref\n *\n * @return {function} - callbackRef to apply to the element to be tracked\n */\nconst createCBRef = (passedRef, events) => {\n\n  const elementRef = useRef(null)\n\n  /**\n   * Creates a ref as a function, to be passed as a prop to the element being tracked\n   * <br/>Also checks for a custom ref and updates it if needed\n   */\n  const callbackRef = useCallback(element => {\n    elementRef.current = element\n\n    isFunc(passedRef)\n      ? passedRef(element)\n      : passedRef && (passedRef.current = element)\n\n  }, [elementRef.current, passedRef, passedRef.current])\n\n  /**\n   * Hooks that Ensure the event listeners are added to the dom element\n   * <br/>Also removes them when the element is removed\n   */\n  useEffect(() => {\n    elementRef.current &&\n      loopElementEvents(elementRef.current, events, 'addEventListener')\n\n    return () => {\n      elementRef.current &&\n        loopElementEvents(elementRef.current, events, 'removeEventListener')\n    }\n  }, [elementRef.current, events])\n\n  return callbackRef\n}\n\n/**\n * Gets the current state of the pointer / mouse\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track. Must be one of hover, active, or focus\n * \n * @return {Object} - States of the pointed relative to the passed in pointerState\n */\nexport const usePointerState = (options=noOpObj, pointerState) => {\n  const { events, hover, active, focus } = useElementEvents(options, pointerState)\n\n  return {\n    hover,\n    focus,\n    active,\n    events,\n    ref: createCBRef(options.ref, events),\n  }\n}\n","export { Dimensions } from './webDimensions'\nexport const setRNDimensions = dims => {}\n\n\n","/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useState, useMemo } from 'react'\nimport { ReThemeContext } from './reThemeContext'\nimport { Dimensions } from 'ReDimensions'\nimport { getSize } from '../dimensions/sizeMap'\nimport { buildTheme, getDefaultTheme } from '../theme'\nimport { getCurrentTheme } from '../theme/manageTheme'\nimport { get } from '@keg-hub/jsutils'\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge, platforms } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n\n    // Get the size we should change to\n    const changeToSize = getSize(width)\n\n    // If no size to change to, just return\n    if (!changeToSize) return\n\n    // Get the string version of the size to change to\n    const sizeToBe = changeToSize[0]\n\n    // Get the current theme to check the size\n    const currentTheme = getCurrentTheme()\n    // Get the current size string version\n    const currentSize = get(currentTheme, [ 'RTMeta', 'key' ])\n\n    // Check if the sizes are not equal, and if so update the Dimensions with the new size\n    // Update the state with the updated dimensions data\n    sizeToBe !== currentSize &&\n      setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listeners\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listeners\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  const builtTheme = useMemo(() => {\n    return buildTheme(\n      theme,\n      dimensions.width,\n      dimensions.height,\n      merge && getDefaultTheme(),\n      platforms\n    ) \n  }, [\n    theme,\n    dimensions.width,\n    dimensions.height,\n    merge,\n    platforms,\n  ])\n\n  return (\n    <ReThemeContext.Provider\n      value={builtTheme}\n    >\n      { children }\n    </ReThemeContext.Provider>\n  )\n\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport { checkCall, isObj, isEmptyColl } from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} cbDependencies - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n * \n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (stylesCb, cbDependencies, customStyles) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies || [])\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(() => checkCall(cb, theme, styles, ...cbDependencies) || {}, [ theme, cb, styles ])\n}\n","/** @module hooks */\n\nimport { useRef, useMemo } from 'react'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { usePointerState } from './usePointerState'\n\n/**\n * Returns the offValue or onValue based on the passed in compareState\n * @param {*} offValue - return when compareState is false\n * @param {*} onValue - return when compareState is true\n * @param {boolean} noMerge - Should the offValue and onValue be merged\n * @param {boolean} compareState - Current state to check\n * \n * @return {*} offValue, onValue or merged values based on the compareState\n */\nconst useCompareState = (offValue, onValue, noMerge, compareState) => {\n  return useMemo(() => {\n    return compareState\n      ? noMerge ? onValue : deepMerge(offValue, onValue)\n      : offValue\n\n  }, [ offValue, onValue, noMerge, compareState ])\n}\n\n/**\n * Wrapper helper to build hooks for tracking mouse state\n * @param {string} pointerState - State the should be tracked. Must be one of hover, active, or focus\n *\n * @returns {function} - React hook function to track the state\n */\nexport const useThemeState = pointerState => {\n  /**\n   * Tracks the state of the mouse\n   * @param {*} offValue - Value to return when the state is off\n   * @param {*} onValue - Value to return when the state is on\n   * @param {Object} options - Settings to manage the hook\n   * @param {Object|function} options.ref - Custom react ref to allow reusing a Ref on a component\n   * @param {Object|function} options.noMerge - The offValue and onValue should NOT be merged when the internal pointer state is true\n   *                                            Defaults to true, which matches the default CSS spec of hover / active / focus states\n   *\n   * @returns {Array} - Ref and styles to be applied to the element\n   */\n  return (offValue, onValue, options={}) => {\n    const defaultRef = useRef(null)\n    const currentState = usePointerState({\n      ...options,\n      ref: options.ref || defaultRef,\n    }, pointerState)\n\n    const pointerRef = currentState.ref\n    const compareState = currentState[pointerState]\n    const themeStyles = useCompareState(\n      offValue,\n      onValue,\n      Boolean(options.noMerge),\n      compareState\n    )\n\n    return [pointerRef, themeStyles]\n  }\n}","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n\n/**\n * Creates an useThemeHover hook based on the 'pointerover' and 'pointerout' events\n */\nexport const useThemeHover = useThemeState('hover')\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeActive hook based on the 'mousedown' and 'mouseup' events\n */\nexport const useThemeActive = useThemeState('active')","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeFocus hook based on the 'focus' and 'blur' events\n */\nexport const useThemeFocus = useThemeState('focus')\n","/** @module hooks */\n\nimport { useMemo } from 'react'\nimport { useTheme } from './useTheme'\nimport { noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Merges styles defined by styleArgs into a memoized style object\n * @param  {...(string | Object)} styleArgs - any number of strings or style objects. Strings are expected to be theme paths, which will be used to get the associated theme object for that path.\n * @returns {Object} - result of merging style objects\n * @example\n * const textStyles = useStyle('todos.text', textStylesObject)\n * const myStyles = useStyle(\n *  'settings.button',\n *  { main: { margin: 5 }},\n *  inputStyles,\n *  'someOtherPath.button'\n * )\n */\nexport const useStyle = (...styleArgs) => {\n  const theme = useTheme()\n  return useMemo(() => theme.get(...styleArgs) || noPropObj, [\n    theme,\n    ...styleArgs,\n  ])\n}\n"],"names":["lastTouchTimestamp","disableHover","setRNDimensions","dims","useDimensions","useState","Dimensions","get","dimensions","setDimensions","onChange","win","window","width","height","scale","fontScale","useEffect","addEventListener","shouldUnmount","removeEventListener","withTheme","Component","props","React","ReThemeContext","Consumer","value","theme","ReThemeProvider","children","doMerge","merge","platforms","Boolean","changeToSize","getSize","sizeToBe","currentTheme","getCurrentTheme","builtTheme","useMemo","buildTheme","getDefaultTheme","Provider","isHoverEnabled","hasDomAccess","Date","now","document","useEventCallBacks","pointerState","onEvent","offEvent","onName","offName","status","setStatus","handleOff","useCallback","event","checkCall","handleOn","once","useElementEvents","options","noOpObj","onPointerIn","onPointerOut","hover","onFocus","onBlur","focus","onPointerDown","onMouseUp","active","events","pointerover","pointerout","blur","pointerdown","ref","loopElementEvents","element","method","Object","entries","map","eventName","action","createCBRef","passedRef","elementRef","useRef","callbackRef","current","isFunc","usePointerState","useStylesCallback","stylesCb","cbDependencies","customStyles","cb","styles","isObj","isEmptyColl","useTheme","useCompareState","offValue","onValue","noMerge","compareState","deepMerge","useThemeState","defaultRef","currentState","pointerRef","themeStyles","useThemeHover","useThemeActive","useThemeFocus","useStyle","styleArgs","noPropObj"],"mappings":"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"}