{"version":3,"file":"headContext-19a2409a.js","sources":["../../../src/constants/constants.js","../../../src/dimensions/dimensions.js","../../../src/theme/themeEvent.js","../../../src/dimensions/sizeMap.js","../../../src/context/platform.js","../../../src/theme/restructureTheme.js","../../../src/theme/manageTheme.js","../../../src/helpers/getTheme.js","../../../src/helpers/joinTheme.js","../../../src/theme/buildTheme.js","../../../src/theme/default.js","../../../src/context/reThemeContext.js","../../../src/context/reThemeProvider.js","../../../src/head/headContext.js"],"sourcesContent":["import { deepFreeze } from '@keg-hub/jsutils'\n\nexport const Constants = deepFreeze({\n  BUILD_EVENT: 'build',\n  CHANGE_EVENT: 'change',\n  RESIZE_EVENT: 'resize',\n  ADD_EVENT: 'addEventListener',\n  REMOVE_EVENT: 'removeEventListener',\n  NO_CACHE: '__$$RE_NO_CACHE__',\n  PLATFORM: {\n    NATIVE: '$native',\n    WEB: '$web',\n    ALL: '$all',\n  },\n  CSS_UNITS: [\n    '%',\n    'cm',\n    'ch',\n    'em',\n    'rem',\n    'ex',\n    'in',\n    'mm',\n    'pc',\n    'pt',\n    'px',\n    'vw',\n    'vh',\n    'vmin',\n    'vmax',\n  ],\n})\n","let RNDimensions\n\nconst checkDimensions = callBack => {\n  return (...props) => {\n    return RNDimensions\n      ? callBack(...props)\n      : console.error(\n        `[ ReTheme ERROR ] - Missing Dimensions`,\n        `\\n   - You must initialize 'Dimensions' before using the 'ReThemeProvider'`,\n        `\\n   - Do this by calling 'setRNDimensions(Dimensions)'`,\n        `\\n   - The first argument must be the 'Dimensions' export of 'react-native'`,\n        `\\n   - Or an Object with a matching API`\n      )\n  }\n}\n\nexport const setRNDimensions = dims => (RNDimensions = dims)\n\nexport const Dimensions = {\n  get: checkDimensions((...params) => {\n    return RNDimensions ? RNDimensions.get(...params) : { width: 0, height: 0 }\n  }),\n  set: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.set(...params)\n  }),\n  update: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.update(...params)\n  }),\n  addEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.addEventListener(...params)\n  }),\n  removeEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.removeEventListener(...params)\n  }),\n}\n","/** @module theme */\n'use strict'\n\nimport { isArr, isFunc, isNum } from '@keg-hub/jsutils'\n\nconst listeners = {}\n\n/**\n * Add a function to an event type\n * <br/> Returns an index which can be used to remove the listener when needed\n * @param {string} event - Names of event to add the listener to\n * @param {function} listener - Listener function to add\n *\n * @returns {number} - Index of the listener in the events array cache\n */\nconst addThemeEvent = (event, listener) => {\n  // Ensure event and listener are passed in correctly\n  if (!event || !isFunc(listener)) return\n\n  // Create the new event event\n  listeners[event] = listeners[event] || []\n\n  // Add the listener to the event event\n  listeners[event].push(listener)\n\n  // Return the index of the added listener\n  return listeners[event].length - 1\n}\n\n/**\n * Remove a registered event listener\n * @param {string} event - Names of event to remove listeners for\n * @param {function} removeListener - Listener function to remove\n *\n * @returns {void}\n */\nconst removeThemeEvent = (event, removeListener) => {\n  // Ensure the proper params are passed in\n  if (!event || !listeners[event] || (!removeListener && removeListener !== 0))\n    return\n\n  // If an index is passed in, use that to remove the listener function\n  isNum(removeListener)\n    ? // Use splice to remove the listener at the correct index\n      listeners[event].splice(removeListener, 1)\n    : // Otherwise ensure the listener and events exists, then filter out the listener\n    isFunc(removeListener) &&\n      isArr(listeners[event]) &&\n      (listeners[event] = listeners[event].filter(\n        listener => listener !== removeListener\n      ))\n}\n\n/**\n * Calls all functions registered to the passed in event name\n * @param {*} event - Event to call listeners for\n * @param {*} params - params to pass to the registered functions\n *\n * @returns {void}\n */\nconst fireThemeEvent = (event, ...params) => {\n  isArr(listeners[event]) &&\n    listeners[event].forEach(listener => listener(...params))\n}\n\n/**\n * Clears registered listeners from the listeners object\n * If event is passed, will only clear listeners for that event\n * @param {string=} event - Name of the event to clear\n *\n * @returns {void}\n */\n// const clearThemeEvents = event => {\n//   event && listeners[event] ? (listeners[event] = []) : (listeners = {})\n// }\n\nexport { addThemeEvent, fireThemeEvent, removeThemeEvent }\n","/** @module dimensions */\n'use strict'\n\nimport {\n  mapObj,\n  isObj,\n  toNum,\n  isNum,\n  softFalsy,\n  logData,\n} from '@keg-hub/jsutils'\n\n/**\n * Default sizes for a screen width\n * <br/> Can be overwritten with setSizes helper\n * @object\n */\nconst sizeMap = {\n  /**\n   * Name of the breakpoint\n   * Number for each entry defines the breakpoint\n   *  > The Breakpoint is the screen size where the entries becomes active\n   */\n  entries: [\n    [ '$xsmall', 1 ],\n    [ '$small', 320 ],\n    [ '$medium', 768 ],\n    [ '$large', 1024 ],\n    [ '$xlarge', 1366 ],\n  ],\n  hash: {},\n  indexes: {},\n}\n\n/**\n * Builds an index of the entry locations in the sizeMap entries\n * <br/>Builds the key value hash of the entries\n * <br/>Builds the keys array of the entries\n * @function\n *\n * @returns {void}\n */\nconst buildSizeMapParts = () => {\n  sizeMap.indexes = sizeMap.entries.reduce((indexes, entry, index) => {\n    // Add the entry value with the index\n    indexes[entry[0]] = index\n\n    // Add the index with entry value\n    indexes[index] = entry[0]\n\n    // Convert the sizeMap.entries into an object of key value pairs\n    sizeMap.hash[entry[0]] = entry[1]\n\n    return indexes\n  }, {})\n}\n\n/**\n * Updates the sizeMap.entries with custom values\n * <br/>Keys must already exist in the default sizeMap.indexes\n * <br/>Allowed keys are => xsmall | small | medium | large | xlarge\n * @function\n * @param {Object} dims - key value pair of custom sizeMap.entries\n *\n * @returns {Object} - Updated sizeMap object\n */\nexport const setSizes = dims => {\n  if (!isObj(dims))\n    return logData(\n      `setDimensions method requires an argument of type 'Object'.\\nReceived: `,\n      dims,\n      'error'\n    )\n\n  mapObj(dims, (key, value) => {\n    // Get the key index from the sizeMap\n    const keyIndex = sizeMap.indexes[key]\n\n    if (!softFalsy(keyIndex))\n      return logData(\n        `Invalid ${key} for theme size! Allowed keys are xsmall | small | medium | large | xlarge`,\n        'warn'\n      )\n\n    // Convert the value to an integer, just a helper incase value is a string\n    const newSize = toNum(dims[key])\n\n    // Ensure key is a valid key in the sizeMap indexes and the new size is a valid number\n    // Also ensure the entry exists based on the keyIndex\n    //  * This should never happen, but just incase\n    if (!newSize || !sizeMap.entries[keyIndex])\n      return logData(\n        `Invalid size entry. Size must be a number and the size entry must exist!`,\n        `Size: ${newSize}`,\n        `Entry: ${sizeMap.entries[keyIndex]}`,\n        'warn'\n      )\n\n    // Use the keyIndex to find the entry\n    // Set the value to be an entry with key and new size\n    sizeMap.entries[keyIndex] = [ key, newSize ]\n  })\n\n  // Rebuild the sizeMap parts after updating the dimensions\n  buildSizeMapParts()\n\n  return sizeMap\n}\n\n/**\n * Helper to get the a size from the sizeMap based on the passed in width\n * @function\n * @param {string|number} width - number to find the size from\n *\n * @returns\n */\nexport const getSize = width => {\n  // Ensure width is a number that can be compared\n  const checkWidth = (isNum(width) && width) || toNum(width)\n\n  const name = sizeMap.entries.reduce((updateSize, [ key, value ]) => {\n    checkWidth >= value\n      ? // If it is check if there is an updateSize already sent\n        updateSize\n          ? // If an update size exists, then check if it's value is less then value\n            value > sizeMap.hash[updateSize] && (updateSize = key)\n          : // Otherwise just update the size\n            (updateSize = key)\n      : null\n\n    return updateSize\n\n    // Default to xsmall size\n  }, '$xsmall')\n\n  return [ name, sizeMap.hash[name] ]\n}\n\n/**\n * Get an array of all sizes to be merged together\n * @function\n * @param {string} key - Name of the size\n *\n * @returns {Array} - Array of size key names\n */\nexport const getMergeSizes = key => {\n  // Add 1 because slice does not include the last item of the range\n  return sizeMap.entries\n    .slice(0, sizeMap.indexes[key] + 1)\n    .map(([ name, size ]) => name)\n}\n\n// Build the default sizeMap parts\nbuildSizeMapParts()\n\n/**\n * Get the sizeMap object\n * @function\n *\n * @returns {Object} - built sizeMap object\n */\nexport const getSizeMap = () => sizeMap\n","import { isObj } from '@keg-hub/jsutils'\n\nconst webDefPlatform = {\n  OS: 'web',\n  select: obj => isObj(obj) && obj.web,\n  Version: 'ReTheme',\n}\n\nlet RNPlatform\nconst getRNPlatform = () => {\n  return RNPlatform || webDefPlatform\n}\n\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","/** @module theme */\n'use strict'\n\nimport { getSizeMap } from '../dimensions'\nimport { Constants } from '../constants'\nimport { getRNPlatform } from '../context/platform'\nimport {\n  isObj,\n  deepMerge,\n  reduceObj,\n  isEmpty,\n  unset,\n  get,\n} from '@keg-hub/jsutils'\n\n// Default platforms to use when restructuring the theme\n// Use array, so we don't lose the order\nconst getDefaultPlatforms = () => {\n  const Platform = getRNPlatform()\n  // Rules for the OS platform ( web || ios || android )\n  const stylePlatforms = ['$' + get(Platform, 'OS')]\n\n  // If it's not a web platform, then add the $native platform\n  if (get(Platform, 'OS') !== 'web') stylePlatforms.push('$native')\n\n  // Rules for all platforms and os's\n  return stylePlatforms.concat([Constants.PLATFORM.ALL])\n}\n\n/**\n * Joins the passed in user platform with the default platforms array\n * @param {Object} usrPlatforms - use defined platforms to use when building the theme\n *\n * @returns {Array} - Contains platforms to use when building the theme\n */\nconst buildPlatforms = usrPlatforms => {\n  const platsToUse = Object.keys(usrPlatforms).filter(key => usrPlatforms[key])\n\n  return getDefaultPlatforms().reduce((platforms, plat) => {\n    usrPlatforms[plat] !== false &&\n      platforms.indexOf(plat) === -1 &&\n      platforms.unshift(plat)\n\n    return platforms\n  }, platsToUse)\n}\n\n/**\n * Searches the theme object for keys that match the passed in size\n * <br/> Maps any found size key objects to the sizedTheme object\n * @function\n * @param {Object} theme - Contains theme style rules\n * @param {Object} sizedTheme - Holds the theme styles for the current size\n * @param {string} size - Current size to search the theme for\n *\n * @returns {Object} theme with the sizes moved to the root level\n */\nconst buildSizedThemes = (theme, sizedTheme, size) => {\n  return reduceObj(\n    theme,\n    (name, value, sizedTheme) => {\n      // If value is not an object, just return the sizedTheme\n      if (!isObj(value)) return sizedTheme\n\n      // If we find the size in the theme, join it with the current sizedTheme\n      if (name === size) {\n        // Merge the current sizedTheme, with the value for this size\n        const mergedSize = deepMerge(sizedTheme, value)\n\n        // Remove the size from the theme\n        // Because it gets moved to the size theme section\n        unset(theme, [size])\n\n        // Return the merged size\n        return mergedSize\n      }\n\n      // Call buildSizedThemes for the values object to look for  sizes in child objects\n      const subSized = buildSizedThemes(value, sizedTheme[name] || {}, size)\n\n      // If the subSized contains keys, then it has size data\n      // So set it to the name for this size\n      if (!isEmpty(subSized)) sizedTheme[name] = subSized\n\n      // Return the updated sized theme\n      return sizedTheme\n    },\n    sizedTheme\n  )\n}\n\n/**\n * Merges styles of any that exist within the platforms object and the theme\n * <br/> If no platforms exists, just return the theme\n * @function\n * @param {Object} theme - Current theme object that holds the style rules\n * @param {boolean} platforms - Platforms to use when building the theme\n *\n * @returns - Merged platform theme rules, or the passed in theme if no rules exist\n */\nconst mergePlatformOS = (theme, platforms) => {\n  // Loop the platforms and check if they are allowed and the platform exist on theme\n  // If is a valid platform add to the toMerge array\n  const toMerge = platforms.reduce((toMerge, plat) => {\n    theme[plat] && toMerge.push(theme[plat])\n\n    return toMerge\n  }, [])\n\n  // If any of the platform theme object exist, then merge them together\n  // Otherwise just return the passed in theme object\n  return toMerge.length ? deepMerge(...toMerge) : theme\n}\n\nconst updatePlatformTheme = (platforms, Platform, themeData) => {\n  // If the themeData is not an object, then just return it\n  // Because we've hit the rules for this tree in the theme\n  if(!isObj(themeData)) return themeData\n\n  // Extract the class && className\n  const { $class, $className, ...cleanTheme } = themeData\n\n  const mergedPlatform = getPlatformTheme(\n    mergePlatformOS(cleanTheme, platforms),\n    platforms,\n    Platform\n  )\n\n  const className = $className || $class\n  className && (mergedPlatform.$class = className)\n\n  return mergedPlatform\n  \n}\n\n/**\n * Traverse through the theme to find any keys matching the current platform\n * <br/> Once a platform key is found, any sub-keys of that object are not searched\n * @function\n * @example:\n * # If platform is web\n * const theme = { font: { web: { size: 12, native: {} }, native: { size: 10 } } }\n * const platformTheme = getPlatformTheme(theme)\n * # returns { font: { size: 12, native: {} }}\n *\n * @param {Object} themes - each theme module, keys are names and values are the theme rules\n * @param {boolean} platforms - Platforms to use when building the theme\n *\n * @returns {Object} - Update theme object with platform keys updated\n */\nconst getPlatformTheme = (theme, platforms, Platform = {}) => {\n  if (!theme) return theme\n\n  return reduceObj(\n    theme,\n    (key, value, platformTheme) => {\n    \n      // Update the current get correct value for the platform key\n      platformTheme[key] = updatePlatformTheme(platforms, Platform, value)\n\n      // Return the update platformTheme object\n      return platformTheme\n\n      // Use the theme as the original platformTheme to return\n    },\n    theme\n  )\n}\n\n/**\n * Traverse through the theme to find any size objects matching this size\n * <br/> Adds them to the root size object, and removes from the default paht\n * @function\n * @example:\n * const meetings = { fontSize: 12, small: { fontSize: 10 } }\n * restructureTheme({ meetings })\n * # returns => { small: { meetings: { fontSize: 10 }, meetings: { fontSize: 12 } }\n *\n * @param {Object} themes - each theme module, keys are names and values are the theme rules\n * @param {boolean} usrPlatform - Use a custom user theme Platform\n *\n * @returns {Object} - sized theme object with sizes moved to root size object\n */\nexport const restructureTheme = (theme, usrPlatform = {}) => {\n  const Platform = getRNPlatform()\n\n  // Use the theme based on the platform if it exists\n  // Pass in the response after the sizes are set\n  // Loop over the size map hash keys\n  return Object.keys(getSizeMap().hash).reduce((updatedTheme, size) => {\n    // traverse through the theme to find any size objects matching this size\n    const builtSize = buildSizedThemes(theme, theme[size] || {}, size)\n\n    // If builtSize is not empty, then size data was found, so set it to the updatedTheme object\n    if (!isEmpty(builtSize)) updatedTheme[size] = builtSize\n\n    return updatedTheme\n  }, getPlatformTheme(theme, buildPlatforms(usrPlatform), Platform))\n}\n","/**\n * Holds the current theme after it's built\n */\nlet currentTheme = {}\n\n/**\n * Helper to allow other methods to get the current theme used by the provider\n * @returns {Object} currentTheme - Current theme used by the provider\n */\nexport const getCurrentTheme = () => currentTheme\n\n/**\n * Helper to update the current Theme when ever the theme is built\n * Gets added as an event listener, and is called every time the theme is re-built\n * @param {Object} updatedTheme - Update built theme\n */\nexport const updateCurrentTheme = updatedTheme => (currentTheme = updatedTheme)\n","import { deepMerge, get, isArr, isObj, isStr } from '@keg-hub/jsutils'\nimport { getCurrentTheme } from '../theme/manageTheme'\n\n/**\n * Merges the styles from the passed in sources\n * @param {Array} sources - An array of strings, arrays or objects\n *                          If it's a string or array, it searches the theme using get\n *                          If it's a object, it merges it with the other found objects\n *\n * @returns {Object} - built theme styles object\n */\nexport const getTheme = function (...sources) {\n  const theme = getCurrentTheme()\n\n  // Build the styles by merging the sources together\n  // Check if each source is an id to cache or get the styles from the theme\n  return deepMerge(\n    ...sources.reduce((toMerge, source) => {\n      const styles = isObj(source)\n        ? source\n        : isStr(source) || isArr(source)\n          ? get(theme, source)\n          : null\n\n      styles && toMerge.push(styles)\n\n      return toMerge\n    }, [])\n  )\n}\n","import { isArr, isObj, get } from '@keg-hub/jsutils'\nimport { getTheme } from './getTheme'\n\n/**\n * Checks if the passed in arguments match an object array pattern\n * <br/> Which checks is the first argument is a ReTheme object, and the second is an array of paths\n * @param {Object} arg1 - Checks if this is the root ReTheme Object\n *\n * @returns {boolean} - T/F if the passed in arguments match\n */\nconst hasManyFromTheme = arg1 => isObj(arg1) && isObj(arg1.RTMeta)\n\n/**\n * Joins rules from the theme together. Accepts unlimited rules objects\n * <br/> Subset rules can be passed in as an array of key names on the theme to join together\n * <br/> Or the the actual rules objects should be passed in\n * @param {Object} arg1 - Theme, or subset of theme rules\n * @param {Object|Array} arg2 - Subset of theme rules or an array of keys to join from the theme\n * @param {Array} sources - Array of subset theme rules to join together\n *\n * @returns {Object} - Joined theme rules\n */\nexport const joinTheme = (arg1, arg2, ...sources) => {\n\n  sources = !isArr(arg2)\n    ? [arg2].concat(sources)\n    : [ ...(arg2.map(arg => (isObj(arg) && arg) || (arg && get(arg1, arg)))), ...sources ]\n\n  return hasManyFromTheme(arg1, arg2)\n    ? getTheme(...sources)\n    : getTheme(arg1, ...sources)\n\n}\n","/** @module theme */\n'use strict'\n\nimport { fireThemeEvent } from './themeEvent'\nimport { Constants } from '../constants'\nimport { getMergeSizes, getSize } from '../dimensions'\nimport { isObj, deepMerge } from '@keg-hub/jsutils'\nimport { restructureTheme } from './restructureTheme'\nimport { updateCurrentTheme } from './manageTheme'\nimport { getTheme } from '../helpers/getTheme'\nimport { joinTheme } from '../helpers/joinTheme'\n\n/**\n * Joins themes from different sizes together based on the index of the sizeKey\n * <br/> It takes the all sizes less then the index of the sizeKey, included in the sizeKey\n * <br/> Then loops over each one and joins them together\n * @function\n * @param {Object} theme - Parent theme object, which holds the child themes organized by their size keys (e.g. $small)\n * @param {string} sizeKey - Name of the current window size\n * @param {Object} [extraTheme={}] - Extra theme items to add to the theme, has lowest priority\n *\n * @returns {Object} - Merged theme\n */\nconst joinThemeSizes = (theme, sizeKey, extraTheme = {}) => {\n  const sizesToMerge = getMergeSizes(sizeKey)\n  return deepMerge(\n    // Add the extra theme first, so it has lowest priority\n    extraTheme,\n    // Get the sizes to merge, and map to the theme\n    ...sizesToMerge.reduce((themes, key) => {\n      // Check if a theme exists for the passed in key\n      // And add it to the themes array\n      theme[key] && themes.push(theme[key])\n\n      return themes\n    }, [])\n  )\n}\n\n/**\n * Checks if the theme is the same as the default theme.\n * <br/> If not then merges the two together.\n * <br /> Also, adds the size themes at the root of the resulting object\n * @function\n * @param {Object} theme - Passed in user there\n * @param {Object} defaultTheme - Cached default theme\n * @param {boolean} usrPlatform - Use a custom user theme Platform\n *\n * @returns {Object} - Theme object\n */\nconst mergeWithDefault = (theme, defaultTheme, usrPlatform) => {\n  // Check if theres a defaultTheme, and it's not equal to the passed in theme\n  const mergedTheme =\n    defaultTheme && theme !== defaultTheme\n      ? deepMerge(defaultTheme, theme)\n      : deepMerge({}, theme)\n\n  // Build the sizes for the merged theme based on the sizeMap keys\n  return restructureTheme(mergedTheme, usrPlatform)\n}\n\n/**\n * Gets the dimensions of the current screen, and pull the theme if it exists\n * @function\n * @param {Object} theme - Current active theme\n * @param {number} width - Current screen width\n * @param {number} height - Current screen height\n * @param {Object} defaultTheme - Initial theme\n * @param {boolean} usrPlatform - Use a custom user theme Platform\n *\n * @returns {Object} Subsection of the theme based on current dimensions if it exists\n */\nexport const buildTheme = (theme, width, height, defaultTheme, usrPlatform) => {\n  // If theres no theme, or not valid curSize, just return the passed in theme\n  if (!isObj(theme)) return theme\n\n  if (!isObj(usrPlatform)) usrPlatform = {}\n\n  // Pull out the key and the size that matches the width\n  const [ key, size ] = getSize(width)\n\n  const mergedTheme = mergeWithDefault(theme, defaultTheme, usrPlatform)\n\n  // Extract the sizes from the theme\n  const {\n    $xsmall,\n    $small,\n    $medium,\n    $large,\n    $xlarge,\n    ...extraTheme\n  } = mergedTheme\n\n  const builtTheme = size\n    ? joinThemeSizes(mergedTheme, key, extraTheme)\n    : extraTheme\n\n  builtTheme.RTMeta = { key, size, width, height }\n\n  builtTheme.get = getTheme\n  builtTheme.join = joinTheme\n\n  updateCurrentTheme(builtTheme)\n  fireThemeEvent(Constants.BUILD_EVENT, builtTheme)\n\n  return builtTheme\n}\n","/** @module theme */\n'use strict'\n\nimport { deepMerge, isObj } from '@keg-hub/jsutils'\nimport { Dimensions } from '../dimensions/dimensions'\nimport { buildTheme } from './buildTheme'\n\n/**\n * Holds the default theme which can be set with the setDefaultTheme helper\n */\nlet defaultTheme = {}\n\n/**\n * Overwrites the default them with passed in theme\n * If merge is passed as true, will merge the current default theme with the passed in theme\n * @param {Object} [theme={}] - Theme to overwrite of merge with the default theme\n * @param {boolean} [merge=false] - Should the passed in theme be merged with the default theme\n * @param {boolean} useDimensions - Should subset theme that matches current dimensions\n *\n * @returns {void}\n */\nexport const setDefaultTheme = (theme, merge = false) => {\n  // Ensure the passed in theme is an object\n  if (!isObj(theme))\n    return console.warn(\n      `setDefaultTheme method requires an theme object as the first argument. Received: `,\n      theme\n    )\n\n  // Check if the default theme should be merged, or overwritten\n  defaultTheme = merge ? deepMerge(defaultTheme, theme) : theme\n\n  // Get subset theme that matches current dimensions is useDimensions is true\n  const dims = Dimensions.get('window')\n  const useTheme = buildTheme(defaultTheme, dims.width, dims.height)\n\n  // Return the newly set default theme\n  return useTheme\n}\n\n/**\n * Gets the default theme\n *\n * @returns {Object} - the default theme\n */\nexport const getDefaultTheme = () => defaultTheme\n","/** @module context */\n'use strict'\n\nimport React from 'react'\nimport { getDefaultTheme } from '../theme/default'\n\n/**\n * Creates the initial theme context\n */\nexport const ReThemeContext = React.createContext(getDefaultTheme())\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useState, useMemo } from 'react'\nimport { ReThemeContext } from './reThemeContext'\nimport { Dimensions } from '../dimensions/dimensions'\nimport { getSize } from '../dimensions/sizeMap'\nimport { buildTheme, getDefaultTheme } from '../theme'\nimport { getCurrentTheme } from '../theme/manageTheme'\nimport { get } from '@keg-hub/jsutils'\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge, platforms, logRenders } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n\n    // Get the size we should change to\n    const changeToSize = getSize(width)\n\n    // If no size to change to, just return\n    if (!changeToSize) return\n\n    // Get the string version of the size to change to\n    const sizeToBe = changeToSize[0]\n\n    // Get the current theme to check the size\n    const currentTheme = getCurrentTheme()\n    // Get the current size string version\n    const currentSize = get(currentTheme, [ 'RTMeta', 'key' ])\n\n    // Check if the sizes are not equal, and if so update the Dimensions with the new size\n    // Update the state with the updated dimensions data\n    sizeToBe !== currentSize &&\n      setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listeners\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listeners\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  logRenders && console.log(`---------- RE-THEME RE-RENDER ----------`)\n\n  const builtTheme = useMemo(() => {\n    return buildTheme(\n      theme,\n      dimensions.width,\n      dimensions.height,\n      merge && getDefaultTheme(),\n      platforms\n    ) \n  }, [\n    theme,\n    dimensions.width,\n    dimensions.height,\n    merge,\n    platforms,\n  ])\n\n  return (\n    <ReThemeContext.Provider\n      value={builtTheme}\n    >\n      { children }\n    </ReThemeContext.Provider>\n  )\n\n}\n","import * as React from 'react'\n\nexport const HeadContext = React.createContext(null)\nexport const { Consumer, Provider } = HeadContext\n"],"names":["Constants","deepFreeze","BUILD_EVENT","CHANGE_EVENT","RESIZE_EVENT","ADD_EVENT","REMOVE_EVENT","NO_CACHE","PLATFORM","NATIVE","WEB","ALL","CSS_UNITS","RNDimensions","checkDimensions","callBack","console","error","setRNDimensions","dims","Dimensions","get","width","height","set","update","addEventListener","removeEventListener","listeners","addThemeEvent","event","listener","isFunc","push","length","removeThemeEvent","removeListener","isNum","splice","isArr","filter","fireThemeEvent","params","forEach","sizeMap","entries","hash","indexes","buildSizeMapParts","reduce","entry","index","setSizes","isObj","logData","mapObj","key","value","keyIndex","softFalsy","newSize","toNum","getSize","checkWidth","name","updateSize","getMergeSizes","slice","map","size","getSizeMap","webDefPlatform","OS","select","obj","web","Version","RNPlatform","getRNPlatform","setRNPlatform","Plat","getDefaultPlatforms","Platform","stylePlatforms","concat","buildPlatforms","usrPlatforms","platsToUse","Object","keys","platforms","plat","indexOf","unshift","buildSizedThemes","theme","sizedTheme","reduceObj","mergedSize","deepMerge","unset","subSized","isEmpty","mergePlatformOS","toMerge","updatePlatformTheme","themeData","$class","$className","cleanTheme","mergedPlatform","getPlatformTheme","className","platformTheme","restructureTheme","usrPlatform","updatedTheme","builtSize","currentTheme","getCurrentTheme","updateCurrentTheme","getTheme","sources","source","styles","isStr","hasManyFromTheme","arg1","RTMeta","joinTheme","arg2","arg","joinThemeSizes","sizeKey","extraTheme","sizesToMerge","themes","mergeWithDefault","defaultTheme","mergedTheme","buildTheme","$xsmall","$small","$medium","$large","$xlarge","builtTheme","join","setDefaultTheme","merge","warn","useTheme","getDefaultTheme","ReThemeContext","React","createContext","ReThemeProvider","props","children","doMerge","logRenders","Boolean","useState","dimensions","setDimensions","onChange","win","window","scale","fontScale","changeToSize","sizeToBe","currentSize","useEffect","log","useMemo","HeadContext","Consumer","Provider"],"mappings":"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"}