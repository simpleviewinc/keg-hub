{"version":3,"file":"index.js","sources":["../../../src/dimensions/useDimensions.js","../../../src/theme/withTheme.js","../../../src/context/reThemeProvider.js","../../../src/context/platform.js","../../../src/dimensions/dimensions.native.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/useStyle.js","../../../src/hooks/nativeThemeHook.js"],"sourcesContent":["/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useState, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ReThemeContext } from './reThemeContext'\nimport { Dimensions } from 'ReDimensions'\nimport { getSize } from '../dimensions/sizeMap'\nimport { buildTheme, getDefaultTheme } from '../theme'\nimport { getCurrentTheme } from '../theme/manageTheme'\nimport { get } from '@keg-hub/jsutils'\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge, platforms } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n\n    // Get the size we should change to\n    const changeToSize = getSize(width)\n\n    // If no size to change to, just return\n    if (!changeToSize) return\n\n    // Get the string version of the size to change to\n    const sizeToBe = changeToSize[0]\n\n    // Get the current theme to check the size\n    const currentTheme = getCurrentTheme()\n    // Get the current size string version\n    const currentSize = get(currentTheme, [ 'RTMeta', 'key' ])\n\n    // Check if the sizes are not equal, and if so update the Dimensions with the new size\n    // Update the state with the updated dimensions data\n    sizeToBe !== currentSize &&\n      setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listeners\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listeners\n    return () => {\n      Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  const builtTheme = useMemo(() => {\n    return buildTheme(\n      theme,\n      dimensions.width,\n      dimensions.height,\n      merge && getDefaultTheme(),\n      platforms\n    )\n  }, [ theme, dimensions.width, dimensions.height, merge, platforms ])\n\n  return (\n    <ReThemeContext.Provider value={builtTheme}>\n      { children }\n    </ReThemeContext.Provider>\n  )\n}\n\nReThemeProvider.propTypes = {\n  /**\n  Global defined Application theme\n  */\n  theme: PropTypes.object.isRequired,\n  /**\n  Should merge passed in theme prop with the current theme\n  */\n  merge: PropTypes.bool,\n  /**\n  Custom theme platform to use for the current context\n  */\n  platforms: PropTypes.array,\n  /**\n   Child components to wrap the with ReTheme provider\n  */\n  children: PropTypes.node,\n}\n","import { isObj } from '@keg-hub/jsutils'\n\n/**\n * Default platform used for a web-app\n * @Object\n */\nconst webDefPlatform = {\n  OS: 'web',\n  select: obj => isObj(obj) && obj.web,\n  Version: 'ReTheme',\n}\n\nlet RNPlatform\n\n/**\n * Gets the set platform object, or the default platform\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst getRNPlatform = () => {\n  return RNPlatform || webDefPlatform\n}\n\n/**\n * Sets the platform object used when building the theme\n * @function\n * @param {Object} Plat - Platform object to use\n *\n * @return {void}\n */\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","let RNDimensions\n\nconst loadReactNativeDimensions = () => {\n  const { Dimensions } = require('react-native')\n  return Dimensions\n}\n\nconst checkDimensions = callBack => {\n  return (...props) => {\n    RNDimensions = RNDimensions || loadReactNativeDimensions()\n\n    return RNDimensions\n      ? callBack(...props)\n      : console.error(\n        `[ ReTheme ERROR ] - Missing Dimensions`,\n        `\\n   - You must initialize 'Dimensions' before using the 'ReThemeProvider'`,\n        `\\n   - Do this by calling 'setRNDimensions(Dimensions)'`,\n        `\\n   - The first argument must be the 'Dimensions' export of 'react-native'`,\n        `\\n   - Or an Object with a matching API`\n      )\n  }\n}\n\nexport const setRNDimensions = dims => (RNDimensions = dims)\n\nexport const Dimensions = {\n  get: checkDimensions((...params) => {\n    return RNDimensions ? RNDimensions.get(...params) : { width: 0, height: 0 }\n  }),\n  set: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.set(...params)\n  }),\n  update: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.update(...params)\n  }),\n  addEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.addEventListener(...params)\n  }),\n  removeEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.removeEventListener(...params)\n  }),\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport {\n  checkCall,\n  isObj,\n  isEmptyColl,\n  noPropObj,\n  noPropArr,\n} from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} [cbDependencies=[]] - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n *\n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (\n  stylesCb,\n  cbDependencies = noPropArr,\n  customStyles\n) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies)\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(\n    () => checkCall(cb, theme, styles, ...cbDependencies) || noPropObj,\n    [ theme, cb, styles ]\n  )\n}\n","/** @module hooks */\n\nimport { useMemo } from 'react'\nimport { useTheme } from './useTheme'\nimport { noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Merges styles defined by styleArgs into a memoized style object\n * @param  {...(string | Object)} styleArgs - any number of strings or style objects. Strings are expected to be theme paths, which will be used to get the associated theme object for that path.\n * @returns {Object} - result of merging style objects\n * @example\n * const textStyles = useStyle('todos.text', textStylesObject)\n * const myStyles = useStyle(\n *  'settings.button',\n *  { main: { margin: 5 }},\n *  inputStyles,\n *  'someOtherPath.button'\n * )\n */\nexport const useStyle = (...styleArgs) => {\n  const theme = useTheme()\n  return useMemo(\n    () => theme.get(...styleArgs) || noPropObj,\n    [ theme, ...styleArgs ]\n  )\n}\n","import { useRef, useState, useLayoutEffect } from 'react'\nimport { get, shallowEqual, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Checks it two passed in objects are equal pointers or equal as json strings\n * @param {Object} obj1 - Object to check\n * @param {Object} obj2 - Object to check\n *\n * @returns {boolean} - If objects are equal\n */\nconst checkEqual = (obj1, obj2) => obj1 === obj2 || shallowEqual(obj1, obj2)\n\n/**\n * Placeholder hook when on native device\n * @param {Object} offValue - When on native, this theme will always be used\n * @param {Object} onValue - Active theme, only used when on web\n * @param {Object} options - Options object that could hold am element ref\n *\n * @returns {Array} - Hook formatted array, same as on web\n */\nexport const nativeThemeHook = (offValue, onValue, options) => {\n  // Get the ref object\n  const hookRef = get(options, 'ref', useRef())\n\n  // Set the default value\n  const [ value, setValue ] = useState(offValue)\n\n  useLayoutEffect(() => {\n    !checkEqual(offValue, value) && setValue(value)\n  }, [ offValue, onValue ])\n\n  // Return an array matching the same format as on web\n  return [ hookRef, offValue, setValue ]\n}\n\n/**\n * Placeholder hook when on native device\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track. Must be one of hover, active, or focus\n *\n * @return {Object} - States of the pointed relative to the passed in pointerState\n */\nexport const usePointerState = (options = noOpObj) => ({\n  hover: false,\n  focus: false,\n  active: false,\n  events: noOpObj,\n  ref: options.ref,\n})\n"],"names":["useDimensions","useState","Dimensions","get","dimensions","setDimensions","onChange","win","window","width","height","scale","fontScale","useEffect","addEventListener","shouldUnmount","removeEventListener","withTheme","Component","props","React","ReThemeContext","Consumer","value","theme","ReThemeProvider","children","doMerge","merge","platforms","Boolean","changeToSize","getSize","sizeToBe","currentTheme","getCurrentTheme","builtTheme","useMemo","buildTheme","getDefaultTheme","Provider","setRNPlatform","Plat","setRNDimensions","dims","useStylesCallback","stylesCb","cbDependencies","noPropArr","customStyles","cb","useCallback","useTheme","styles","isObj","isEmptyColl","checkCall","noPropObj","useStyle","styleArgs","nativeThemeHook","offValue","onValue","options","hookRef","useRef","setValue","useLayoutEffect","obj1","obj2","shallowEqual","usePointerState","noOpObj","hover","focus","active","events","ref"],"mappings":"qlBAQaA,cAAgB,iBAIWC,EAASC,EAAWC,IAAI,oBAAtDC,OAAYC,OAOdC,SAAW,gBAAWC,IAARC,OAEVC,EAAoCF,EAApCE,MAAOC,EAA6BH,EAA7BG,OAAQC,EAAqBJ,EAArBI,MAAOC,EAAcL,EAAdK,UAE9BP,EAAc,CAAEI,MAAAA,EAAOC,OAAAA,EAAQC,MAAAA,EAAOC,UAAAA,YAMxCC,GAAU,kBAERX,EAAWY,iBAAiB,SAAUR,UAG/B,kBACLA,SAASS,eAAgB,EAClBb,EAAWc,oBAAoB,SAAUV,aAEjD,IAGIF,GC7BIa,UAAY,SAAAC,UAChB,SAAAC,UAEHC,gBAACC,EAAeC,eACZ,SAAAC,UACOH,gBAACF,KACNM,MAAOD,GACHJ,SCGHM,gBAAkB,SAAAN,OACrBO,EAA+CP,EAA/CO,SAAUF,EAAqCL,EAArCK,MAAcG,EAAuBR,EAA9BS,MAAgBC,EAAcV,EAAdU,UACnCD,EAAQE,QAAQH,IAAaA,IAAuB,IAAZA,KAAuB,IAK/B1B,EAASC,EAAWC,IAAI,oBAAtDC,OAAYC,OAOdC,SAAW,gBAAWC,IAARC,OAEVC,EAAoCF,EAApCE,MAAOC,EAA6BH,EAA7BG,OAAQC,EAAqBJ,EAArBI,MAAOC,EAAcL,EAAdK,UAGxBmB,EAAeC,EAAQvB,MAGxBsB,OAGCE,EAAWF,EAAa,GAGxBG,EAAeC,IAMrBF,IAJoB9B,EAAI+B,EAAc,CAAE,SAAU,SAKhD7B,EAAc,CAAEI,MAAAA,EAAOC,OAAAA,EAAQC,MAAAA,EAAOC,UAAAA,MAM1CC,GAAU,kBAERX,EAAWY,iBAAiB,SAAUR,UAG/B,WACLJ,EAAWc,oBAAoB,SAAUV,aAE1C,QAEG8B,EAAaC,GAAQ,kBAClBC,EACLd,EACApB,EAAWK,MACXL,EAAWM,OACXkB,GAASW,IACTV,KAED,CAAEL,EAAOpB,EAAWK,MAAOL,EAAWM,OAAQkB,EAAOC,WAGtDT,gBAACC,EAAemB,UAASjB,MAAOa,GAC5BV,ICtDFe,cAAgB,SAAAC,KCRTC,gBAAkB,SAAAC,UAAwBA,GCK1CC,kBAAoB,SAC/BC,OACAC,yDAAiBC,EACjBC,yCAGMC,EAAKC,EAAYL,EAAUC,GAG3BvB,EAAQ4B,IAGRC,KACHJ,IAAiBK,EAAML,IAAiBM,EAAYN,KAEjDA,SAGCZ,GACL,kBAAMmB,gBAAUN,EAAI1B,EAAO6B,YAAWN,MAAmBU,IACzD,CAAEjC,EAAO0B,EAAIG,KC7BJK,SAAW,sCAAIC,2BAAAA,sBACpBnC,EAAQ4B,WACPf,GACL,kBAAMb,EAAMrB,UAANqB,EAAamC,IAAcF,KAC/BjC,UAAUmC,KCHHC,gBAAkB,SAACC,EAAUC,EAASC,OAE3CC,EAAU7D,EAAI4D,EAAS,MAAOE,OAGRhE,EAAS4D,YAA7BtC,OAAO2C,cAEfC,GAAgB,WAjBC,IAACC,EAAMC,GAAND,EAkBJP,MAlBUQ,EAkBA9C,KAlB0B+C,EAAaF,EAAMC,IAkBnCH,EAAS3C,KACxC,CAAEsC,EAAUC,IAGR,CAAEE,EAASH,EAAUK,IAWjBK,gBAAkB,eAACR,yDAAUS,QAAa,CACrDC,OAAO,EACPC,OAAO,EACPC,QAAQ,EACRC,OAAQJ,EACRK,IAAKd,EAAQc"}