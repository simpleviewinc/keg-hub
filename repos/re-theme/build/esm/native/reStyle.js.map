{"version":3,"file":"reStyle.js","sources":["../../../src/styleInjector/index.native.js","../../../src/reStyle/reStyleHooks.js","../../../src/reStyle/reStyle.js"],"sourcesContent":["import React from 'react'\n\n/**\n * Stub for Native StyleInjector calls, just renders the component\n */\nexport const StyleInjector = Component => props => <Component {...props} />\n\n/**\n * Stub for Native useStyleTag calls, just returns the className\n */\nexport const useStyleTag = (_, className = '') => className\n","import { useTheme } from '../hooks/useTheme'\nimport { useMemo, useState, useEffect } from 'react'\nimport {\n  ensureArr,\n  uuid,\n  clearObj,\n  isObj,\n  deepMerge,\n  noOpObj,\n  isFunc,\n  shallowEqual,\n} from '@keg-hub/jsutils'\n\n/**\n * Helper to get the name of a component, or an ID for reference\n * @function\n * @param {React.Component} Component - Component to get the name from\n *\n * @returns {string} - Name of the Component or generated id when name does not exist\n */\nexport const getComponentName = Component => {\n  return (\n    Component.displayName ||\n    Component.name ||\n    `keg-${uuid().split('-')\n      .slice(4)\n      .join('')}`\n  )\n}\n\n/**\n * Hook to ensure the className prop is an array with the compName argument added to it\n * @function\n * @param {String|Array} className - Current class names already set\n * @param {string} compName - Name of a component to be added as a class name\n *\n * @returns {Array} - Built array of class names with the compName name added to it\n */\nexport const usePropClassName = (className, compName) => {\n  return useMemo(() => {\n    const classArr = className ? ensureArr(className) : []\n    compName && classArr.push(compName)\n\n    return classArr\n  }, [ className, compName ])\n}\n\n/**\n * Hook that ensures a consistent Object identity to avoid re-renders\n * @function\n * @param {Object} identity - Object to be reused\n * @param {Array} mergeObjs - Other objects to be merged with the identity object\n *\n * @returns {Object} - identity object merged with the passed in mergeObjs\n */\nexport const useObjWithIdentity = (identity, ...mergeObjs) => {\n  return useMemo(() => {\n    clearObj(identity)\n    Object.assign(identity, deepMerge(...mergeObjs))\n\n    return identity\n  }, [ identity, ...mergeObjs ])\n}\n\n/**\n * Hook to memoize the styles and return them\n * <br/> Calls styleData when its a function passing in the theme and props\n * @function\n * @param {Object|function} styleData - Custom styles or function return custom styles\n * @param {Object} props - Props of the component being wrapped\n *\n * @returns {Object} - Build styles object\n */\nexport const useReStyles = (styleData, props) => {\n  const theme = useTheme()\n  const [ stateProps, setStateProps ] = useState(props)\n  const propsEqual = shallowEqual(props, stateProps)\n\n  useEffect(() => {\n    !propsEqual && setStateProps(props)\n  }, [propsEqual])\n\n  return useMemo(() => {\n    return isFunc(styleData)\n      ? styleData(theme, props)\n      : isObj(styleData)\n        ? styleData\n        : noOpObj\n  }, [ theme, styleData, propsEqual ])\n}\n","import React from 'react'\nimport { exists, noOpObj } from '@keg-hub/jsutils'\nimport { StyleInjector } from 'StyleInjector'\nimport {\n  getComponentName,\n  useObjWithIdentity,\n  usePropClassName,\n  useReStyles,\n} from './reStyleHooks'\n\n/**\n * Builds a HOC, with custom styles injected into it\n * @function\n * @param {React.Component} Component - Component to wrap with custom styles\n * @param {string} [styleProp='style'] - Alternate props key to use other then 'style'\n *\n * @returns {React.Component} HOC that will inject the custom styles\n */\nexport const reStyle = (Component, styleProp = 'style') => {\n  const joinStyles = {}\n  const compName = getComponentName(Component)\n  const InjectedComp = StyleInjector(Component, {\n    displayName: compName,\n    className: compName,\n  })\n\n  return styleData => {\n    const StyledFun = React.forwardRef((props, ref) => {\n      const reStyles = useReStyles(styleData, props)\n      const classArr = usePropClassName(props.className, compName)\n      const styleFromProps = exists(props[styleProp])\n        ? props[styleProp]\n        : noOpObj\n      const styles = useObjWithIdentity(joinStyles, reStyles, styleFromProps)\n\n      return (\n        <InjectedComp\n          {...props}\n          {...{ [styleProp]: styles }}\n          style={styles}\n          className={classArr}\n          ref={ref}\n        />\n      )\n    })\n\n    StyledFun.displayName = `reStyle(${compName})`\n\n    return StyledFun\n  }\n}\n"],"names":["StyleInjector","Component","props","React","getComponentName","displayName","name","uuid","split","slice","join","usePropClassName","className","compName","useMemo","classArr","ensureArr","push","useObjWithIdentity","identity","mergeObjs","clearObj","Object","assign","deepMerge","useReStyles","styleData","theme","useTheme","useState","stateProps","setStateProps","propsEqual","shallowEqual","useEffect","isFunc","isObj","noOpObj","reStyle","styleProp","joinStyles","InjectedComp","StyledFun","forwardRef","ref","reStyles","styleFromProps","exists","styles","style"],"mappings":"sRAKO,IAAMA,cAAgB,SAAAC,UAAa,SAAAC,UAASC,gBAACF,EAAcC,KCerDE,iBAAmB,SAAAH,UAE5BA,EAAUI,aACVJ,EAAUK,oBACHC,IAAOC,MAAM,KACjBC,MAAM,GACNC,KAAK,MAYCC,iBAAmB,SAACC,EAAWC,UACnCC,GAAQ,eACPC,EAAWH,EAAYI,EAAUJ,GAAa,UACpDC,GAAYE,EAASE,KAAKJ,GAEnBE,IACN,CAAEH,EAAWC,KAWLK,mBAAqB,SAACC,8BAAaC,mCAAAA,2BACvCN,GAAQ,kBACbO,EAASF,GACTG,OAAOC,OAAOJ,EAAUK,eAAaJ,IAE9BD,KACJA,UAAaC,KAYPK,YAAc,SAACC,EAAWxB,OAC/ByB,EAAQC,MACwBC,EAAS3B,YAAvC4B,OAAYC,OACdC,EAAaC,EAAa/B,EAAO4B,UAEvCI,GAAU,YACPF,GAAcD,EAAc7B,KAC5B,CAAC8B,IAEGlB,GAAQ,kBACNqB,EAAOT,GACVA,EAAUC,EAAOzB,GACjBkC,EAAMV,GACJA,EACAW,IACL,CAAEV,EAAOD,EAAWM,KCtEZM,QAAU,SAACrC,OAAWsC,yDAAY,QACvCC,EAAa,GACb3B,EAAWT,iBAAiBH,GAC5BwC,EAAezC,cAAcC,UAK5B,SAAAyB,OACCgB,EAAYvC,EAAMwC,YAAW,SAACzC,EAAO0C,OACnCC,EAAWpB,YAAYC,EAAWxB,GAClCa,EAAWJ,iBAAiBT,EAAMU,UAAWC,GAC7CiC,EAAiBC,EAAO7C,EAAMqC,IAChCrC,EAAMqC,GACNF,EACEW,EAAS9B,mBAAmBsB,EAAYK,EAAUC,UAGtD3C,gBAACsC,OACKvC,OACGqC,EAAYS,IACnBC,MAAOD,EACPpC,UAAWG,EACX6B,IAAKA,eAKXF,EAAUrC,8BAAyBQ,OAE5B6B"}