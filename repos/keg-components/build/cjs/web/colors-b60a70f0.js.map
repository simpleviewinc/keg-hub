{"version":3,"file":"colors-b60a70f0.js","sources":["../../../src/theme/themeDefaults.js","../../../src/theme/colors.js"],"sourcesContent":["/****************** IMPORTANT ******************/ /*\n * This component is a work in progress\n * It's NOT complete or expected to be working\n * It is NOT exported from the main components export\n * It is NOT included in the keg-components bundle\n/****************** IMPORTANT ******************/\n\nimport { deepMerge } from '@keg-hub/jsutils'\nimport defaults from './defaults.json'\n\nlet __themeDefaults = defaults\n\n/**\n * IMPORTANT - This should be called prior to theme initialization\n * This way the defaults will be updated before the theme is built\n * Allows overriding the theme defaults.json file with custom values\n * <br/>Merges the passed in overrides file with the defaults file\n * @param {Object} overrides - Overrides for the defaults theme object\n *\n * @return {Object} - Merged theme defaults\n */\nexport const setThemeDefaults = overrides => {\n  __themeDefaults = deepMerge(defaults, overrides)\n\n  return __themeDefaults\n}\n\n/**\n * Gets the theme defaults object\n *\n * @return {Object} - Theme defaults object\n */\nexport const getThemeDefaults = () => __themeDefaults\n","import { get, isArr, isStr, reduceObj } from '@keg-hub/jsutils'\nimport { getThemeDefaults } from './themeDefaults'\nimport { opacity, shadeHex } from '@keg-hub/re-theme/colors'\n\nconst defaults = getThemeDefaults()\nconst defPalette = get(defaults, 'colors.palette', {})\nconst defTypes = get(defaults, 'colors.types', {})\n\nexport const colors = {\n  // Use opacity helper from re-theme\n  opacity: opacity,\n\n  // Build out the pallet based on the default colors\n  palette: reduceObj(\n    defPalette,\n    (key, value, updated) => {\n      !isArr(value)\n        ? (updated[key] = value)\n        : value.map((val, i) => {\n          const name = `${key}0${i + 1}`\n          updated[name] = isStr(val)\n            ? val\n            : shadeHex(value[1], value[i])\n        })\n\n      return updated\n    },\n    {}\n  ),\n}\n\n// Build out the surface colors based on the built palette\ncolors.surface = reduceObj(\n  defTypes,\n  (key, value, updated) => {\n    updated[key] = {\n      colors: {\n        light: colors.palette[`${value.palette}01`],\n        main: colors.palette[`${value.palette}02`],\n        dark: colors.palette[`${value.palette}03`],\n      },\n    }\n\n    return updated\n  },\n  {}\n)\n"],"names":["__themeDefaults","defaults","getThemeDefaults","defPalette","get","defTypes","colors","opacity","palette","reduceObj","key","value","updated","isArr","map","val","i","name","isStr","shadeHex","surface","light","main","dark"],"mappings":";;;;;;AAUA,IAAIA,eAAe,GAAGC,mBAAtB;IAsBaC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAMF,eAAN;AAAA;;AC5BhC,IAAMC,QAAQ,GAAGC,gBAAgB,EAAjC;AACA,IAAMC,UAAU,GAAGC,WAAG,CAACH,QAAD,EAAW,gBAAX,EAA6B,EAA7B,CAAtB;AACA,IAAMI,QAAQ,GAAGD,WAAG,CAACH,QAAD,EAAW,cAAX,EAA2B,EAA3B,CAApB;IAEaK,MAAM,GAAG;AAEpBC,EAAAA,OAAO,EAAEA,gBAFW;AAKpBC,EAAAA,OAAO,EAAEC,iBAAS,CAChBN,UADgB,EAEhB,UAACO,GAAD,EAAMC,KAAN,EAAaC,OAAb,EAAyB;AACvB,KAACC,aAAK,CAACF,KAAD,CAAN,GACKC,OAAO,CAACF,GAAD,CAAP,GAAeC,KADpB,GAEIA,KAAK,CAACG,GAAN,CAAU,UAACC,GAAD,EAAMC,CAAN,EAAY;AACtB,UAAMC,IAAI,aAAMP,GAAN,cAAaM,CAAC,GAAG,CAAjB,CAAV;AACAJ,MAAAA,OAAO,CAACK,IAAD,CAAP,GAAgBC,aAAK,CAACH,GAAD,CAAL,GACZA,GADY,GAEZI,iBAAQ,CAACR,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAACK,CAAD,CAAhB,CAFZ;AAGD,KALC,CAFJ;AASA,WAAOJ,OAAP;AACD,GAbe,EAchB,EAdgB;AALE;AAwBtBN,MAAM,CAACc,OAAP,GAAiBX,iBAAS,CACxBJ,QADwB,EAExB,UAACK,GAAD,EAAMC,KAAN,EAAaC,OAAb,EAAyB;AACvBA,EAAAA,OAAO,CAACF,GAAD,CAAP,GAAe;AACbJ,IAAAA,MAAM,EAAE;AACNe,MAAAA,KAAK,EAAEf,MAAM,CAACE,OAAP,WAAkBG,KAAK,CAACH,OAAxB,QADD;AAENc,MAAAA,IAAI,EAAEhB,MAAM,CAACE,OAAP,WAAkBG,KAAK,CAACH,OAAxB,QAFA;AAGNe,MAAAA,IAAI,EAAEjB,MAAM,CAACE,OAAP,WAAkBG,KAAK,CAACH,OAAxB;AAHA;AADK,GAAf;AAQA,SAAOI,OAAP;AACD,CAZuB,EAaxB,EAbwB,CAA1B;;;;;"}