{"version":3,"file":"checkbox.wrapper-cfffd2dd.js","sources":["../../../src/assets/icons/check/check.js","../../../src/components/form/checkbox/checkbox.wrapper.js"],"sourcesContent":["import * as React from 'react'\nimport { SvgIcon } from 'KegSvgIcon'\n\nexport const Check = props => {\n  return (\n    <SvgIcon\n      {...props}\n      viewBox='0 0 512 512'\n      delta='M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z'\n    />\n  )\n}\n","import React, {\n  useState,\n  useCallback,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n} from 'react'\nimport { View } from 'KegView'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport { useThemePath } from '../../../hooks'\nimport { useThemeTypeAsClass } from 'KegTypeAsClass'\nimport { get, isStr, toBool, checkCall } from '@keg-hub/jsutils'\nimport { getOnChangeHandler, getChecked, renderFromType } from '../../../utils'\nimport { useClassList } from 'KegClassList'\n\n/**\n * Optimizes the check and non-checked styles so they don't have to be rebuilt on each render\n * Checked styles only rebuild when isChecked value has changed\n * @param {boolean} isChecked - Current state of the switch component\n * @param {Object} themeStyles - Styles of the Switch component\n *\n * @returns {Object} - Styles with the correct values based on isChecked state\n */\nconst useCheckedState = (isChecked, themeStyles) => {\n  return useMemo(() => {\n    return {\n      ...themeStyles,\n      content: {\n        ...themeStyles.content,\n        area: {\n          ...get(themeStyles, 'content.area.off'),\n          ...(isChecked && get(themeStyles, 'content.area.on')),\n        },\n        indicator: {\n          ...get(themeStyles, 'content.indicator.off'),\n          ...(isChecked && get(themeStyles, 'content.indicator.on')),\n        },\n      },\n    }\n  }, [ isChecked, themeStyles ])\n}\n\n/**\n * Returns a memoized callback that sets / updates the value of the checked Component and\n * calls the callback, if it's passed in\n * @param {boolean} isChecked - Current state of the check value\n * @param {function} setChecked - Update the checked state\n * @param {function} onChange - Callback to call when the state changes\n * @param {boolean} options.disableCheck - `setChecked` can only be called with `true` if this value is false\n * @param {boolean} options.disableUncheck - `setChecked` can only be called with `false` if this value is also false\n *\n * @returns {function} - The checked state update function\n */\nconst useCheckboxPressHandler = (\n  isChecked,\n  setChecked,\n  onChange,\n  { disableCheck = false, disableUncheck = true }\n) => {\n  return useCallback(\n    event => {\n      if (isChecked) !disableUncheck && setChecked(false)\n      else !disableCheck && setChecked(true)\n      checkCall(onChange, event, !isChecked)\n    },\n    [ isChecked, setChecked, onChange, disableCheck, disableUncheck ]\n  )\n}\n\n/**\n * Side\n * @summary builds the side sections of the Switch\n * @param {Object} props\n * @property {React Component|string|Object|Array} Component  - custom component to display in the section.\n * @property {Object} style - default headerstyle obj for section\n *\n * @returns {Component} - section component\n */\nconst SideComponent = ({ className, Component, styles, style, onPress }) => {\n  const sideProps = onPress ? { onPress } : undefined\n  return isStr(Component) ? (\n    <Text\n      className={className}\n      style={style}\n      {...sideProps}\n    >\n      { Component }\n    </Text>\n  ) : (\n    renderFromType(Component, {\n      className,\n      style,\n      styles,\n      ...sideProps,\n    })\n  )\n}\n\n/**\n * Finds the children type and returns them in the format needed to render\n * @param {Object|Array|string} props.children - Child components to render\n *\n * @returns {React Component|Object|Array}\n */\nconst ChildrenComponent = ({ children, className }) => (\n  <>{ renderFromType(children, { className }, null) }</>\n)\n\n/**\n * Exposes an imperative api for the consumer of checkbox\n * @param {RefObject} ref\n * @param {boolean} isChecked\n * @param {Function} setChecked\n * @param {Function} pressHandler - fn responsible for handling presses of the checkbox\n */\nconst useCheckboxHandle = (ref, isChecked, setChecked, pressHandler) => {\n  return useImperativeHandle(\n    ref,\n    () => ({\n      // allows consumer to fetch the latest checked value\n      isChecked,\n\n      // allows consumer to toggle the checked value, which will\n      // also fire the pressHandler\n      setChecked: checked => {\n        setChecked(checked)\n        pressHandler({}, checked)\n      },\n    }),\n    [ ref, isChecked, setChecked, pressHandler ]\n  )\n}\n\n/**\n * CheckboxWrapper\n * Wraps the Passed in Checkbox Element\n * @param {Object} props - see PropTypes below\n * @param {string?} props.className - css class string\n * @param {boolean?} props.initChecked - the initial checked/unchecked value of Checkbox\n * @param {boolean?} props.checked - alias for initChecked\n * @param {Object | String | Array} props.children - react children\n * @param {string} props.elType - type of checkbox\n * @param {Component} props.Element - the which component used for the core checkbox ui. @see checkbox.js\n * @param {Component?} props.CheckIcon - an optional component that overrides the icon used in the checkbox\n * @param {boolean} props.disabled - disables checking and unchecking if true\n * @param {boolean} props.disableCheck - disables checking if true\n * @param {boolean} props.disableUncheck - disables unchecking if true\n * @param {boolean} props.allowAdjacentPress - if true, allows pressing a side component to toggle the checkbox\n * @param {boolean} props.isWeb - indicates current platform is web. Provide by checkbox.js\n * @param {(Component | string)?} props.LeftComponent - an optional component or string to render left of the checkbox\n * @param {string?} props.leftClassName - optional class name for the left component\n * @param {boolean} props.close - if true, side components will be rendered close to the checkbox. If false, spaced apart.\n * @param {Function?} props.onChange - callback fired when checkbox is toggled\n * @param {Function?} props.onValueChange - callback fired when checkbox is toggled\n * @param {(Component | string)?} props.RightComponent -  an optional component or string to render right of the checkbox\n * @param {string?} props.rightClassName - optional class name for the right component\n * @param {Object} props.styles - styles that overwrite default checkbox styles\n * @param {Component?} props.CheckboxComponent - an optional component that overrides the default checkbox element, passed the same props and styles\n * @param {string} props.type - theme type\n * @param {string} props.themePath - path to theme object\n * @param {boolean} props.value - alias for initChecked\n * @param {...rest} props.* - the remaining props are passed to Element\n */\nexport const CheckboxWrapper = forwardRef((props, ref) => {\n  const {\n    className,\n    initChecked,\n    checked,\n    children,\n    elType,\n    Element,\n    CheckIcon,\n    disabled,\n    disableCheck = false,\n    disableUncheck = false,\n    allowAdjacentPress = true,\n    isWeb,\n    LeftComponent,\n    leftClassName,\n    close,\n    onChange,\n    onValueChange,\n    RightComponent,\n    rightClassName,\n    styles,\n    CheckboxComponent,\n    type,\n    themePath,\n    value,\n    ...elProps\n  } = props\n\n  const initCheckedValue = toBool(checked || initChecked || value)\n\n  const [ isChecked, setChecked ] = useState(initCheckedValue)\n\n  // makes the pressHandler function for the checkbox.\n  // if disableCheck is true, prevents isChecked being set to true,\n  // if disableUncheck is true, prevents isChecked being set to false.\n  const pressHandler = useCheckboxPressHandler(\n    isChecked,\n    setChecked,\n    onChange || onValueChange, // support either callback name from consumer\n    { disableCheck, disableUncheck }\n  )\n\n  // by default, checkbox manages its own toggled state.\n  // however, if the consumer needs to control that, it can by passing\n  // in `ref`, then calling ref.current.setChecked to control the value\n  useCheckboxHandle(ref, isChecked, setChecked, onChange || onValueChange)\n\n  // determine if the handler can be fired, so long as the next check state is allowed\n  const canUseHandler =\n    !disabled &&\n    ((isChecked && !disableUncheck) || (!isChecked && !disableCheck))\n\n  const elThemePath =\n    themePath || `form.${elType}.${(close && 'close') || 'default'}`\n\n  const themeStyles = useThemePath(elThemePath, styles)\n  const disabledStyles = useThemePath(`form.${elType}.disabled`, themeStyles)\n  const activeStyles = useCheckedState(\n    isChecked,\n    canUseHandler ? themeStyles : disabledStyles\n  )\n\n  const typeClassName = useThemeTypeAsClass(\n    elThemePath || type,\n    'keg-checkbox',\n    className\n  )\n\n  // returns the right props to use\n  const pressHandlerProp = canUseHandler\n    ? getOnChangeHandler(isWeb, pressHandler)\n    : undefined\n\n  const ChildrenView = children && (\n    <View\n      className={typeClassName}\n      style={activeStyles.main}\n    >\n      <ChildrenComponent\n        className='keg-checkbox-container'\n        children={children}\n      />\n    </View>\n  )\n\n  return (\n    ChildrenView || (\n      <View\n        className={typeClassName}\n        style={activeStyles.main}\n      >\n        { LeftComponent && (\n          <SideComponent\n            className={useClassList('keg-checkbox-left', leftClassName)}\n            Component={LeftComponent}\n            style={activeStyles.content.left}\n            onPress={allowAdjacentPress && canUseHandler && pressHandler}\n          />\n        ) }\n\n        { CheckboxComponent ? (\n          renderFromType(CheckboxComponent, {\n            ...props,\n            styles: activeStyles.content,\n          })\n        ) : (\n          <Element\n            className='keg-checkbox-container'\n            elProps={elProps}\n            disabled={disabled}\n            styles={activeStyles.content}\n            CheckIcon={CheckIcon}\n            {...getChecked(isWeb, isChecked)}\n            {...pressHandlerProp}\n          />\n        ) }\n\n        { RightComponent && (\n          <SideComponent\n            className={useClassList('keg-checkbox-right', rightClassName)}\n            Component={RightComponent}\n            style={activeStyles.content.right}\n            onPress={allowAdjacentPress && canUseHandler && pressHandler}\n          />\n        ) }\n      </View>\n    )\n  )\n})\n\nCheckboxWrapper.propTypes = {\n  checked: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n  ]),\n  disabled: PropTypes.bool,\n  isWeb: PropTypes.bool,\n  Element: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.element,\n  ]),\n  LeftComponent: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.element,\n  ]),\n  RightComponent: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.element,\n  ]),\n  CheckboxComponent: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n    PropTypes.element,\n  ]),\n  CheckIcon: PropTypes.oneOfType([ PropTypes.func, PropTypes.element ]),\n  onChange: PropTypes.func,\n  onValueChange: PropTypes.func,\n  styles: PropTypes.object,\n  text: PropTypes.string,\n  themePath: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.bool,\n  disableCheck: PropTypes.bool,\n  disableUncheck: PropTypes.bool,\n  allowAdjacentPress: PropTypes.bool,\n}\n"],"names":["Check","props","React.createElement","SvgIcon","useCheckedState","isChecked","themeStyles","useMemo","content","area","get","indicator","useCheckboxPressHandler","setChecked","onChange","disableCheck","disableUncheck","useCallback","event","checkCall","SideComponent","className","Component","styles","style","onPress","sideProps","undefined","isStr","React","Text","renderFromType","ChildrenComponent","children","useCheckboxHandle","ref","pressHandler","useImperativeHandle","checked","CheckboxWrapper","forwardRef","initChecked","elType","Element","CheckIcon","disabled","allowAdjacentPress","isWeb","LeftComponent","leftClassName","close","onValueChange","RightComponent","rightClassName","CheckboxComponent","type","themePath","value","elProps","initCheckedValue","toBool","useState","canUseHandler","elThemePath","useThemePath","disabledStyles","activeStyles","typeClassName","useThemeTypeAsClass","pressHandlerProp","getOnChangeHandler","ChildrenView","View","main","useClassList","left","getChecked","right"],"mappings":"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"}