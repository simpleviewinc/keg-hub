{"version":3,"file":"item.js","sources":["../../../src/components/button/button.js","../../../src/components/form/scrollable/item/item.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get, isNum } from '@keg-hub/jsutils'\nimport { Touchable } from '../touchable'\nimport { Text } from '../typography/text'\nimport { useThemePath } from '../../hooks'\nimport { useThemeHover, useThemeActive } from '@keg-hub/re-theme'\nimport { getActiveOpacity, getPressHandler, renderFromType } from '../../utils'\nimport { useThemeTypeAsClass } from 'KegTypeAsClass'\n\n/**\n * Finds the child type and formats it in the proper type to be rendered\n * @param {Object|Array|string} Children - React components to render\n * @param {Object} props\n * @param {Object} props.styles - Custom styles passed into the component as a prop\n * @param {boolean} props.selectable - whether the text content is selectable or not\n *\n * @returns {React Component|Object|Array}\n */\nconst getChildren = (Children, { styles, selectable }) => {\n  return renderFromType(Children, { style: styles?.content, selectable }, Text)\n}\n\nconst checkDisabled = (mainStyles, btnStyles, disabled) => {\n  return disabled\n    ? { ...mainStyles, ...get(btnStyles, 'disabled.main') }\n    : mainStyles\n}\n\n/**\n * Button\n * @summary Custom button component. All props are optional\n *\n * @param {Object} props - see buttonPropTypes\n * @property {String} props.text - button text\n * @property {String} props.type - flat, text, outlined, contained; default 'flat'\n * @property {Object} props.style - custom style\n * @property {Function} props.onPress - function to do when button is pressed\n * @property {Boolean} [props.showFeedback=false] - Should opacity feebBack be shown when the button is pressed\n * @property {Boolean} props.disabled\n * @property {Object} props.children\n * @property {Number=} props.activeOpacity - add opacity value to active state\n * @property {Boolean=} props.disabled - disable button interaction. default false\n * @property {Boolean=} props.selectable - whether the button text is selectable or not. default false\n * @property {Object} props.ref - reference to native element\n *\n */\nexport const Button = React.forwardRef((props, ref) => {\n  const {\n    className,\n    children,\n    content,\n    onClick,\n    onPress,\n    styles,\n    showFeedback = false,\n    type = 'default',\n    themePath,\n    activeOpacity,\n    disabled = false,\n    selectable = false,\n    ...elProps\n  } = props\n\n  const btnStyles = useThemePath(\n    themePath || `button.contained.${type}`,\n    styles\n  )\n\n  const [ hoverRef, hoverStyles ] = useThemeHover(\n    get(btnStyles, 'default', {}),\n    get(btnStyles, 'hover'),\n    { ref }\n  )\n\n  const [ themeRef, themeStyles ] = useThemeActive(\n    hoverStyles,\n    get(btnStyles, 'active'),\n    { ref: hoverRef }\n  )\n\n  return (\n    <Touchable\n      accessibilityRole='button'\n      className={useThemeTypeAsClass(\n        themePath || type,\n        'keg-button',\n        className\n      )}\n      {...elProps}\n      disabled={disabled}\n      touchRef={themeRef}\n      showFeedback={isNum(activeOpacity) || showFeedback}\n      style={checkDisabled(themeStyles.main, btnStyles, disabled)}\n      children={getChildren(children || content, {\n        styles: themeStyles,\n        selectable,\n      })}\n      {...getPressHandler(false, onClick, onPress)}\n      {...getActiveOpacity(false, props, btnStyles)}\n    />\n  )\n})\n\nButton.propTypes = {\n  ...Touchable.propTypes,\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n  ]),\n  content: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n  ]),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  onPress: PropTypes.func,\n  styles: PropTypes.object,\n  themePath: PropTypes.string,\n  selectable: PropTypes.bool,\n  activeOpacity: PropTypes.number,\n  showFeedback: PropTypes.bool,\n}\n","import React, { useCallback } from 'react'\nimport { Button } from 'KegButton'\nimport { reStyle } from '@keg-hub/re-theme/reStyle'\nimport { noOp } from '@keg-hub/jsutils'\nimport PropTypes from 'prop-types'\n\n/**\n * A Button styled for the autocomplete\n */\nconst SelectButton = reStyle(\n  Button,\n  'styles'\n)((theme, props) => {\n  const {\n    colors: { palette },\n  } = theme\n\n  const content = {\n    color: palette.black01,\n    fontWeight: 'normal',\n    alignSelf: 'start',\n  }\n\n  const main = {\n    borderRadius: 0,\n    backgroundColor: palette.white01,\n  }\n\n  const highlighted = {\n    ...main,\n    backgroundColor: palette.gray01,\n  }\n\n  return {\n    default: {\n      content,\n      main: props.highlighted ? highlighted : main,\n    },\n    active: { content, main },\n    hover: {\n      content,\n      main: highlighted,\n    },\n  }\n})\n\n/**\n * Individual item row in ScrollableSelect\n * @param {Object} props.item - object of form { text, key }\n * @param {Function?} props.onSelect - callback called when this item is selected. Will be passed the item.\n * @param {Object?} props.styles - { main}\n */\nexport const SelectItem = React.forwardRef((props, ref) => {\n  const { item, onSelect = noOp, highlighted = false, styles } = props\n\n  const handlePress = useCallback(() => onSelect(item), [ item, onSelect ])\n\n  return (\n    <SelectButton\n      ref={ref}\n      content={item.text}\n      onPress={handlePress}\n      styles={styles}\n      highlighted={highlighted}\n    />\n  )\n})\n\nSelectItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  onSelect: PropTypes.func,\n  highlighted: PropTypes.bool,\n  styles: PropTypes.object,\n}\n"],"names":["getChildren","Children","styles","selectable","renderFromType","style","content","Text","checkDisabled","mainStyles","btnStyles","disabled","get","Button","React","forwardRef","props","ref","className","children","onClick","onPress","showFeedback","type","themePath","activeOpacity","elProps","useThemePath","useThemeHover","hoverRef","hoverStyles","useThemeActive","themeRef","themeStyles","Touchable","useThemeTypeAsClass","isNum","main","getPressHandler","getActiveOpacity","SelectButton","reStyle","theme","palette","colors","color","black01","fontWeight","alignSelf","borderRadius","backgroundColor","white01","highlighted","gray01","default","active","hover","SelectItem","item","onSelect","noOp","handlePress","useCallback","text"],"mappings":"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"}