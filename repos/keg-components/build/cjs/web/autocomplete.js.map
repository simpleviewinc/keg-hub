{"version":3,"file":"autocomplete.js","sources":["../../../src/components/form/autocomplete/autocomplete.js"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { noOpObj, noPropArr } from '@keg-hub/jsutils'\nimport { getTextFromChangeEvent } from 'KegUtils'\nimport { useAutocompleteItems } from 'KegHooks'\nimport { reStyle } from '@keg-hub/re-theme/reStyle'\nimport { ScrollableSelect } from '../scrollable/select/scrollableSelect'\nimport { View } from 'KegView'\nimport { AutocompleteInput } from './autocompleteInput'\nimport { withOutsideDetect } from 'KegHocs'\n\n/**\n * An absolutely-positioned scrollabale select\n */\nconst FloatingScrollableSelect = reStyle(\n  ScrollableSelect,\n  'styles'\n)(() => ({\n  main: { position: 'absolute', zIndex: 9999 },\n}))\n\n/**\n * View wrapped with out-of-bounds click detection.\n */\nconst AutocompleteView = withOutsideDetect(View)\n\n/**\n * Provides text input with autocomplete functionality. As user types, shows a menu of autocomplete options that contain user input as a substring.\n * Parent component must pass the total list of options (in autocompleteValues prop) for this to work.\n * @param {Object} props\n * @param {Array<string> | Array<Object>} props.values - array of possible items to use for autocomplete.\n *  - If it is Array<string>, any duplicates will be ignored.\n *  - If it is Array<object>, each object should be of form { text: string, key: string? },\n *    where key is an optional unique id that can distinguish duplicates\n * @param {Function?} props.onSelect - (optional) callback of form (text) => {...}, called when user selects a value from the autocomplete menu\n * @param {Function?} props.onChange - (optional) callback of form (text) => {...}, called when user types or selects a value. updates character by character\n * @param {String?} props.placeholder - (optional) placeholder text filled when no text has been inputted\n * @param {String?} props.text - (optional) initial value of the text in the input\n * @param {Object?} props.styles - (optional) style object for the root view of this component\n * @param {Object?} props.inputRef - (optional) a ref that will be assigned to the TextInput. Use this for obtaining access to TextInput methods like .clear()\n * @param {Number?} props.menuHeight - (optional) height of menu that shows autocomplete values\n * @param {*?} props.* - remaining props are passed straight through to the Input component\n */\nexport const Autocomplete = props => {\n  const {\n    onChange,\n    onSelect,\n    placeholder = '',\n    text = null,\n    styles = noOpObj,\n    inputRef = null,\n    values = noPropArr,\n    menuHeight,\n    ...inputProps\n  } = props\n\n  const [ inputText, updateText ] = useState(text || '')\n  const [ autocompleteItems, setSelectedItem, selectedItem ] =\n    useAutocompleteItems(inputText, values)\n\n  const onSelectItem = useCallback(\n    item => {\n      updateText(item?.text || '')\n      setSelectedItem(item)\n      item && onSelect?.(item)\n    },\n    [ setSelectedItem, updateText ]\n  )\n\n  const handleInputChange = useCallback(\n    event => {\n      const text = getTextFromChangeEvent(event)\n      updateText(text)\n      onChange?.(text)\n    },\n    [ onChange, updateText ]\n  )\n\n  const onOutsideClick = useCallback(() => {\n    // if the FloatingScrollableSelect is visible, hide it by resetting input\n    autocompleteItems.length && updateText(selectedItem?.text)\n  }, [ onSelectItem, autocompleteItems ])\n\n  return (\n    <AutocompleteView\n      style={styles?.main}\n      onOutsideClick={onOutsideClick}\n    >\n      <AutocompleteInput\n        highlightedIndex={selectedItem?.index}\n        highlightItem={setSelectedItem}\n        selectItem={onSelectItem}\n        items={autocompleteItems}\n        placeholder={placeholder}\n        onChange={handleInputChange}\n        value={inputText}\n        ref={inputRef}\n        style={styles?.content?.input}\n        {...inputProps}\n      />\n\n      { /* nest select in view so that it appears below the input and still absolute-positioned */ }\n      <View>\n        <FloatingScrollableSelect\n          height={menuHeight}\n          styles={styles?.content?.menu}\n          visible={autocompleteItems.length > 0}\n          items={autocompleteItems}\n          onSelect={onSelectItem}\n          selectedItem={selectedItem}\n          animationDuration={100}\n        />\n      </View>\n    </AutocompleteView>\n  )\n}\n\nAutocomplete.propTypes = {\n  values: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        text: PropTypes.string.isRequired,\n        key: PropTypes.string,\n      }),\n    ])\n  ),\n  onSelect: PropTypes.func,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  text: PropTypes.string,\n  styles: PropTypes.object,\n  inputRef: PropTypes.object,\n  menuHeight: PropTypes.number,\n}\n"],"names":["FloatingScrollableSelect","reStyle","ScrollableSelect","main","position","zIndex","AutocompleteView","withOutsideDetect","View","Autocomplete","props","onChange","onSelect","placeholder","text","styles","noOpObj","inputRef","values","noPropArr","menuHeight","inputProps","useState","inputText","updateText","useAutocompleteItems","autocompleteItems","setSelectedItem","selectedItem","onSelectItem","useCallback","item","handleInputChange","event","getTextFromChangeEvent","onOutsideClick","length","React","AutocompleteInput","index","content","input","menu"],"mappings":"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"}