{"version":3,"file":"container.js","sources":["../../../src/components/layout/container.js"],"sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n\nimport React, { useMemo } from 'react'\nimport { View } from 'KegView'\nimport PropTypes from 'prop-types'\nimport { getPlatform, getPressHandler } from '../../utils'\nimport { pickKeys, isArr, noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Checks the for width styles in the props styles object\n * @param {Object} style - passed in styles for the Container\n *\n * @return {boolean} - If a width style rule exists\n */\nconst useHasWidth = styles =>\n  useMemo(() => {\n    return (\n      styles\n        .map(style => {\n          return Boolean(\n            Object.keys(pickKeys(style, [ 'width', 'minWidth', 'maxWidth' ]))\n              .length\n          )\n        })\n        .indexOf(true) !== -1\n    )\n  }, styles)\n\n/**\n * Container\n * General Wrapper component that's use to build the Grid / Row / Column components\n * @param {Object} props - see PropTypes below\n *\n */\nexport const Container = ({\n  onPress,\n  onClick,\n  children,\n  flexDir,\n  size,\n  style = noPropObj,\n  ...props\n}) => {\n  const containerStyles = isArr(style) ? style : [style]\n  const hasWidth = useHasWidth(containerStyles)\n\n  // Get flex type based on size or style\n  const flexStyle =\n    flexDir === 'row'\n      ? { flexDirection: flexDir, flex: size ? size : hasWidth ? 0 : 1 }\n      : {}\n\n  return (\n    <View\n      {...props}\n      style={[ flexStyle, ...containerStyles ]}\n      {...getPressHandler(getPlatform(), onClick || onPress)}\n    >\n      { children }\n    </View>\n  )\n}\n\nContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n  ]),\n  flexDir: PropTypes.string,\n  onPress: PropTypes.func,\n  onClick: PropTypes.func,\n  size: PropTypes.number,\n  style: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n}\n"],"names":["useHasWidth","styles","useMemo","map","style","Boolean","Object","keys","pickKeys","length","indexOf","Container","onPress","onClick","children","flexDir","size","noPropObj","props","containerStyles","isArr","hasWidth","flexStyle","flexDirection","flex","React","View","getPressHandler","getPlatform"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAAC,MAAM;AAAA,SACxBC,aAAO,CAAC,YAAM;AACZ,WACED,MAAM,CACHE,GADH,CACO,UAAAC,KAAK,EAAI;AACZ,aAAOC,OAAO,CACZC,MAAM,CAACC,IAAP,CAAYC,gBAAQ,CAACJ,KAAD,EAAQ,CAAE,OAAF,EAAW,UAAX,EAAuB,UAAvB,CAAR,CAApB,EACGK,MAFS,CAAd;AAID,KANH,EAOGC,OAPH,CAOW,IAPX,MAOqB,CAAC,CARxB;AAUD,GAXM,EAWJT,MAXI,CADiB;AAAA,CAA1B;IAoBaU,SAAS,GAAG,SAAZA,SAAY,OAQnB;AAAA,MAPJC,OAOI,QAPJA,OAOI;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,wBAFJZ,KAEI;AAAA,MAFJA,KAEI,2BAFIa,iBAEJ;AAAA,MADDC,KACC;AACJ,MAAMC,eAAe,GAAGC,aAAK,CAAChB,KAAD,CAAL,GAAeA,KAAf,GAAuB,CAACA,KAAD,CAA/C;AACA,MAAMiB,QAAQ,GAAGrB,WAAW,CAACmB,eAAD,CAA5B,CAFI;AAKJ,MAAMG,SAAS,GACbP,OAAO,KAAK,KAAZ,GACI;AAAEQ,IAAAA,aAAa,EAAER,OAAjB;AAA0BS,IAAAA,IAAI,EAAER,IAAI,GAAGA,IAAH,GAAUK,QAAQ,GAAG,CAAH,GAAO;AAA7D,GADJ,GAEI,EAHN;AAKA,SACEI,6BAACC,SAAD,yCACMR,KADN;AAEE,IAAA,KAAK,GAAII,SAAJ,sDAAkBH,eAAlB;AAFP,KAGMQ,+BAAe,CAACC,uBAAW,EAAZ,EAAgBf,OAAO,IAAID,OAA3B,CAHrB,GAKIE,QALJ,CADF;AASD;;;;"}