{"version":3,"file":"useScrollClassName-84521282.js","sources":["../../../src/hooks/useScrollClassName/useScrollClassName.js"],"sourcesContent":["import { useRef, useCallback } from 'react'\nimport { getPlatform } from 'KegGetPlatform'\nimport { eitherArr, isFunc } from '@keg-hub/jsutils'\nimport { handleRefUpdate } from '../../utils/helpers/handleRefUpdate'\nimport { updateClassNames } from '../../utils/helpers/updateClassNames'\n\nconst isWeb = getPlatform() === 'web'\n\n/**\n * Custom hook to update the ScrollView with passed in classNames\n * <br/>Uses getScrollableNode and getInnerViewNode to get access to the Dom Nodes\n * @param {Array[string]} defClass - Default class to add to the component\n * @param {string|Array[string]} className - Class or an array of classes to add to the element\n * @param {string|Array[string]} innerClassName - Custom class name of the inner scroll component\n * @param {Object|function} ref - Ref object passed to the consuming component\n *\n * @returns {function} - Ref function to be added to the component\n */\nexport const useScrollClassName = (\n  defClass,\n  className,\n  innerClassName,\n  ref\n) => {\n  className = eitherArr(className, [className])\n  const classRef = useRef(className)\n\n  return useCallback(\n    nativeObject => {\n      const scrollResponder =\n        nativeObject && isFunc(nativeObject.getScrollResponder)\n          ? nativeObject.getScrollResponder()\n          : nativeObject\n\n      if (isWeb && scrollResponder) {\n        isFunc(scrollResponder.getScrollableNode) &&\n          updateClassNames(\n            scrollResponder.getScrollableNode(),\n            classRef,\n            defClass,\n            className\n          )\n\n        isFunc(scrollResponder.getInnerViewNode) &&\n          updateClassNames(\n            scrollResponder.getInnerViewNode(),\n            classRef,\n            `${defClass}-container`,\n            innerClassName\n          )\n      }\n\n      handleRefUpdate(ref, nativeObject)\n    },\n    [ defClass, className.join(' '), ref ]\n  )\n}\n"],"names":["useScrollClassName","defClass","className","innerClassName","ref","eitherArr","classRef","useRef","useCallback","nativeObject","scrollResponder","isFunc","getScrollResponder","getScrollableNode","updateClassNames","getInnerViewNode","handleRefUpdate","join"],"mappings":";;;;;;;IAkBaA,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,QADgC,EAEhCC,SAFgC,EAGhCC,cAHgC,EAIhCC,GAJgC,EAK7B;AACHF,EAAAA,SAAS,GAAGG,iBAAS,CAACH,SAAD,EAAY,CAACA,SAAD,CAAZ,CAArB;AACA,MAAMI,QAAQ,GAAGC,YAAM,CAACL,SAAD,CAAvB;AAEA,SAAOM,iBAAW,CAChB,UAAAC,YAAY,EAAI;AACd,QAAMC,eAAe,GACnBD,YAAY,IAAIE,cAAM,CAACF,YAAY,CAACG,kBAAd,CAAtB,GACIH,YAAY,CAACG,kBAAb,EADJ,GAEIH,YAHN;AAKA,QAAaC,eAAb,EAA8B;AAC5BC,MAAAA,cAAM,CAACD,eAAe,CAACG,iBAAjB,CAAN,IACEC,iCAAgB,CACdJ,eAAe,CAACG,iBAAhB,EADc,EAEdP,QAFc,EAGdL,QAHc,EAIdC,SAJc,CADlB;AAQAS,MAAAA,cAAM,CAACD,eAAe,CAACK,gBAAjB,CAAN,IACED,iCAAgB,CACdJ,eAAe,CAACK,gBAAhB,EADc,EAEdT,QAFc,YAGXL,QAHW,iBAIdE,cAJc,CADlB;AAOD;AAEDa,IAAAA,+BAAe,CAACZ,GAAD,EAAMK,YAAN,CAAf;AACD,GA1Be,EA2BhB,CAAER,QAAF,EAAYC,SAAS,CAACe,IAAV,CAAe,GAAf,CAAZ,EAAiCb,GAAjC,CA3BgB,CAAlB;AA6BD;;;;"}