{"version":3,"file":"svgIcon.native-f6027179.js","sources":["../../../src/components/svgIcon/svgIcon.native.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo } from 'react'\nimport Svg, { Path } from 'react-native-svg'\nimport { useTheme, useStyle } from '@keg-hub/re-theme'\nimport {\n  get,\n  deepMerge,\n  isArr,\n  noPropObj,\n  isStr,\n  eitherArr,\n} from '@keg-hub/jsutils'\nimport { getPlatform } from 'KegGetPlatform'\nconst isWeb = getPlatform() === 'web'\n\nconst defClass = 'keg-svg-icon'\n\n/**\n * Custom hook to check if the size prop is an array, and merge it. Otherwise just returns the style object\n * @param {Object|Array=} style - Style object used to apply custom styles to the component\n *\n * @returns {Object} - Merged style object\n */\nconst useIconStyle = style => {\n  return useMemo(() => {\n    return isArr(style) ? deepMerge(...style) : style\n  }, [style])\n}\n\n/**\n * Custom hook to find the size from the props and styles\n * @param {string=} size - Size of the Svg Component\n * @param {Object=} style - Style object used to apply custom styles to the component\n * @param {Object=} theme - Global theme object\n *\n * @returns {Object} - Contains the height and width props for the Svg element\n */\nconst useSize = (size, width, height, style, theme) => {\n  return useMemo(() => {\n    const iconSize = size || get(style, 'fontSize')\n    const themeSize = get(theme, 'typography.default.fontSize', 15) * 2\n    return {\n      height: height || iconSize || get(style, 'height', themeSize),\n      width: width || iconSize || get(style, 'width', themeSize),\n    }\n  }, [ size, width, height, style ])\n}\n\n/**\n * Custom hook to find the fill color from the props and styles\n * @param {string=} fill - Fill color of the path element\n * @param {string=} stroke - Color of the stroke for the path element\n * @param {string=} color - Color of the Svg component\n * @param {string} border - Used as the stroke color when no stroke prop is passed\n * @param {Object=} style - Style object used to apply custom styles to the component\n * @param {Object=} theme - Global theme object\n *\n * @returns {Object} - Contains the stroke and fill props for the path element\n */\nconst useColor = (fill, stroke, color, border, style, theme) => {\n  return useMemo(() => {\n    const themeColor = get(theme, 'typography.default.color')\n    return {\n      stroke:\n        stroke || border || style.border || color || style.color || themeColor,\n      fill: fill || color || style.color || stroke,\n    }\n  }, [ fill, stroke, color, border, style ])\n}\n\n/**\n * Custom hook to get the classes for the SVG component on web\n * @param {Array|string=} className - Class name(s) to add\n *\n * @returns {Object} - Contains a className prop if on a web platform, otherwise it's empty\n */\nconst useClassName = className => {\n  if (!isWeb) return noPropObj\n\n  const deps = eitherArr(className, [className]).join(' ')\n  return useMemo(() => {\n    const classes = isArr(className)\n      ? className.join(' ')\n      : isStr(className)\n        ? className\n        : ''\n    return {\n      className: classes.includes(defClass)\n        ? classes\n        : `${defClass} ${classes}`,\n    }\n  }, [deps])\n}\n\n/**\n * SvgIcon\n * @param {object} props\n * @param {string} props.border - Used as the stroke color when no stroke prop is passed\n * @param {string=} props.color - Color of the Svg component\n *                              - Used as the stroke color when no stroke prop is passed\n *                              - Used as the fill color when no fill prop is passed\n * @param {string=} props.clipRule - Svg rule for clipping\n * @param {string=} props.delta - Path definition for the Svg Component\n * @param {string=} props.fill - Fill color of the path element\n * @param {string=} props.fillRule - Svg rule for the fill attribute\n * @param {string=} props.size - Size of the Svg Component\n * @param {string=} props.stroke - Color of the stroke for the path element\n * @param {Object=} props.style - Style object used to apply custom styles to the component\n * @param {string=} props.style.border - Used as the stroke color when no stroke or border prop is passed\n * @param {string=} props.style.color - Used as the fill color when no fill or color prop is passed\n * @param {string=} props.svgFill - Fill color of the parent SVG element\n * @param {string=} props.viewBox - View box size of the parent SVG element\n *\n */\nexport const SvgIcon = React.forwardRef((props, ref) => {\n  const {\n    border,\n    className,\n    color,\n    clipRule,\n    delta,\n    fill,\n    fillRule,\n    height,\n    size,\n    stroke,\n    strokeWidth,\n    strokeLinecap,\n    strokeLinejoin,\n    style = noPropObj,\n    svgFill,\n    viewBox,\n    width,\n    ...attrs\n  } = props\n\n  const theme = useTheme()\n  const iconStyle = useIconStyle(style)\n  const sizeStyle = useSize(size, width, height, iconStyle, theme)\n  const svgStyles = useStyle(iconStyle, sizeStyle)\n  const colorStyle = useColor(fill, stroke, color, border, iconStyle, theme)\n  const classProps = useClassName(className)\n\n  return (\n    <Svg\n      {...attrs}\n      {...classProps}\n      fill={svgFill}\n      viewBox={viewBox}\n      style={svgStyles}\n    >\n      <Path\n        clipRule={clipRule}\n        d={delta}\n        fill={colorStyle.fill}\n        fillRule={fillRule}\n        stroke={colorStyle.stroke}\n        strokeWidth={strokeWidth}\n        strokeLinecap={strokeLinecap}\n        strokeLinejoin={strokeLinejoin}\n      />\n    </Svg>\n  )\n})\n\nSvgIcon.propTypes = {\n  border: PropTypes.string,\n  className: PropTypes.oneOfType([ PropTypes.string, PropTypes.array ]),\n  color: PropTypes.string,\n  clipRule: PropTypes.string,\n  delta: PropTypes.string,\n  fill: PropTypes.string,\n  fillRule: PropTypes.string,\n  size: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),\n  stroke: PropTypes.string,\n  style: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n  svgFill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\n"],"names":["useIconStyle","style","useMemo","isArr","deepMerge","useSize","size","width","height","theme","iconSize","get","themeSize","useColor","fill","stroke","color","border","themeColor","useClassName","className","noPropObj","SvgIcon","React","forwardRef","props","ref","clipRule","delta","fillRule","strokeWidth","strokeLinecap","strokeLinejoin","svgFill","viewBox","attrs","useTheme","iconStyle","sizeStyle","svgStyles","useStyle","colorStyle","classProps","Svg","Path"],"mappings":"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"}