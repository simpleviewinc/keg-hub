{"version":3,"file":"scrollView.js","sources":["../../../src/components/list/scrollView.native.js"],"sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport { ScrollView as RNScrollView } from 'react-native'\nimport { getPlatform } from 'KegGetPlatform'\nimport { eitherArr } from '@keg-hub/jsutils'\nimport { updateClassNames } from '../../utils/helpers/updateClassNames'\nimport { handleRefUpdate } from '../../utils/helpers/handleRefUpdate'\nimport PropTypes from 'prop-types'\n\nconst isWeb = getPlatform() === 'web'\n\n/**\n * Custom hook to update the ScrollView with passed in classNames\n * <br/>Uses getScrollableNode and getInnerViewNode to get access to the Dom Nodes\n * @param {Array[string]} defClass - Default class to add to the component\n * @param {string|Array[string]} className - Class or an array of classes to add to the element\n * @param {Object|function} ref - Ref object passed to the consuming component\n *\n * @returns {function} - Ref function to be added to the component\n */\nconst useScrollClassNames = (defClass, className, innerClassName, ref) => {\n  className = eitherArr(className, [className])\n  const classRef = useRef(className)\n\n  return useCallback(\n    scrollResponder => {\n      if (isWeb && scrollResponder) {\n        updateClassNames(\n          scrollResponder.getScrollableNode(),\n          classRef,\n          defClass,\n          className\n        )\n        updateClassNames(\n          scrollResponder.getInnerViewNode(),\n          classRef,\n          `${defClass}-container`,\n          innerClassName\n        )\n      }\n\n      handleRefUpdate(ref, scrollResponder)\n    },\n    [ defClass, className.join(' '), ref ]\n  )\n}\n\n/**\n * ScrollView\n * @summary Wrapper around React-Native scroll view export\n *\n * @param {Object} props - see View PropTypes\n * @property {String} props.className - Value to set the className to (web platform only)\n * @property {String} props.innerClassName - Value to set the innerClassName to (web platform only)\n *\n */\nexport const ScrollView = React.forwardRef(\n  ({ className, innerClassName, ...props }, ref) => {\n    const classRef = useScrollClassNames(\n      'keg-scrollview',\n      className,\n      innerClassName,\n      ref\n    )\n\n    return <RNScrollView\n      {...props}\n      ref={classRef}\n    />\n  }\n)\n\nScrollView.propTypes = {\n  ...RNScrollView.propTypes,\n  className: PropTypes.oneOfType([ PropTypes.string, PropTypes.array ]),\n  innerClassName: PropTypes.oneOfType([ PropTypes.string, PropTypes.array ]),\n}\n"],"names":["useScrollClassNames","defClass","className","innerClassName","ref","eitherArr","classRef","useRef","useCallback","scrollResponder","handleRefUpdate","join","ScrollView","React","forwardRef","props","RNScrollView"],"mappings":";;;;;;;;;;;;;AAmBA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAWC,SAAX,EAAsBC,cAAtB,EAAsCC,GAAtC,EAA8C;AACxEF,EAAAA,SAAS,GAAGG,iBAAS,CAACH,SAAD,EAAY,CAACA,SAAD,CAAZ,CAArB;AACA,MAAMI,QAAQ,GAAGC,YAAM,CAACL,SAAD,CAAvB;AAEA,SAAOM,iBAAW,CAChB,UAAAC,eAAe,EAAI;AAgBjBC,IAAAA,+BAAe,CAACN,GAAD,EAAMK,eAAN,CAAf;AACD,GAlBe,EAmBhB,CAAER,QAAF,EAAYC,SAAS,CAACS,IAAV,CAAe,GAAf,CAAZ,EAAiCP,GAAjC,CAnBgB,CAAlB;AAqBD,CAzBD;IAoCaQ,UAAU,GAAGC,cAAK,CAACC,UAAN,CACxB,gBAA0CV,GAA1C,EAAkD;AAAA,MAA/CF,SAA+C,QAA/CA,SAA+C;AAAA,MAApCC,cAAoC,QAApCA,cAAoC;AAAA,MAAjBY,KAAiB;AAChD,MAAMT,QAAQ,GAAGN,mBAAmB,CAClC,gBADkC,EAElCE,SAFkC,EAGlCC,cAHkC,EAIlCC,GAJkC,CAApC;AAOA,SAAOS,6BAACG,sBAAD,yCACDD,KADC;AAEL,IAAA,GAAG,EAAET;AAFA,KAAP;AAID,CAbuB;;;;"}