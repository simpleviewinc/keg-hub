{"version":3,"file":"usePressHandlers.js","sources":["../../../src/hooks/usePressHandlers.js"],"sourcesContent":["import { useMemo } from 'react'\nimport { validateFunctions } from '../utils'\n\n/**\n * @param {Boolean} isWeb - true if platform is web\n * @param {Function} handler - click/press handler\n * @param {Object} validFuncsMap - validation results for click/press handlers\n *\n * @returns {Object} the object to spread onto an pressable element to provide its change handlers\n */\nconst makeHandlerObject = (isWeb, handler, { onPress, onClick }) => {\n  const handlerName = isWeb ? 'onClick' : 'onPress'\n  return Boolean(onPress || onClick) ? { [handlerName]: handler } : {}\n}\n\n/**\n * Returns an an object containing the event handler(s) for a component that can be pressed/clicked.\n * This works across web and native, and it will make sure that defined handlers are called in the right\n * contexts. Returned handlers are memoized where it is helpful.\n *\n * @param {Boolean} isWeb - true if platform is web, false if native\n * @param {Object} handlers - object holding handlers (e.g. component's props object)\n * @param {Function} handlers.onPress - cb of form (event) => ...\n * @param {Function} handlers.onClick - cb of form (value) => ...\n *\n * @returns {Object} an object of change handler(s) to be spread to the pressable element.\n *\n * @example\n * const handlers = usePressHandlers(isWeb, { onClick, onPress })\n *\n * return <PressableComponent { ...handlers } />\n */\nexport const usePressHandlers = (isWeb, handlers = {}) => {\n  const { onPress, onClick } = handlers\n\n  return useMemo(() => {\n    const validFuncsMap = validateFunctions(handlers)\n\n    const handler = event => {\n      validFuncsMap.onPress && onPress(event)\n      validFuncsMap.onClick && onClick(event)\n    }\n\n    return makeHandlerObject(isWeb, handler, validFuncsMap)\n  }, [ onPress, onClick ])\n}\n"],"names":["makeHandlerObject","isWeb","handler","onPress","onClick","handlerName","Boolean","usePressHandlers","handlers","useMemo","validFuncsMap","validateFunctions","event"],"mappings":";;;;;;AAUA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,OAAR,QAA0C;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAClE,MAAMC,WAAW,GAAGJ,KAAK,GAAG,SAAH,GAAe,SAAxC;AACA,SAAOK,OAAO,CAACH,OAAO,IAAIC,OAAZ,CAAP,uBAAiCC,WAAjC,EAA+CH,OAA/C,IAA2D,EAAlE;AACD,CAHD;IAsBaK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,KAAD,EAA0B;AAAA,MAAlBO,QAAkB,uEAAP,EAAO;AAAA,MAChDL,OADgD,GAC3BK,QAD2B,CAChDL,OADgD;AAAA,MACvCC,OADuC,GAC3BI,QAD2B,CACvCJ,OADuC;AAGxD,SAAOK,OAAO,CAAC,YAAM;AACnB,QAAMC,aAAa,GAAGC,iBAAiB,CAACH,QAAD,CAAvC;AAEA,QAAMN,OAAO,GAAG,SAAVA,OAAU,CAAAU,KAAK,EAAI;AACvBF,MAAAA,aAAa,CAACP,OAAd,IAAyBA,OAAO,CAACS,KAAD,CAAhC;AACAF,MAAAA,aAAa,CAACN,OAAd,IAAyBA,OAAO,CAACQ,KAAD,CAAhC;AACD,KAHD;AAKA,WAAOZ,iBAAiB,CAACC,KAAD,EAAQC,OAAR,EAAiBQ,aAAjB,CAAxB;AACD,GATa,EASX,CAAEP,OAAF,EAAWC,OAAX,CATW,CAAd;AAUD;;;;"}