{"version":3,"file":"useSelectHandlers.js","sources":["../../../src/hooks/useSelectHandlers.js"],"sourcesContent":["import { useMemo } from 'react'\nimport { get } from '@keg-hub/jsutils'\nimport { validateFunctions } from '../utils'\n\n/**\n * @param {Function} handler - onChange handler\n * @param {Object} validFuncsMap - validation results for change handlers\n *\n * @returns {Object} the object to spread onto an Select element to provide its change handlers\n */\nconst makeHandlerObject = (handler, { onChange, onValueChange }) => {\n  return Boolean(onChange || onValueChange) ? { onChange: handler } : {}\n}\n\n/**\n * Returns an an object containing the event handler(s) for a Select component. This works\n * across web and native, and it will make sure that defined handlers are called in the right\n * contexts. Returned handlers are memoized where it is helpful.\n *\n * @param {Boolean} isWeb - true if platform is web, false if native\n * @param {Object} handlers - object holding handlers (e.g. component's props object)\n * @param {Function} handlers.onChange - cb of form (event) => ...\n * @param {Function} handlers.onValueChange - cb of form (value) => ...\n *\n * @returns {Object} an object of change handler(s) to be spread to the Select element.\n *\n * @example\n * const handlers = useSelectHandlers(isWeb, { onChange, onValueChange })\n *\n * return <SelectWrapperFoo { ...handlers } />\n */\nexport const useSelectHandlers = (handlers = {}) => {\n  const { onChange, onValueChange } = handlers\n\n  return useMemo(() => {\n    const validFuncMap = validateFunctions(handlers)\n\n    // create an onChange handler for the web-based select component that calls onChange and onValueChange (for web) correctly\n    const onChangeHandler = event => {\n      const value = get(event, 'target.value')\n      validFuncMap.onChange && onChange(event)\n      validFuncMap.onValueChange && onValueChange(value)\n    }\n\n    return makeHandlerObject(onChangeHandler, validFuncMap)\n  }, [ onChange, onValueChange ])\n}\n"],"names":["makeHandlerObject","handler","onChange","onValueChange","Boolean","useSelectHandlers","handlers","useMemo","validFuncMap","validateFunctions","onChangeHandler","event","value","get"],"mappings":";;;;;AAUA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,QAA0C;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AAClE,SAAOC,OAAO,CAACF,QAAQ,IAAIC,aAAb,CAAP,GAAqC;AAAED,IAAAA,QAAQ,EAAED;AAAZ,GAArC,GAA6D,EAApE;AACD,CAFD;IAqBaI,iBAAiB,GAAG,SAApBA,iBAAoB,GAAmB;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AAAA,MAC1CJ,QAD0C,GACdI,QADc,CAC1CJ,QAD0C;AAAA,MAChCC,aADgC,GACdG,QADc,CAChCH,aADgC;AAGlD,SAAOI,OAAO,CAAC,YAAM;AACnB,QAAMC,YAAY,GAAGC,iBAAiB,CAACH,QAAD,CAAtC,CADmB;AAInB,QAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,UAAMC,KAAK,GAAGC,GAAG,CAACF,KAAD,EAAQ,cAAR,CAAjB;AACAH,MAAAA,YAAY,CAACN,QAAb,IAAyBA,QAAQ,CAACS,KAAD,CAAjC;AACAH,MAAAA,YAAY,CAACL,aAAb,IAA8BA,aAAa,CAACS,KAAD,CAA3C;AACD,KAJD;AAMA,WAAOZ,iBAAiB,CAACU,eAAD,EAAkBF,YAAlB,CAAxB;AACD,GAXa,EAWX,CAAEN,QAAF,EAAYC,aAAZ,CAXW,CAAd;AAYD;;;;"}