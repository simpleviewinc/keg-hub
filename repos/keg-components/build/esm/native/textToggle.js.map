{"version":3,"file":"textToggle.js","sources":["../../../src/components/textToggle/textToggle.js"],"sourcesContent":["import React, { useState, useMemo, useCallback } from 'react'\nimport { Text } from '../typography/text'\nimport { Touchable } from '../touchable'\nimport { Drawer } from '../drawer'\nimport { View } from 'KegView'\nimport { useClassList } from 'KegClassList'\nimport { isValidComponent } from '../../utils'\nimport PropTypes from 'prop-types'\nimport { useStylesCallback } from '@keg-hub/re-theme'\nimport { LinearGradient } from 'KegLinearGradient'\nimport { isFunc } from '@keg-hub/jsutils'\n\n/**\n * build the styles object based on togglePosition\n * @param {object} theme\n * @param {object} styleHelper - of the form { togglePosition, styles }\n */\nconst buildStyles = (theme, styleHelper) => {\n  const textToggleStyles = theme.get(`textToggle`, styleHelper?.styles)\n\n  // default right position\n  let align = 'flex-end'\n  switch (styleHelper?.togglePosition) {\n  case 'left':\n    align = 'flex-start'\n    break\n  case 'center':\n    align = 'center'\n    break\n  }\n  return theme.get(textToggleStyles, {\n    main: {\n      alignItems: align,\n    },\n  })\n}\n\n/**\n * TextToggle\n * @param {object} props\n * @param {string} props.text - text to display as the content\n * @param {object=} props.styles\n * @param {boolean=} props.isExpandedInit - whether the content is expanded or not initially\n * @param {string=} props.className\n * @param {Function=} props.onToggle - optional. callback whenever the toggle component is pressed\n * @param {'left'|'center'|'right'=} props.togglePosition - optional. where to position the toggle component. default 'right'\n * @param {Number=} props.collapsedHeight - optional. height of the textview when collapsed\n * @param {Component=} props.CustomToggle - optional toggle component to use instead of the default\n * @param {string=} props.fadeColor - optional color for the fade on collapsed text\n * @param {string=} props.expandedToggleText - optional text for the button when it's expanded\n * @param {string=} props.collapsedToggleText - optional text for the button when it's collapsed\n */\nexport const TextToggle = props => {\n  const {\n    text,\n    styles,\n    isExpandedInit = false,\n    className,\n    CustomToggle,\n    onToggle,\n    togglePosition = 'right',\n    collapsedHeight = 100,\n    fadeColor = 'white',\n    collapsedToggleText = 'show more',\n    expandedToggleText = 'show less',\n  } = props\n\n  if (!text) return null\n  const [ expanded, setExpanded ] = useState(isExpandedInit)\n\n  const styleHelper = useMemo(\n    () => ({\n      styles,\n      togglePosition,\n    }),\n    [ styles, togglePosition ]\n  )\n\n  const mainStyle = useStylesCallback(\n    buildStyles,\n    [ togglePosition, styles ],\n    styleHelper\n  )\n\n  const [ textMaxHeight, setTextMaxHeight ] = useState(0)\n\n  const showToggle = shouldDisplayToggler(collapsedHeight, textMaxHeight)\n\n  const onToggleCb = useCallback(() => {\n    setExpanded(!expanded)\n    isFunc(onToggle) && onToggle(!expanded)\n  }, [ expanded, onToggle ])\n\n  const onTextLayout = useCallback(\n    event => {\n      const height = event.nativeEvent.layout.height\n      if (textMaxHeight === height) return\n      setTextMaxHeight(height)\n    },\n    [ textMaxHeight, setTextMaxHeight ]\n  )\n\n  return (\n    <View\n      style={[mainStyle.main]}\n      className={useClassList('keg-text-toggle', className)}\n    >\n      <Drawer\n        collapsedHeight={collapsedHeight}\n        toggled={expanded}\n      >\n        <Text\n          style={mainStyle.text}\n          onLayout={onTextLayout}\n        >\n          { text }\n        </Text>\n      </Drawer>\n\n      { showToggle && !expanded && (\n        <LinearGradient\n          colors={[ 'rgba(255,255,255,0)', fadeColor ]}\n          style={mainStyle.linearGradient}\n        />\n      ) }\n      { showToggle && (\n        <ToggleComponent\n          onPress={onToggleCb}\n          isExpanded={expanded}\n          styles={mainStyle.toggleComponent}\n          CustomComponent={CustomToggle}\n          collapsedToggleText={collapsedToggleText}\n          expandedToggleText={expandedToggleText}\n        />\n      ) }\n    </View>\n  )\n}\n\n/**\n * only show toggle if user-defined height DNE\n *  or the given text does not fit in the user-defined height\n * @param {number=} minHeight\n * @param {number=} textMaxHeight\n *\n * @return {boolean}\n */\nconst shouldDisplayToggler = (minHeight, textMaxHeight) => {\n  return !minHeight || textMaxHeight > minHeight\n}\n\n/**\n * ToggleComponent\n * @param {object} props\n * @param {Function} props.onPress - when the component is pressed\n * @param {object} props.styles\n * @param {Component=} props.CustomComponent - optional Component to override the default text component\n * @param {boolean} props.isExpanded - whether to show expanded state or not\n * @param {string} props.expandedToggleText - optional text for the button when it's expanded\n * @param {string} props.collapsedToggleText - optional text for the button when it's collapsed\n */\nconst ToggleComponent = ({\n  onPress,\n  styles,\n  CustomComponent,\n  isExpanded,\n  expandedToggleText,\n  collapsedToggleText,\n}) => {\n  const defaultText = isExpanded ? expandedToggleText : collapsedToggleText\n\n  return (\n    <Touchable\n      style={styles?.main}\n      onPress={onPress}\n    >\n      { isValidComponent(CustomComponent) ? (\n        <CustomComponent isExpanded={isExpanded} />\n      ) : (\n        <Text style={styles?.text}>{ defaultText }</Text>\n      ) }\n    </Touchable>\n  )\n}\n\nTextToggle.propTypes = {\n  text: PropTypes.string,\n  isExpandedInit: PropTypes.bool,\n  styles: PropTypes.object,\n  className: PropTypes.string,\n  CustomToggle: PropTypes.oneOfType([ PropTypes.func, PropTypes.elementType ]),\n  onToggle: PropTypes.func,\n  togglePosition: PropTypes.oneOf([ 'left', 'center', 'right' ]),\n  collapsedHeight: PropTypes.number,\n  fadeColor: PropTypes.string,\n  expandedToggleText: PropTypes.string,\n  collapsedToggleText: PropTypes.string,\n}\n"],"names":["buildStyles","theme","styleHelper","textToggleStyles","get","styles","align","togglePosition","main","alignItems","TextToggle","props","text","isExpandedInit","className","CustomToggle","onToggle","collapsedHeight","fadeColor","collapsedToggleText","expandedToggleText","useState","expanded","setExpanded","useMemo","mainStyle","useStylesCallback","textMaxHeight","setTextMaxHeight","showToggle","shouldDisplayToggler","onToggleCb","useCallback","isFunc","onTextLayout","event","height","nativeEvent","layout","React","useClassList","linearGradient","toggleComponent","minHeight","ToggleComponent","onPress","CustomComponent","isExpanded","defaultText","isValidComponent"],"mappings":"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"}