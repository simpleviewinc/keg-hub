{"version":3,"file":"useChildrenWithRefs.js","sources":["../../../src/hooks/useChildrenWithRefs.js"],"sourcesContent":["import React, { useRef, useMemo, useCallback } from 'react'\nimport { handleRefUpdate } from '../utils/helpers/handleRefUpdate'\n\n/**\n * Returns the dynamic props object for the child\n * @param {Object<string, RefObject>} childRefs - the map of child refs\n * @param {ReactElement} child - the child component\n * @param {number} index - the index the child is rendered at (only used if child doesn't have a `key` defined)\n */\nconst buildPropsForChild = (childRefs, child, index) => {\n  // the ref-setter for each child will make use of that child's key identifier,\n  // or the index if the key is not defined\n  const key = child?.key || index || child\n  const existingRef = child?.ref\n  return {\n    key,\n    ref: childRef => {\n      handleRefUpdate(existingRef, childRef)\n      childRefs.current[key] = childRef\n    },\n  }\n}\n\n/**\n * Returns a memoized function for cloning a child react element\n * @param {RefObject<Object>} childRefs - the ref to the object of child refs\n * @return {Function} - the fn to clone a child\n */\nconst useCloneChildCallback = childRefs =>\n  useCallback(\n    (child, index = 0) => {\n      const props = buildPropsForChild(childRefs, child, index)\n      return React.isValidElement(child)\n        ? React.cloneElement(child, props)\n        : child\n    },\n    [childRefs]\n  )\n\n/**\n * If `enable` is true, returns a cloned array of the children, each with the\n * ref props set. Otherwise, returns the children unmodified. If the refs props were used,\n * the child refs will be accessible in a ref object in the return tuple. Also handles\n * merging any existing ref props the consumer defined.\n *\n * Notes:\n *  - it's assumed that the children\n * @param {*} children\n * @param {boolean?} enable - whether to actually clone the children with ref props or not. Defaults to true. We use this because hooks should not be called conditionally.\n * @return {Array<children, RefObject<Object<string, RefObject>>>} - an array for destructuring:\n *  [ children, childRefs ]\n * @example\n * const [ updatedChildren, childRefs ] = useChildrenWithRefs(children)\n * const doSomethingWithChildRefs = () => Object.values(childRefs.current)\n *  .map(ref => doSomething(ref.current))\n * return (\n *  <>\n *    <Button onPress={doSomethingWithChildRefs} />\n *    { updatedChildren }\n *  </>\n * )\n */\nexport const useChildrenWithRefs = (children, enable = true) => {\n  // Store a map of child keys mapped to their refs.\n  // The value is an object, not an array, because using an array\n  // could quickly fill up with duplicate refs\n  const childRefs = useRef({})\n\n  // function to clone a child with the correct props\n  const cloneChild = useCloneChildCallback(childRefs)\n\n  const updatedChildren = useMemo(() => {\n    // if enabled, clone the children, otherwise just return them\n    return enable\n      ? React.Children.count(children) > 1\n          ? children.map(cloneChild)\n          : cloneChild(children)\n      : children\n  }, [ enable, children ])\n\n  return [ updatedChildren, childRefs ]\n}\n"],"names":["buildPropsForChild","childRefs","child","index","key","existingRef","ref","childRef","handleRefUpdate","current","useCloneChildCallback","useCallback","props","React","isValidElement","cloneElement","useChildrenWithRefs","children","enable","useRef","cloneChild","updatedChildren","useMemo","Children","count","map"],"mappings":";;;;AASA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,KAAnB,EAA6B;AAGtD,MAAMC,GAAG,GAAG,CAAAF,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,GAAP,KAAcD,KAAd,IAAuBD,KAAnC;AACA,MAAMG,WAAW,GAAGH,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEI,GAA3B;AACA,SAAO;AACLF,IAAAA,GAAG,EAAHA,GADK;AAELE,IAAAA,GAAG,EAAE,aAAAC,QAAQ,EAAI;AACfC,MAAAA,eAAe,CAACH,WAAD,EAAcE,QAAd,CAAf;AACAN,MAAAA,SAAS,CAACQ,OAAV,CAAkBL,GAAlB,IAAyBG,QAAzB;AACD;AALI,GAAP;AAOD,CAZD;AAmBA,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAT,SAAS;AAAA,SACrCU,WAAW,CACT,UAACT,KAAD,EAAsB;AAAA,QAAdC,KAAc,uEAAN,CAAM;AACpB,QAAMS,KAAK,GAAGZ,kBAAkB,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,KAAnB,CAAhC;AACA,WAAOU,cAAK,CAACC,cAAN,CAAqBZ,KAArB,IACHW,cAAK,CAACE,YAAN,CAAmBb,KAAnB,EAA0BU,KAA1B,CADG,GAEHV,KAFJ;AAGD,GANQ,EAOT,CAACD,SAAD,CAPS,CAD0B;AAAA,CAAvC;IAkCae,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAA6B;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;AAI9D,MAAMjB,SAAS,GAAGkB,MAAM,CAAC,EAAD,CAAxB,CAJ8D;AAO9D,MAAMC,UAAU,GAAGV,qBAAqB,CAACT,SAAD,CAAxC;AAEA,MAAMoB,eAAe,GAAGC,OAAO,CAAC,YAAM;AAEpC,WAAOJ,MAAM,GACTL,cAAK,CAACU,QAAN,CAAeC,KAAf,CAAqBP,QAArB,IAAiC,CAAjC,GACIA,QAAQ,CAACQ,GAAT,CAAaL,UAAb,CADJ,GAEIA,UAAU,CAACH,QAAD,CAHL,GAITA,QAJJ;AAKD,GAP8B,EAO5B,CAAEC,MAAF,EAAUD,QAAV,CAP4B,CAA/B;AASA,SAAO,CAAEI,eAAF,EAAmBpB,SAAnB,CAAP;AACD;;;;"}