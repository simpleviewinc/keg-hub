{"version":3,"file":"drawer.js","sources":["../../../src/components/drawer/drawer.js"],"sourcesContent":["import { View } from '../view'\nimport PropTypes from 'prop-types'\nimport { get } from '@keg-hub/jsutils'\nimport { useThemePath } from '../../hooks'\nimport { noOpObj } from '@keg-hub/jsutils'\nimport { Animated } from 'react-native'\nimport { useClassName } from 'KegClassName'\nimport React, { useState, useLayoutEffect, useCallback, useRef } from 'react'\nimport { isValidComponent } from '../../utils/validate/isValidComponent'\n/**\n * Checks if the animation should NOT run\n * @param {boolean} toggled - Current state of the Drawer toggled open\n * @param {number} current - Current height of the Drawer / animated.value\n * @param {number} contentMaxHeight\n * @param {number} collapsedHeight\n *\n * @returns {boolean} - If the animation should NOT run\n */\nconst noAnimate = (toggled, current, collapsedHeight, contentMaxHeight) =>\n  (!toggled && current === collapsedHeight) ||\n  (toggled && current === contentMaxHeight)\n\n/**\n * Drawer\n * @param {Object} props - props passed from parent component\n * @param {Function|Component} props.children - Child components placed inside the drawer\n * @param {Number=} props.collapsedHeight - optional. height of the collapsed view\n * @param {string=} props.className\n * @param {Function|Component} props.Element - Child Element of the Drawer. Overrides the default children prop\n * @param {string} props.type - Animation type from the Animated API that accepts an animated config\n * @param {Object} props.config - Animation config object passed on to the Animated type method\n * @param {Object} props.styles - Custom styles to applied to the slider\n * @param {boolean} props.toggled - Is the slider toggled open\n * @param {boolean} props.* - All other props passed on to the Element Component prop if it exists\n *\n * @returns {Component} - Drawer Component\n */\nexport const Drawer = props => {\n  const {\n    Element,\n    styles,\n    toggled,\n    className,\n    type = 'timing',\n    config = noOpObj,\n    collapsedHeight = 0,\n    ...childProps\n  } = props\n\n  // Define the default max height as a ref\n  const contentMaxHeight = useRef(null)\n\n  // Define the animated value as a ref\n  const [ animation, setAnimation ] = useState(\n    new Animated.Value(collapsedHeight)\n  )\n\n  // Define a helper to update the total max height of the slider\n  // Gets called from the onLayout callback of the View wrapper\n  const setMaxHeight = useCallback(\n    event => {\n      const maxHeight = event.nativeEvent.layout.height\n      if (contentMaxHeight.current === maxHeight) return\n\n      contentMaxHeight.current = maxHeight\n      toggled && setAnimation(new Animated.Value(maxHeight))\n    },\n    [ contentMaxHeight, toggled, setAnimation ]\n  )\n\n  // Use useLayoutEffect to check if the slider should be animated\n  // Within the hook, toggled flag defines how to update the animated value\n  // To Open: toggled === true === should animate open\n  // To Close: toggled === false === should animate close\n  useLayoutEffect(() => {\n    // Check if we should animate the slider\n    // If the values have not changed, no need to animate\n    if (\n      noAnimate(\n        toggled,\n        animation._value,\n        collapsedHeight,\n        contentMaxHeight.current\n      )\n    )\n      return\n    // Define the from and to values for the animation based on toggled flag\n    const heightChanges = toggled\n      ? { from: collapsedHeight, to: contentMaxHeight.current }\n      : { from: contentMaxHeight.current, to: collapsedHeight }\n\n    // Update the animation value to animate from\n    animation.setValue(heightChanges.from)\n    // Start the animation, from value ==> to value\n    const animationConfig = config\n      ? { ...config, toValue: heightChanges.to }\n      : { toValue: heightChanges.to }\n    Animated[type](animation, animationConfig).start()\n\n    // Add toggled as a dep, so anytime it changes, we run the hook code\n  }, [ toggled, type, config, collapsedHeight ])\n\n  const drawerStyles = useThemePath(`drawer`, styles)\n  const classRef = useClassName('keg-drawer', className)\n\n  return (\n    <Animated.View\n      ref={classRef}\n      style={[ drawerStyles.main, get(styles, 'main'), { maxHeight: animation }]}\n    >\n      <View\n        className='keg-drawer-content'\n        onLayout={setMaxHeight}\n        style={get(styles, 'content')}\n      >\n        { isValidComponent(Element) ? (\n          <Element\n            {...childProps}\n            styles={styles}\n          />\n        ) : (\n          props.children\n        ) }\n      </View>\n    </Animated.View>\n  )\n}\n\nDrawer.propTypes = {\n  className: PropTypes.oneOfType([ PropTypes.array, PropTypes.string ]),\n  config: PropTypes.object,\n  Element: PropTypes.oneOfType([ PropTypes.func, PropTypes.elementType ]),\n  styles: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n  toggled: PropTypes.bool,\n  type: PropTypes.oneOf([ 'decay', 'spring', 'timing' ]),\n  collapsedHeight: PropTypes.number,\n}\n"],"names":["noAnimate","toggled","current","collapsedHeight","contentMaxHeight","Drawer","props","Element","styles","className","type","config","noOpObj","childProps","useRef","useState","Animated","Value","animation","setAnimation","setMaxHeight","useCallback","event","maxHeight","nativeEvent","layout","height","useLayoutEffect","_value","heightChanges","from","to","setValue","animationConfig","toValue","start","drawerStyles","useThemePath","classRef","useClassName","React","main","get","isValidComponent","children"],"mappings":"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"}