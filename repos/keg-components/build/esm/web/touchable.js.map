{"version":3,"file":"touchable.js","sources":["../../../src/components/touchable/touchable.native.js","../../../src/components/touchable/touchable.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Platform,\n  TouchableOpacity,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n} from 'react-native'\nimport { useClassName } from 'KegClassName'\n\nconst TouchableComp =\n  Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity\n\n/**\n * Touchable\n * @summary Custom Touch component. All props are optional\n *\n * @param {Object} props - see touchablePropTypes\n * @property {String} props.className - Value to set the className to (web platform only)\n * @property {Object} props.style - custom style - Set inline with the style prop\n * @property {Function} props.onPress - function to do when button is pressed\n * @property {Object} props.children - Child components of the component\n * @property {Object} props.ref - reference to native element\n *\n */\nexport const Touchable = React.forwardRef((props, ref) => {\n  const { className, showFeedback = true, touchRef, ...attrs } = props\n  const Component = showFeedback ? TouchableComp : TouchableWithoutFeedback\n  const classRef = useClassName('keg-touchable', className, touchRef || ref)\n\n  return <Component\n    accessible={true}\n    {...attrs}\n    ref={classRef}\n  />\n})\n\nTouchable.propTypes = {\n  ...TouchableComp.propTypes,\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n  ]),\n  className: PropTypes.oneOfType([ PropTypes.string, PropTypes.array ]),\n  onClick: PropTypes.func,\n  onPress: PropTypes.func,\n  ref: PropTypes.object,\n  styles: PropTypes.object,\n  showFeedback: PropTypes.bool,\n}\n","import React from 'react'\nimport { Touchable as KegTouchable } from './touchable.native'\nimport { StyleInjector } from '@keg-hub/re-theme/styleInjector'\n\n/**\n * Touchable\n * @summary Touchable component that allows interactions based on touch. All props are optional\n *\n * @param {Object} props - see View PropTypes\n * @property {String} props.className - Value to set the className to (web platform only)\n *\n */\nexport const Touchable = StyleInjector(KegTouchable, {\n  displayName: 'Touchable',\n  className: 'keg-touchable',\n  // Important rules should include the prefixed version\n  // Because important rules are checked after going through the prefixer\n  // Important rules have `!important` added to them to allow overwriting the style attribute\n  important: [\n    'transitionDuration',\n    'WebkitTransitionDuration',\n  ],\n})\n\nTouchable.propTypes = KegTouchable.propTypes\n"],"names":["TouchableComp","Platform","OS","TouchableNativeFeedback","TouchableOpacity","Touchable","React","forwardRef","props","ref","className","showFeedback","touchRef","attrs","Component","TouchableWithoutFeedback","classRef","useClassName","StyleInjector","KegTouchable","displayName","important","propTypes"],"mappings":";;;;;;;;;;AAUA,IAAMA,aAAa,GACjBC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BC,uBAA5B,GAAsDC,gBADxD;AAeO,IAAMC,SAAS,GAAGC,cAAK,CAACC,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAAA,MAChDC,SADgD,GACOF,KADP,CAChDE,SADgD;AAAA,4BACOF,KADP,CACrCG,YADqC;AAAA,MACrCA,YADqC,oCACtB,IADsB;AAAA,MAChBC,QADgB,GACOJ,KADP,CAChBI,QADgB;AAAA,MACHC,KADG,4BACOL,KADP;AAExD,MAAMM,SAAS,GAAGH,YAAY,GAAGX,aAAH,GAAmBe,wBAAjD;AACA,MAAMC,QAAQ,GAAGC,YAAY,CAAC,eAAD,EAAkBP,SAAlB,EAA6BE,QAAQ,IAAIH,GAAzC,CAA7B;AAEA,SAAOH,6BAAC,SAAD;AACL,IAAA,UAAU,EAAE;AADP,KAEDO,KAFC;AAGL,IAAA,GAAG,EAAEG;AAHA,KAAP;AAKD,CAVwB,CAAlB;;ICbMX,WAAS,GAAGa,aAAa,CAACC,SAAD,EAAe;AACnDC,EAAAA,WAAW,EAAE,WADsC;AAEnDV,EAAAA,SAAS,EAAE,eAFwC;AAMnDW,EAAAA,SAAS,EAAE,CACT,oBADS,EAET,0BAFS;AANwC,CAAf;AAYtChB,WAAS,CAACiB,SAAV,GAAsBH,SAAY,CAACG,SAAnC;;;;"}