{"version":3,"file":"useThemeTypeAsClass.js","sources":["../../../src/hooks/useThemeTypeAsClass/useThemeTypeAsClass.js"],"sourcesContent":["import { useMemo } from 'react'\nimport { get, isArr, eitherArr, noOpObj } from '@keg-hub/jsutils'\nimport { colors } from '../../theme/colors'\nimport { useClassList } from 'KegClassList'\n\n/**\n * Uses the surfaces defined in the colors to build surface specific classes for\n * @param {string} themeLoc - Either the type or themePath passed to the component\n * @param {string} defClass - The default reference to use for the class\n *\n * @returns {Array<string>} - Built classList based on surfaces and themeLoc\n */\nconst useThemeType = (themeLoc, defClass) => {\n  return useMemo(() => {\n    const defClassArr = eitherArr(defClass, [defClass])\n\n    if (!themeLoc) return defClassArr\n\n    const themeSplit = themeLoc.split('.')\n    const surface = themeSplit.pop()\n    const typeRef = themeSplit.pop()\n    const surfaces = Object.keys(get(colors, 'surface', noOpObj))\n    return typeRef && surfaces.includes(surface)\n      ? [ `${defClass}-${typeRef}`, surface ]\n      : surface\n        ? [`${defClass}-${surface}`]\n        : defClassArr\n  }, [ themeLoc, defClass ])\n}\n\n/**\n * Helper hook to call get the theme type then use that to create the classList\n * @param {string} themeLoc - Either the type or themePath passed to the component\n * @param {string} defClass - The default class for the component\n * @param {Array|string} className - Custom class name passed to the component\n *\n * @returns {Array<string>} - Built classList response from useClassList\n */\nexport const useThemeTypeAsClass = (themeLoc = '', defClass, className) => {\n  const themeTypeCls = useThemeType(themeLoc, defClass)\n  const classList = isArr(className)\n    ? className.concat(themeTypeCls)\n    : [ ...themeTypeCls, className ]\n\n  return useClassList(defClass, classList)\n}\n"],"names":["useThemeType","themeLoc","defClass","useMemo","defClassArr","eitherArr","themeSplit","split","surface","pop","typeRef","surfaces","Object","keys","get","colors","noOpObj","includes","useThemeTypeAsClass","className","themeTypeCls","classList","isArr","concat","useClassList"],"mappings":";;;;;;;;AAYA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3C,SAAOC,OAAO,CAAC,YAAM;AACnB,QAAMC,WAAW,GAAGC,SAAS,CAACH,QAAD,EAAW,CAACA,QAAD,CAAX,CAA7B;AAEA,QAAI,CAACD,QAAL,EAAe,OAAOG,WAAP;AAEf,QAAME,UAAU,GAAGL,QAAQ,CAACM,KAAT,CAAe,GAAf,CAAnB;AACA,QAAMC,OAAO,GAAGF,UAAU,CAACG,GAAX,EAAhB;AACA,QAAMC,OAAO,GAAGJ,UAAU,CAACG,GAAX,EAAhB;AACA,QAAME,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYC,GAAG,CAACC,MAAD,EAAS,SAAT,EAAoBC,OAApB,CAAf,CAAjB;AACA,WAAON,OAAO,IAAIC,QAAQ,CAACM,QAAT,CAAkBT,OAAlB,CAAX,GACH,WAAKN,QAAL,cAAiBQ,OAAjB,GAA4BF,OAA5B,CADG,GAEHA,OAAO,GACL,WAAIN,QAAJ,cAAgBM,OAAhB,EADK,GAELJ,WAJN;AAKD,GAda,EAcX,CAAEH,QAAF,EAAYC,QAAZ,CAdW,CAAd;AAeD,CAhBD;IA0BagB,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAwC;AAAA,MAAvCjB,QAAuC,uEAA5B,EAA4B;AAAA,MAAxBC,QAAwB;AAAA,MAAdiB,SAAc;AACzE,MAAMC,YAAY,GAAGpB,YAAY,CAACC,QAAD,EAAWC,QAAX,CAAjC;AACA,MAAMmB,SAAS,GAAGC,KAAK,CAACH,SAAD,CAAL,GACdA,SAAS,CAACI,MAAV,CAAiBH,YAAjB,CADc,gCAETA,YAFS,IAEKD,SAFL,EAAlB;AAIA,SAAOK,YAAY,CAACtB,QAAD,EAAWmB,SAAX,CAAnB;AACD;;;;"}