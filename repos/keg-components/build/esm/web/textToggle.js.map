{"version":3,"file":"textToggle.js","sources":["../../../src/components/linearGradient/linearGradient.js","../../../src/components/textToggle/textToggle.js"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { View } from 'KegView'\nimport { useClassList } from 'KegClassList'\nimport { noPropArr } from '@keg-hub/jsutils'\nimport PropTypes from 'prop-types'\n\n/**\n * converted from https://github.com/react-native-web-community/react-native-web-linear-gradient\n * see this link for detailed info on each prop\n *     - https://github.com/https://docs.expo.io/versions/latest/sdk/linear-gradient/\n *\n * @param {object} props\n * @param {Array=} props.locations - An optional array of numbers defining the location of each gradient color stop\n * @param {Array} props.colors - An array of at least two color values that represent gradient colors. Example: ['red', 'blue']\n * @param {{x: number, y:number}=} props.start - An optional object of the following type: { x: number, y: number }\n * @param {{x: number, y:number}=} props.end - Same as start, but for the end of the gradient.\n * @param {boolean=} props.useAngle - used to turn on/off angle based calculation (as opposed to start/end). uses angleCenter and angle prop\n * @param {{x: number, y:number}=} props.angleCenter - the center point of the angle\n * @param {Number} props.angle - is the angle in degrees\n * @param {Component} props.children\n * @param {object} props.style\n * @param {string=} props.className\n */\nexport const LinearGradient = props => {\n  const {\n    start = {\n      x: 0.5,\n      y: 0,\n    },\n    end = {\n      x: 0.5,\n      y: 1,\n    },\n    colors = noPropArr,\n    locations = noPropArr,\n    useAngle = false,\n    angleCenter,\n    angle = 0,\n    style,\n    children,\n    className,\n    ...otherProps\n  } = props\n\n  const [ width, setWidth ] = useState(1)\n  const [ height, setHeight ] = useState(1)\n\n  const measure = useCallback(\n    ({ nativeEvent }) => {\n      setWidth(nativeEvent.layout.width)\n      setHeight(nativeEvent.layout.height)\n    },\n    [ setWidth, setHeight ]\n  )\n\n  const newAngle =\n    useAngle && angle\n      ? `${angle}deg`\n      : calculateAngle(width, height, start, end)\n\n  return (\n    <View\n      className={useClassList(`keg-linear-gradient`, className)}\n      {...otherProps}\n      style={[\n        style,\n        {\n          backgroundImage: `linear-gradient(${newAngle},${getColors(\n            colors,\n            locations\n          )})`,\n        },\n      ]}\n      onLayout={measure}\n    >\n      { children }\n    </View>\n  )\n}\n\n/**\n * calculateAngle\n * @param {Number} width\n * @param {Number} height\n * @param {{x: number, y:number}=} start - An optional object of the following type: { x: number, y: number }\n * @param {{x: number, y:number}=} end - Same as start, but for the end of the gradient.\n */\nconst calculateAngle = (width, height, start, end) => {\n  // Math.atan2 handles Infinity\n  const newAngle =\n    Math.atan2(width * (end.y - start.y), height * (end.x - start.x)) +\n    Math.PI / 2\n  return newAngle + 'rad'\n}\n/**\n * getColors\n * @param {Array} colors - array of valid colors\n * @param {Array} locations - array of numbers defining the location of each gradient color stop\n */\nconst getColors = (colors = noPropArr, locations = noPropArr) => {\n  return colors\n    .map((color, index) => {\n      const location = locations[index]\n      let locationStyle = ''\n      if (location) {\n        locationStyle = ' ' + location * 100 + '%'\n      }\n      return color + locationStyle\n    })\n    .join(',')\n}\n\nLinearGradient.propTypes = {\n  locations: PropTypes.array,\n  colors: PropTypes.array,\n  start: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n  }),\n  end: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n  }),\n  useAngle: PropTypes.bool,\n  angleCenter: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n  }),\n  angle: PropTypes.number,\n  children: PropTypes.oneOfType([ PropTypes.func, PropTypes.elementType ]),\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n","import React, { useState, useMemo, useCallback } from 'react'\nimport { Text } from '../typography/text'\nimport { Touchable } from '../touchable'\nimport { Drawer } from '../drawer'\nimport { View } from 'KegView'\nimport { useClassList } from 'KegClassList'\nimport { isValidComponent } from '../../utils'\nimport PropTypes from 'prop-types'\nimport { useStylesCallback } from '@keg-hub/re-theme'\nimport { LinearGradient } from 'KegLinearGradient'\nimport { isFunc } from '@keg-hub/jsutils'\n\n/**\n * build the styles object based on togglePosition\n * @param {object} theme\n * @param {object} styleHelper - of the form { togglePosition, styles }\n */\nconst buildStyles = (theme, styleHelper) => {\n  const textToggleStyles = theme.get(`textToggle`, styleHelper?.styles)\n\n  // default right position\n  let align = 'flex-end'\n  switch (styleHelper?.togglePosition) {\n  case 'left':\n    align = 'flex-start'\n    break\n  case 'center':\n    align = 'center'\n    break\n  }\n  return theme.get(textToggleStyles, {\n    main: {\n      alignItems: align,\n    },\n  })\n}\n\n/**\n * TextToggle\n * @param {object} props\n * @param {string} props.text - text to display as the content\n * @param {object=} props.styles\n * @param {boolean=} props.isExpandedInit - whether the content is expanded or not initially\n * @param {string=} props.className\n * @param {Function=} props.onToggle - optional. callback whenever the toggle component is pressed\n * @param {'left'|'center'|'right'=} props.togglePosition - optional. where to position the toggle component. default 'right'\n * @param {Number=} props.collapsedHeight - optional. height of the textview when collapsed\n * @param {Component=} props.CustomToggle - optional toggle component to use instead of the default\n * @param {string=} props.fadeColor - optional color for the fade on collapsed text\n * @param {string=} props.expandedToggleText - optional text for the button when it's expanded\n * @param {string=} props.collapsedToggleText - optional text for the button when it's collapsed\n */\nexport const TextToggle = props => {\n  const {\n    text,\n    styles,\n    isExpandedInit = false,\n    className,\n    CustomToggle,\n    onToggle,\n    togglePosition = 'right',\n    collapsedHeight = 100,\n    fadeColor = 'white',\n    collapsedToggleText = 'show more',\n    expandedToggleText = 'show less',\n  } = props\n\n  if (!text) return null\n  const [ expanded, setExpanded ] = useState(isExpandedInit)\n\n  const styleHelper = useMemo(\n    () => ({\n      styles,\n      togglePosition,\n    }),\n    [ styles, togglePosition ]\n  )\n\n  const mainStyle = useStylesCallback(\n    buildStyles,\n    [ togglePosition, styles ],\n    styleHelper\n  )\n\n  const [ textMaxHeight, setTextMaxHeight ] = useState(0)\n\n  const showToggle = shouldDisplayToggler(collapsedHeight, textMaxHeight)\n\n  const onToggleCb = useCallback(() => {\n    setExpanded(!expanded)\n    isFunc(onToggle) && onToggle(!expanded)\n  }, [ expanded, onToggle ])\n\n  const onTextLayout = useCallback(\n    event => {\n      const height = event.nativeEvent.layout.height\n      if (textMaxHeight === height) return\n      setTextMaxHeight(height)\n    },\n    [ textMaxHeight, setTextMaxHeight ]\n  )\n\n  return (\n    <View\n      style={[mainStyle.main]}\n      className={useClassList('keg-text-toggle', className)}\n    >\n      <Drawer\n        collapsedHeight={collapsedHeight}\n        toggled={expanded}\n      >\n        <Text\n          style={mainStyle.text}\n          onLayout={onTextLayout}\n        >\n          { text }\n        </Text>\n      </Drawer>\n\n      { showToggle && !expanded && (\n        <LinearGradient\n          colors={[ 'rgba(255,255,255,0)', fadeColor ]}\n          style={mainStyle.linearGradient}\n        />\n      ) }\n      { showToggle && (\n        <ToggleComponent\n          onPress={onToggleCb}\n          isExpanded={expanded}\n          styles={mainStyle.toggleComponent}\n          CustomComponent={CustomToggle}\n          collapsedToggleText={collapsedToggleText}\n          expandedToggleText={expandedToggleText}\n        />\n      ) }\n    </View>\n  )\n}\n\n/**\n * only show toggle if user-defined height DNE\n *  or the given text does not fit in the user-defined height\n * @param {number=} minHeight\n * @param {number=} textMaxHeight\n *\n * @return {boolean}\n */\nconst shouldDisplayToggler = (minHeight, textMaxHeight) => {\n  return !minHeight || textMaxHeight > minHeight\n}\n\n/**\n * ToggleComponent\n * @param {object} props\n * @param {Function} props.onPress - when the component is pressed\n * @param {object} props.styles\n * @param {Component=} props.CustomComponent - optional Component to override the default text component\n * @param {boolean} props.isExpanded - whether to show expanded state or not\n * @param {string} props.expandedToggleText - optional text for the button when it's expanded\n * @param {string} props.collapsedToggleText - optional text for the button when it's collapsed\n */\nconst ToggleComponent = ({\n  onPress,\n  styles,\n  CustomComponent,\n  isExpanded,\n  expandedToggleText,\n  collapsedToggleText,\n}) => {\n  const defaultText = isExpanded ? expandedToggleText : collapsedToggleText\n\n  return (\n    <Touchable\n      style={styles?.main}\n      onPress={onPress}\n    >\n      { isValidComponent(CustomComponent) ? (\n        <CustomComponent isExpanded={isExpanded} />\n      ) : (\n        <Text style={styles?.text}>{ defaultText }</Text>\n      ) }\n    </Touchable>\n  )\n}\n\nTextToggle.propTypes = {\n  text: PropTypes.string,\n  isExpandedInit: PropTypes.bool,\n  styles: PropTypes.object,\n  className: PropTypes.string,\n  CustomToggle: PropTypes.oneOfType([ PropTypes.func, PropTypes.elementType ]),\n  onToggle: PropTypes.func,\n  togglePosition: PropTypes.oneOf([ 'left', 'center', 'right' ]),\n  collapsedHeight: PropTypes.number,\n  fadeColor: PropTypes.string,\n  expandedToggleText: PropTypes.string,\n  collapsedToggleText: PropTypes.string,\n}\n"],"names":["LinearGradient","props","start","x","y","end","colors","noPropArr","locations","useAngle","angleCenter","angle","style","children","className","otherProps","useState","width","setWidth","height","setHeight","measure","useCallback","nativeEvent","layout","newAngle","calculateAngle","React","useClassList","backgroundImage","getColors","Math","atan2","PI","map","color","index","location","locationStyle","join","buildStyles","theme","styleHelper","textToggleStyles","get","styles","align","togglePosition","main","alignItems","TextToggle","text","isExpandedInit","CustomToggle","onToggle","collapsedHeight","fadeColor","collapsedToggleText","expandedToggleText","expanded","setExpanded","useMemo","mainStyle","useStylesCallback","textMaxHeight","setTextMaxHeight","showToggle","shouldDisplayToggler","onToggleCb","isFunc","onTextLayout","event","linearGradient","toggleComponent","minHeight","ToggleComponent","onPress","CustomComponent","isExpanded","defaultText","isValidComponent"],"mappings":"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"}