{"version":3,"file":"svgIcon.js","sources":["../../../src/components/svgIcon/svgIcon.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo } from 'react'\nimport { get, deepMerge, isArr, noPropObj } from '@keg-hub/jsutils'\nimport Svg, { Path } from 'react-native-svg'\nimport { useTheme } from '@keg-hub/re-theme'\n\n/**\n * Custom hook to check if the size prop is an array, and merge it. Otherwise just returns the style object\n * @param {Object|Array=} style - Style object used to apply custom styles to the component\n *\n * @returns {Object} - Merged style object\n */\nconst useIconStyle = style => {\n  return useMemo(() => {\n    return isArr(style) ? deepMerge(...style) : style\n  }, [style])\n}\n\n/**\n * Custom hook to find the size from the props and styles\n * @param {string=} size - Size of the Svg Component\n * @param {Object=} style - Style object used to apply custom styles to the component\n * @param {Object=} theme - Global theme object\n *\n * @returns {Object} - Contains the height and width props for the Svg element\n */\nconst useSize = (size, width, height, style, theme) => {\n  return useMemo(() => {\n    const iconSize = size || get(style, 'fontSize')\n    const themeSize = get(theme, 'typography.default.fontSize', 15) * 2\n    return {\n      height: height || iconSize || get(style, 'height', themeSize),\n      width: width || iconSize || get(style, 'width', themeSize),\n    }\n  }, [ size, width, height, style ])\n}\n\n/**\n * Custom hook to find the fill color from the props and styles\n * @param {string=} fill - Fill color of the path element\n * @param {string=} stroke - Color of the stroke for the path element\n * @param {string=} color - Color of the Svg component\n * @param {string} border - Used as the stroke color when no stroke prop is passed\n * @param {Object=} style - Style object used to apply custom styles to the component\n * @param {Object=} theme - Global theme object\n *\n * @returns {Object} - Contains the stroke and fill props for the path element\n */\nconst useColor = (fill, stroke, color, border, style, theme) => {\n  return useMemo(() => {\n    const themeColor = get(theme, 'typography.default.color')\n    return {\n      stroke:\n        stroke || border || style.border || color || style.color || themeColor,\n      fill: fill || color || style.color || stroke,\n    }\n  }, [ fill, stroke, color, border, style ])\n}\n\n/**\n * SvgIcon\n * @param {object} props\n * @param {string} props.border - Used as the stroke color when no stroke prop is passed\n * @param {string=} props.color - Color of the Svg component\n *                              - Used as the stroke color when no stroke prop is passed\n *                              - Used as the fill color when no fill prop is passed\n * @param {string=} props.clipRule - Svg rule for clipping\n * @param {string=} props.delta - Path definition for the Svg Component\n * @param {string=} props.fill - Fill color of the path element\n * @param {string=} props.fillRule - Svg rule for the fill attribute\n * @param {string=} props.size - Size of the Svg Component\n * @param {string=} props.stroke - Color of the stroke for the path element\n * @param {Object=} props.style - Style object used to apply custom styles to the component\n * @param {string=} props.style.border - Used as the stroke color when no stroke or border prop is passed\n * @param {string=} props.style.color - Used as the fill color when no fill or color prop is passed\n * @param {string=} props.svgFill - Fill color of the parent SVG element\n * @param {string=} props.viewBox - View box size of the parent SVG element\n *\n */\nexport const SvgIcon = props => {\n  const {\n    border,\n    color,\n    clipRule,\n    delta,\n    fill,\n    fillRule,\n    height,\n    size,\n    stroke,\n    strokeWidth,\n    strokeLinecap,\n    strokeLinejoin,\n    style = noPropObj,\n    svgFill,\n    viewBox,\n    width,\n    ...attrs\n  } = props\n\n  const iconStyle = useIconStyle(style)\n  const theme = useTheme()\n  const sizeStyle = useSize(size, width, height, iconStyle, theme)\n  const colorStyle = useColor(fill, stroke, color, border, iconStyle, theme)\n\n  return (\n    <Svg\n      {...attrs}\n      fill={svgFill}\n      viewBox={viewBox}\n      style={[ iconStyle, sizeStyle ]}\n    >\n      <Path\n        clipRule={clipRule}\n        d={delta}\n        fill={colorStyle.fill}\n        fillRule={fillRule}\n        stroke={colorStyle.stroke}\n        strokeWidth={strokeWidth}\n        strokeLinecap={strokeLinecap}\n        strokeLinejoin={strokeLinejoin}\n      />\n    </Svg>\n  )\n}\n\nSvgIcon.propTypes = {\n  border: PropTypes.string,\n  color: PropTypes.string,\n  clipRule: PropTypes.string,\n  delta: PropTypes.string,\n  fill: PropTypes.string,\n  fillRule: PropTypes.string,\n  size: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),\n  stroke: PropTypes.string,\n  style: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n  svgFill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\n"],"names":["useIconStyle","style","useMemo","isArr","deepMerge","useSize","size","width","height","theme","iconSize","get","themeSize","useColor","fill","stroke","color","border","themeColor","SvgIcon","props","clipRule","delta","fillRule","strokeWidth","strokeLinecap","strokeLinejoin","noPropObj","svgFill","viewBox","attrs","iconStyle","useTheme","sizeStyle","colorStyle","React"],"mappings":"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"}