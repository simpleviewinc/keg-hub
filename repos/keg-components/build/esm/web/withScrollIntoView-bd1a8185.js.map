{"version":3,"file":"withScrollIntoView-bd1a8185.js","sources":["../../../src/hooks/useScrollIntoView/useScrollIntoView.js","../../../src/hocs/withScrollIntoView.js"],"sourcesContent":["import { useEffect } from 'react'\n\n/**\n * Ensures the DOM element stored in `ref` remains visible\n * in the surrounding scroll list, provided that `shouldScroll`\n * is true.\n *\n * @param {RefObject} ref - ref to element\n * @param {boolean} shouldScroll - if true, keep ref.current visible\n * @param {boolean|object} scrollOptions - options as defined at\n *    https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView#parameter\n */\nexport const useScrollIntoView = (ref, shouldScroll, scrollOptions = true) => {\n  useEffect(() => {\n    // scroll the element into view according to the scroll options, so long as ref stores the element\n    shouldScroll && ref.current?.scrollIntoView(scrollOptions)\n  }, [ ref, shouldScroll, scrollOptions ])\n\n  return [ref]\n}\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { getPlatform } from 'KegGetPlatform'\nimport { useScrollIntoView } from 'KegHooks'\n\n/**\n * Wraps `Component` such that it is\n * scrolled into view within its surrounding list\n * if the caller passes in a `scrollIntoView={true}` prop\n * @param {Function} Component - component to wrap. Must be a component that accepts a ref,\n * pointing to the underlying Element.\n * @param {boolean|Object} defaultOptions - Default scroll options.\n *  See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView#parameters\n * @return {Function} - wrapped component, with same props as `Component` and two additional:\n *   - scrollIntoView: if true, this component will scroll into view\n *   - scrollOptions: if defined, will overwrite defaultOptions\n */\nexport const withScrollIntoView = (Component, defaultOptions = true) => {\n  // This hoc is unsupported on native platforms, nor should it be needed.\n  // On native, the user scrolls via swiping. There\n  // isn't a keyboard arrow cluster for secondary scrolling.\n  if (getPlatform() !== 'web') return Component\n\n  const Wrapped = props => {\n    const {\n      scrollIntoView = false,\n      scrollOptions = undefined,\n      ...clientProps\n    } = props\n\n    const options = scrollOptions !== undefined ? scrollOptions : defaultOptions\n\n    const ref = useRef()\n\n    useScrollIntoView(ref, scrollIntoView, options)\n\n    return <Component\n      ref={ref}\n      {...clientProps}\n    />\n  }\n\n  Wrapped.propTypes = {\n    ...Component.propTypes,\n    scrollIntoView: PropTypes.bool,\n    scrollOptions: PropTypes.oneOfType([ PropTypes.bool, PropTypes.object ]),\n  }\n\n  return Wrapped\n}\n"],"names":["useScrollIntoView","ref","shouldScroll","scrollOptions","useEffect","current","scrollIntoView","withScrollIntoView","Component","defaultOptions","Wrapped","props","undefined","clientProps","options","useRef","React"],"mappings":";;;;;;;;IAYaA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,YAAN,EAA6C;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AAC5EC,EAAAA,SAAS,CAAC,YAAM;AAAA;AAEdF,IAAAA,YAAY,qBAAID,GAAG,CAACI,OAAR,iDAAI,aAAaC,cAAb,CAA4BH,aAA5B,CAAJ,CAAZ;AACD,GAHQ,EAGN,CAAEF,GAAF,EAAOC,YAAP,EAAqBC,aAArB,CAHM,CAAT;AAKA,SAAO,CAACF,GAAD,CAAP;AACD;;;ICFYM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAsC;AAAA,MAA1BC,cAA0B,uEAAT,IAAS;AAMtE,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,gCAIIA,KAJJ,CACEL,cADF;AAAA,QACEA,cADF,sCACmB,KADnB;AAAA,+BAIIK,KAJJ,CAEER,aAFF;AAAA,QAEEA,aAFF,qCAEkBS,SAFlB;AAAA,QAGKC,WAHL,4BAIIF,KAJJ;AAMA,QAAMG,OAAO,GAAGX,aAAa,KAAKS,SAAlB,GAA8BT,aAA9B,GAA8CM,cAA9D;AAEA,QAAMR,GAAG,GAAGc,MAAM,EAAlB;AAEAf,IAAAA,iBAAiB,CAACC,GAAD,EAAMK,cAAN,EAAsBQ,OAAtB,CAAjB;AAEA,WAAOE,6BAAC,SAAD;AACL,MAAA,GAAG,EAAEf;AADA,OAEDY,WAFC,EAAP;AAID,GAjBD;AAyBA,SAAOH,OAAP;AACD;;;;"}