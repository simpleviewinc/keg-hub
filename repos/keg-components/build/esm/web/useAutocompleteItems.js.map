{"version":3,"file":"useAutocompleteItems.js","sources":["../../../src/hooks/useAutocompleteItems.js"],"sourcesContent":["import { isEmpty, pipeline, isStr, isObj } from '@keg-hub/jsutils'\nimport { useState, useMemo } from 'react'\n\n/**\n * @param {string} str\n * @returns {string} str in lower case\n */\nconst ignoreCase = str => str.toLowerCase()\n\n/**\n * @param {string} str\n * @returns {string} str normalized without accents, so Á is converted to A\n */\nconst ignoreAccents = str =>\n  str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n\n/**\n * Formats the menu item to be an object, or null if invalid type\n * @param {Object | String} item\n * @param {Number} index\n * @return {Object?} returns null if invalid, otherwise an object in form { key, text }\n */\nconst formatItem = (item, index) => {\n  if (isObj(item) && isStr(item.text))\n    return { text: item.text, key: item.key || item.text, index }\n  else if (isStr(item)) return { text: item, key: item, index }\n  else return null\n}\n\n/**\n * @param {string} str\n * @return {string} string trimmed\n */\nconst trimStr = str => str?.trim()\n\n/**\n *\n * @param {string} text - user input text\n * @param {Object} item - one of the possible autocomplete values, of form { text, key }\n * @return {boolean} true if the text matches the item's text, ignoring casing and accents\n */\nconst textMatches = (text, item) => {\n  const itemComparisonStr = pipeline(item.text, ignoreCase, ignoreAccents)\n  const textComparisonStr = pipeline(text, trimStr, ignoreCase, ignoreAccents)\n  return itemComparisonStr.includes(textComparisonStr)\n}\n\n/**\n * Returns a new array containing a subset of possibleValues, each of which is:\n *  - unique; and\n *  - either a substring of `text` or the same string.\n * The filtering ignores casing and accents.\n * @param {String} text - text to check (e.g. user input so far)\n * @param {Array<string | Object>} possibleValues - string or object { text, key? } array\n * @returns {Array<Object>} the new array of items, without duplicates\n */\nexport const getItemsMatchingText = (text, possibleValues) => {\n  if (!isStr(text)) return []\n\n  // in one pass: format values, keep the matching ones, and ignore duplicates (by key) and invalid items\n  const result = possibleValues.reduce(\n    (state, nextItem) => {\n      // ensure item is of form { key, text }\n      const formattedItem = formatItem(nextItem, state.counter)\n\n      // invalid item, so just ignore\n      if (!formattedItem) return state\n\n      // add the item if it matches the text and we haven't seen its key before\n      if (\n        textMatches(text, formattedItem) &&\n        !state.keys.has(formattedItem.key)\n      ) {\n        state.keys.add(formattedItem.key)\n        state.arr.push(formattedItem)\n\n        state.counter++ // used for item indices\n      }\n\n      return state\n    },\n    {\n      arr: [],\n      keys: new Set(),\n      counter: 0,\n    }\n  )\n\n  return result.arr\n}\n\n/**\n * Custom hook for acquiring menu items that are filtered based on matches to `text`.\n * @param {String} text - user input\n * @param {Array<string> | Array<object>} menuItems - all menu items\n * @return {Array} - [\n *  autocompleteItems: subset of menuItems that have an overlap with text. These will be formatted to object form.\n *  setSelectedItem: callback to set the currently selected item in the autocomplete component\n *  selectedItem: the currently selected item\n * ]\n */\nexport const useAutocompleteItems = (text, menuItems) => {\n  const [ selectedItem, setSelectedItem ] = useState(null)\n\n  const items = useMemo(\n    () =>\n      isEmpty(text) || selectedItem?.text === text\n        ? []\n        : getItemsMatchingText(text, menuItems),\n    [ text, menuItems, selectedItem ]\n  )\n\n  return [ items, setSelectedItem, selectedItem ]\n}\n"],"names":["ignoreCase","str","toLowerCase","ignoreAccents","normalize","replace","formatItem","item","index","isObj","isStr","text","key","trimStr","trim","textMatches","itemComparisonStr","pipeline","textComparisonStr","includes","getItemsMatchingText","possibleValues","result","reduce","state","nextItem","formattedItem","counter","keys","has","add","arr","push","Set","useAutocompleteItems","menuItems","useState","selectedItem","setSelectedItem","items","useMemo","isEmpty"],"mappings":"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"}