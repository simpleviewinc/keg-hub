{"version":3,"file":"useInputHandlers.js","sources":["../../../src/hooks/useInputHandlers.js"],"sourcesContent":["import { useMemo } from 'react'\nimport { get } from '@keg-hub/jsutils'\nimport { validateFunctions } from '../utils'\n\n/**\n * @param {Function} handler - onChange handler\n * @param {Object} validFuncsMap - validation results for change handlers\n *\n * @returns {Object} the object to spread onto an Input element to provide its change handlers\n */\nconst makeHandlerObject = (\n  handler,\n  { onChange, onValueChange, onChangeText }\n) => {\n  return Boolean(onChange || onValueChange || onChangeText)\n    ? { onChange: handler }\n    : {}\n}\n\n/**\n * Returns an an object containing the event handler(s) for an Input component. This works\n * across web and native, and it will make sure that defined handlers are called in the right\n * contexts. Returned handlers are memoized where it is helpful.\n *\n * @param {Boolean} isWeb - true if platform is web, false if native\n * @param {Object} handlers - object holding handlers (e.g. component's props object)\n * @param {Function} handlers.onChange - cb of form (event) => ...\n * @param {Function} handlers.onChangeText - cb of form (value) => ...\n * @param {Function} handlers.onValueChange - cb of form (value) => ... (alias to onChangeText)\n *\n * @returns {Object} an object of change handler(s) to be spread to the input element.\n *\n * @example\n * const handlers = useInputHandlers(isWeb, { onChange, onValueChange })\n *\n * return <InputWrapperFoo { ...handlers } />\n */\nexport const useInputHandlers = (handlers = {}) => {\n  const { onChange, onValueChange, onChangeText } = handlers\n\n  return useMemo(() => {\n    const areValidFuncs = validateFunctions(handlers)\n\n    // create the onChange handler\n    const handleChange = event => {\n      const value = get(event, 'target.value')\n      areValidFuncs.onChange && onChange(event)\n      areValidFuncs.onValueChange && onValueChange(value)\n      areValidFuncs.onChangeText && onChangeText(value)\n    }\n\n    return makeHandlerObject(handleChange, areValidFuncs)\n  }, [ onChange, onValueChange, onChangeText ])\n}\n"],"names":["makeHandlerObject","handler","onChange","onValueChange","onChangeText","Boolean","useInputHandlers","handlers","useMemo","areValidFuncs","validateFunctions","handleChange","event","value","get"],"mappings":";;;;;AAUA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,OADwB,QAGrB;AAAA,MADDC,QACC,QADDA,QACC;AAAA,MADSC,aACT,QADSA,aACT;AAAA,MADwBC,YACxB,QADwBA,YACxB;AACH,SAAOC,OAAO,CAACH,QAAQ,IAAIC,aAAZ,IAA6BC,YAA9B,CAAP,GACH;AAAEF,IAAAA,QAAQ,EAAED;AAAZ,GADG,GAEH,EAFJ;AAGD,CAPD;IA2BaK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAmB;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AAAA,MACzCL,QADyC,GACCK,QADD,CACzCL,QADyC;AAAA,MAC/BC,aAD+B,GACCI,QADD,CAC/BJ,aAD+B;AAAA,MAChBC,YADgB,GACCG,QADD,CAChBH,YADgB;AAGjD,SAAOI,OAAO,CAAC,YAAM;AACnB,QAAMC,aAAa,GAAGC,iBAAiB,CAACH,QAAD,CAAvC,CADmB;AAInB,QAAMI,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5B,UAAMC,KAAK,GAAGC,GAAG,CAACF,KAAD,EAAQ,cAAR,CAAjB;AACAH,MAAAA,aAAa,CAACP,QAAd,IAA0BA,QAAQ,CAACU,KAAD,CAAlC;AACAH,MAAAA,aAAa,CAACN,aAAd,IAA+BA,aAAa,CAACU,KAAD,CAA5C;AACAJ,MAAAA,aAAa,CAACL,YAAd,IAA8BA,YAAY,CAACS,KAAD,CAA1C;AACD,KALD;AAOA,WAAOb,iBAAiB,CAACW,YAAD,EAAeF,aAAf,CAAxB;AACD,GAZa,EAYX,CAAEP,QAAF,EAAYC,aAAZ,EAA2BC,YAA3B,CAZW,CAAd;AAaD;;;;"}