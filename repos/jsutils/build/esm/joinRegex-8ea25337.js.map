{"version":3,"file":"joinRegex-8ea25337.js","sources":["../../src/regex/isRegex.js","../../src/regex/getRegexSource.js","../../src/regex/joinRegex.js"],"sourcesContent":["/** @module regex */\n\n/**\n * Checks if value is an instance of regex\n * @function\n * @param {*} val \n * @return {boolean} true if val is an instance of RegExp\n * @example\n * isRegex(new RegExp('a')) // true\n * isRegex(/a/) // true\n * isRegex('a') // false\n */\nexport const isRegex = val => Boolean(\n  val && (val instanceof RegExp)\n)","/** @module regex */\n\nimport { isRegex } from './isRegex'\nimport { isStr } from '../string'\n\n/**\n * Attempts to return a regex string from maybeRx.\n * @function\n * @param {*} maybeRx - any time\n * @return {string?} If maybeRx is a RegExp instance, returns its .source\n * property. If it is a string, returns it unchanged.\n * Otherwise, returns null.\n * \n * @example\n * getRegexSource(/[A-z]+/) // '[A-z]+'\n * getRegexSource('test') // 'test'\n * getRegexSource(34) // null\n */\nexport const getRegexSource = maybeRx =>\n  isRegex(maybeRx)\n    ? maybeRx.source \n    : isStr(maybeRx)\n      ? maybeRx\n      : null","/** @module regex */\n\nimport { isStr } from '../string'\nimport { isArr } from '../array'\nimport { getRegexSource } from './getRegexSource'\n\n/**\n * Helper for `joinRegex` that parses the args\n * @param {...*} args \n * @return {Array} [\n *  expressions array,\n *  options string\n * ]\n */\nconst parseArgs = args => {\n  if (isArr(args[0])) return [ args[0], args[1] ]\n  const last = args[args.length - 1]\n  const options = isStr(last) ? last : undefined\n  const expressions = options\n    ? args.splice(0, args.length - 1)\n    : args\n  return [ expressions, options ]\n}\n\n/**\n * Joins regex together in one expression\n * @function\n * @param {...RegExp} expressions array of regex instances. \n * You can technically use strings as well, but be careful that it's not the last element of a spread call, or that will be interpreted as the \"options\" string.\n * @param {string} options - options string (the second argument of RegExp constructor)\n * @example\n * // calling using spread args\n * const joined = joinRegex(/[A-z]+/, /[0-9]/, 'g')\n * joined === /([A-z]+|[0-9])/g\n * @example\n * // calling with an array\n * const joined = joinRegex([ ...allMyRegEx ], 'gi')\n */\nexport const joinRegex = (...args) => {\n  const [ expressions, options ] = parseArgs(args)\n\n  // join the regex together in a capture group with the | operator\n  const source = expressions.reduce(\n    (joined, next) => {\n      const nextSource = getRegexSource(next)\n      return !nextSource\n        ? joined\n        : joined === ''\n          ? nextSource\n          : `${joined}|${nextSource}`\n    },\n    ''\n  )\n\n  return new RegExp(`(${source})`, options)\n}\n"],"names":["isRegex","val","Boolean","RegExp","getRegexSource","maybeRx","source","isStr","parseArgs","args","isArr","last","length","options","undefined","expressions","splice","joinRegex","reduce","joined","next","nextSource"],"mappings":";;;;;MAYaA,OAAO,GAAGC,GAAG,IAAIC,OAAO,CACnCD,GAAG,IAAKA,GAAG,YAAYE,MADY;;MCMxBC,cAAc,GAAGC,OAAO,IACnCL,OAAO,CAACK,OAAD,CAAP,GACIA,OAAO,CAACC,MADZ,GAEIC,KAAK,CAACF,OAAD,CAAL,GACEA,OADF,GAEE;;ACTR,MAAMG,SAAS,GAAGC,IAAI,IAAI;AACxB,MAAIC,KAAK,CAACD,IAAI,CAAC,CAAD,CAAL,CAAT,EAAoB,OAAO,CAAEA,IAAI,CAAC,CAAD,CAAN,EAAWA,IAAI,CAAC,CAAD,CAAf,CAAP;AACpB,QAAME,IAAI,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAjB;AACA,QAAMC,OAAO,GAAGN,KAAK,CAACI,IAAD,CAAL,GAAcA,IAAd,GAAqBG,SAArC;AACA,QAAMC,WAAW,GAAGF,OAAO,GACvBJ,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeP,IAAI,CAACG,MAAL,GAAc,CAA7B,CADuB,GAEvBH,IAFJ;AAGA,SAAO,CAAEM,WAAF,EAAeF,OAAf,CAAP;AACD,CARD;MAwBaI,SAAS,GAAG,CAAC,GAAGR,IAAJ,KAAa;AACpC,QAAM,CAAEM,WAAF,EAAeF,OAAf,IAA2BL,SAAS,CAACC,IAAD,CAA1C,CADoC;AAIpC,QAAMH,MAAM,GAAGS,WAAW,CAACG,MAAZ,CACb,CAACC,MAAD,EAASC,IAAT,KAAkB;AAChB,UAAMC,UAAU,GAAGjB,cAAc,CAACgB,IAAD,CAAjC;AACA,WAAO,CAACC,UAAD,GACHF,MADG,GAEHA,MAAM,KAAK,EAAX,GACEE,UADF,GAEG,GAAEF,MAAO,IAAGE,UAAW,EAJ9B;AAKD,GARY,EASb,EATa,CAAf;AAYA,SAAO,IAAIlB,MAAJ,CAAY,IAAGG,MAAO,GAAtB,EAA0BO,OAA1B,CAAP;AACD;;;;"}