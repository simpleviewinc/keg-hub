{"version":3,"file":"uniqArr-20146d33.js","sources":["../../src/array/areFrequencyEqual.js","../../src/array/areSetEqual.js","../../src/array/cloneArr.js","../../src/array/eitherArr.js","../../src/array/ensureArr.js","../../src/array/flatArr.js","../../src/array/flatMap.js","../../src/array/findExtrema.js","../../src/array/findMax.js","../../src/array/findMin.js","../../src/array/omitRange.js","../../src/array/randomArr.js","../../src/array/randomizeArr.js","../../src/array/uniqArr.js"],"sourcesContent":["/** @module array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Builds a map of elements mapped to their frequency counts\n * @param {Array<*>} arr \n * @return {Map<*, number>}\n */\nexport const buildElementCountMap = arr => {\n  const counts = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    const count = counts.get(element) ?? 0\n    counts.set(element, count + 1)\n  }\n  return counts\n}\n\n/**\n * Returns true if the maps \n * @param {Map<*, number>} mapA \n * @param {Map<*, number>} mapB \n */\nexport const areCountMapsEqual = (mapA, mapB) => {\n  if (mapA.size !== mapB.size) return false\n\n  for (let [ key, count ] of mapA) {\n    const otherCount = mapB.get(key)\n    if (otherCount !== count) return false\n  }\n\n  return true\n}\n\n/**\n * Checks if arrays are frequency equal. Does this \n * by making only one pass over each array and using an\n * auxilliary map.\n * @function\n * @param {Array<*>} arr \n * @param {Array<*>} otherArr \n * @returns {boolean} true if otherArr contains exactly the same elements as arr, \n * where order does not matter, but frequency does\n */\nexport const areFrequencyEqual = (arr, otherArr) => {\n  const [ valid ] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n  if (arr.length !== otherArr.length) return false\n\n  const arrCounts = buildElementCountMap(arr)\n  const otherCounts = buildElementCountMap(otherArr)\n\n  return areCountMapsEqual(arrCounts, otherCounts)\n}\n","/** @module array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Checks if arrays are set-equal: they contain the same elements,\n * but element frequencies don't matter.\n * Does this with one pass over each array and an auxilliary set.\n * @function\n * @param {Array<*>} arr \n * @param {Array<*>} otherArr \n */\nexport const areSetEqual = (arr, otherArr) => {\n  const [ valid ] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n\n  const [ longest, shortest ] = arr.length > otherArr.length\n    ? [ arr, otherArr ]\n    : [ otherArr, arr ]\n\n  const arrSet = new Set(shortest)\n\n  for (let i = 0; i < longest.length; i++) {\n    const element = longest[i]\n    if (!arrSet.has(element)) return false\n  }\n\n  return true\n}","/** @module array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\n\n/**\n * Creates a copy of the passed in array.\n * <br> Returns empty array, if param is not an array.\n * @function\n * @example\n * cloneArr([1,2,3])\n * // Returns copy of the passed on array\n * @param {array} arr - array to be copied\n * @return {array} - copy of passed in array\n */\nexport const cloneArr = arr => (\n  Array.from([\n    // If arr is not an array or object, just use empty array, so we don't throw!\n    ...(isArr(arr) && arr || isObj(arr) && Object.entries(arr) || [])\n  ])\n)\n","/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Returns a if it is an Array, else returns b\n * @function\n * @param {*} a\n * @param {*} b\n * @returns {*} either a, if it's an array, or b\n * \n * @example\n * const foo = eitherArr('hi', 1) // returns 1\n * const bar = eitherArr([ 2 ], 1) // returns [ 2 ]\n */\nexport const eitherArr = (a, b) => isArr(a) ? a : b","/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Ensures the passed in value is an array, else it returns it in an array\n * @function\n * @param {Array|*} val - Value to check if its an array\n *\n * @example\n * const foo = eitherArr('hi') // returns ['hi']\n * const bar = eitherArr([ 2 ]) // returns [ 2 ]\n *\n * @returns {Array} val if it's an array, or val in an array\n */\nexport const ensureArr = val => isArr(val) ? val : [val]","import { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\nimport { noOpObj } from '../method/noOp'\nimport { exists } from '../ext/exists'\n\n/**\n * Helper method to flatten and mutate the passed in array based on options\n * @function\n * @private\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} result - Flattened array values \n * @param {Array} opts - Options to modify how the array is flattened\n *\n * @return {Array} - Mutated arr or result, but flattened based on options\n */\nconst flatten = (arr, result, opts) => {\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i]\n\n    isArr(value)\n      ? flatten(value, result, opts)\n      : ((opts.exists && !exists(value)) || (opts.truthy && !value))\n        ? result\n        : result.push(value)\n  }\n\n  if(!opts.mutate) return result\n\n  Object.assign(arr, result).splice(result.length)\n\n  return arr\n}\n\n/**\n * Flattens an array to a single level\n * @function\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} opts - Options to modify how the array is flattened\n * @param {Array} opts.truthy - Only include truthy values when flattening\n * @param {Array} opts.exists - Only include values that exist when flattening\n * @param {Array} opts.mutate - Mutates the original array\n *\n * @example\n * const arr = flatArr([[ 'flat', '' ], [ 'array' ]]) // returns ['flat', '', 'array']\n * const arrTruthy = flatArr([ 0, 2, [ false ] ], { truthy: true }) // returns [ 2 ]\n * const arrExist = flatArr([ 0, 2, [ false ] ], { exists: true }) // returns [ 0, 2, false ]\n * const mutateArr = [ [1], [2] ]\n * flatArr(mutateArr, { mutate: true }) === mutateArr\n * // Evaluates to true, but mutateArr value is [ 1, 2 ]\n *\n * @return {Array} - Mutated original array now flattened, or a new flattened array based on options\n */\nexport const flatArr = (arr, opts) => flatten(arr, [], isObj(opts) ? opts : noOpObj)\n","/** @module array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method/isFunc'\nimport { validate } from '../validation'\n\n/**\n * Maps each element using mapping function `mapFn`, but returns the result as a flattened array.\n * It is equivalent to map() followed by flattening to depth 1, but flatMap is a useful shortcut,\n * and merging both steps into one method (with one pass over the array) is slightly more efficient. \n * @function\n * @example\n * [1, 2].map(x => [x * 2]) // returns [[2], [4]]\n * flatMap([1, 2], x => [x * 2]) // returns [2, 4]\n * @param {Array} arr - array to map across\n * @param {Function} mapFn - function for mapping\n */\nexport const flatMap = (arr, mapFn) => {\n  const [ inputIsValid ] = validate(\n    { arr, mapFn },\n    { arr: isArr, mapFn: isFunc }\n  )\n  if (!inputIsValid) return arr;\n\n  // iterate across the array, calling mapFn on each element, then flattening into final array\n  return arr.reduce(\n    (finalArr, current) => {\n      const result = mapFn(current)\n      isArr(result)\n        ? result.map(el => finalArr.push(el))\n        : finalArr.push(result)\n      return finalArr\n    },\n    []\n  )\n}\n\n","/** @module array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method'\nimport { validate } from '../validation'\n\n/**\n * Finds the extremum (e.g. max, min) element within array `arr` as defined by the `comparator` function\n * @function\n * @param {Array<*>} arr \n * @param {Function} comparator - comparison function like the compareFunction in sort: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @returns {*} the element in `arr` that is the extremum as defined by `comparator`. If arr is empty, this function returns null.\n * @example\n * const max = findExtrema([ { a: 1 }, { a: 2} ], (x, y) => x.a - y.a)\n * // max === { a: 2 } \n */\nexport const findExtrema = (arr, comparator) => {\n  const [ valid ] = validate({ arr, comparator }, { arr: isArr, $default: isFunc })\n  if (!valid) return null\n\n  return arr.length\n    ? arr.reduce(\n        (extremaSoFar, next) => (comparator(extremaSoFar, next) > 0 ? extremaSoFar : next)\n      )\n    : null\n}\n","/** @module array */\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the maximum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 3 }\n */\nexport const findMax = (arr = [], propSelector=identity) => findExtrema(\n  arr, \n  (x, y) => compareTo(propSelector(x), propSelector(y))\n)\n","/** @module array */\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the minimum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 1 }\n */\nexport const findMin = (arr = [], propSelector=identity) => findExtrema(\n  arr, \n  (x, y) => compareTo(propSelector(y), propSelector(x))\n)\n","/** @module array */\n\nimport { isNonNegative } from '../number/isNonNegative'\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Returns a new array with the same elements as arr, excluding `count` elements beginning at index `startIndex`\n * @function\n * @param {Array} arr \n * @param {Number} startIndex \n * @param {Number} count \n */\nexport const omitRange = (arr, startIndex, count) => {\n  const [ inputIsValid ] = validate(\n    { arr, startIndex, count },\n    { arr: isArr, $default: isNonNegative }\n  )\n\n  if (!inputIsValid) return arr\n\n  const nextArr = [ ...arr ]\n\n  nextArr.splice(startIndex, count)\n\n  return nextArr\n}\n","/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly selects values from a passed in array.\n * @function\n * @example\n * randomArr([1,2,3], 1)\n * // Returns an array with one of the values in the passed in array\n * @param {array} arr - array to select values from\n * @param {number} amount - number of values to select from the array\n * @return {array} - randomly sorted array\n */\nexport const randomArr = (arr, amount) => {\n  if(!isArr(arr)) return arr\n\n  const useAmount = amount || 1\n  const randoms = []\n  for (let i = 0; i < useAmount; i++) {\n    randoms.push(arr[Math.floor(Math.random() * arr.length)])\n  }\n\n  return !amount ? randoms[0] : randoms\n}\n","/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly sorts an arrays items.\n * @function\n * @example\n * randomizeArr([1,2,3])\n * // Returns an array randomly sorted\n * @param {array} arr - array to randomly sorted\n * @return {array} - randomly sorted array\n */\nexport const randomizeArr = arr => (\n  !isArr(arr) && arr || arr.sort(() => (0.5 - Math.random()))\n)","/** @module array */\n\nimport { isArr } from './isArr'\n\n/**\n * Removes duplicates from an array, checking by reference-equality\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @param {array} arr - array to remove duplicates from\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArrByReference = (arr) => {\n  return !isArr(arr)\n    ? arr\n    : arr.filter((e, i, arr) => arr.indexOf(e) == i\n  )\n}\n\n/**\n * \n * @param {*} arr \n * @param {*} selector \n */\n/**\n * Removes duplicates from an array.\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n * uniqArr([ {a: 1} , { a: 1 }], element => element.a)\n * // Returns array [ { a: 1 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property uniqArr should use to check if another element exists\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArr = (arr, selector) => {\n  if (!selector) return uniqArrByReference(arr)\n\n  // loop over each element in one pass, \n  // only including in the unique array elements\n  // we haven't encountered before \n  // by checking with `selector` and the set\n  const { unique } = arr.reduce(\n    (data, element) => {\n      const id = selector(element)\n      !data.set.has(id) && data.unique.push(element)\n      data.set.add(id)\n      return data\n    },\n    { \n      unique: [], \n      set: new Set()\n    }\n  )\n\n  return unique\n}"],"names":["buildElementCountMap","arr","counts","Map","i","length","element","count","get","set","areCountMapsEqual","mapA","mapB","size","key","otherCount","areFrequencyEqual","otherArr","valid","validate","$default","isArr","arrCounts","otherCounts","areSetEqual","longest","shortest","arrSet","Set","has","cloneArr","Array","from","isObj","Object","entries","eitherArr","a","b","ensureArr","val","flatten","result","opts","value","exists","truthy","push","mutate","assign","splice","flatArr","noOpObj","flatMap","mapFn","inputIsValid","isFunc","reduce","finalArr","current","map","el","findExtrema","comparator","extremaSoFar","next","findMax","propSelector","identity","x","y","compareTo","findMin","omitRange","startIndex","isNonNegative","nextArr","randomArr","amount","useAmount","randoms","Math","floor","random","randomizeArr","sort","uniqArrByReference","filter","e","indexOf","uniqArr","selector","unique","data","id","add"],"mappings":"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"}