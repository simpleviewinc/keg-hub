{"version":3,"file":"toInt-082bd5f3.js","sources":["../../src/number/isNegative.js","../../src/number/isPositive.js","../../src/number/isFloat.js","../../src/number/isInt.js","../../src/number/nth.js","../../src/number/toFloat.js","../../src/number/toInt.js"],"sourcesContent":["/** @module number */\n\nimport { isNum  } from \"./isNum\"\n\n/**\n * @function\n * @param {*} x \n * @returns { boolean } true if x is a negative number\n * @example isNegative(-1) // true\n * @example isNegative(0) // false\n */\nexport const isNegative = x => isNum(x) && (x < 0)","/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x \n * @returns { boolean } true if x is a positive number\n * @example isPositive(0) // false\n * @example isPositive(1) // true\n */\nexport const isPositive = x => isNum(x) && (x > 0)","/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is a Float.\n * @example\n * isFloat(1.23)\n * // Returns true\n * @example\n * isFloat('1.2')\n * // Returns false ( because it's a string )\n * @function\n * @param {number} num - value to check\n * @return {boolean} true or false - value is an Float\n */\nexport const isFloat = val => (\n  isNum(val) && val % 1 !== 0\n)\n","/** @module number */\n\nimport { isNum } from './isNum'\n\n/**\n * Checks if a number is an integer.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {number} num - value to check\n * @return {boolean} true or false - value is an Int\n */\nexport const isInt = val => (\n  isNum(val) && (val % 1 === 0)\n)\n","/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\nimport { toNum } from './toNum'\n\n/**\n * Finds the number ext base on the passed in number.\n * @example\n * nth(1)\n * // Returns 'st'\n * @example\n * nth(2)\n * // Returns 'nd'\n * @example\n * nth(5)\n * // Returns 'th'\n * @function\n * @param {number} num - value to check\n * @return {string} ext of the number\n */\nexport const nth = num => {\n\n  if(!isNum(num)){\n    num = getNums(num)\n    if(!num) return ''\n    num = toNum(num)\n    if(equalsNaN(num)) return ''\n  }\n\n  const mod = (num % 100)\n  if (mod >= 10 && mod <= 20)\n    return 'th'\n\n  switch(num % 10) {\n    case 1:\n      return 'st'\n    case 2:\n      return 'nd'\n    case 3:\n      return 'rd'\n    default:\n      return 'th'\n  }\n}\n","/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to a float.\n * @example\n * toFloat('1.34')\n * // Returns 1.34\n* @example\n * toFloat(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {number} value converted to an float\n */\nexport const toFloat = val => (\n  val &&\n    !equalsNaN(val) &&\n    parseFloat( isNum(val) && val || getNums(val) ) ||\n    0\n)\n","/** @module number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to an integer.\n * @example\n * toInt('1')\n * // Returns 1\n * @example\n * toInt(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {number} value converted to a integer\n */\nexport const toInt = val => (\n  val &&\n    !equalsNaN(val) && \n    parseInt( isNum(val) && val || getNums(val) ) ||\n    0\n)\n"],"names":["isNegative","x","isNum","isPositive","isFloat","val","isInt","nth","num","getNums","toNum","equalsNaN","mod","toFloat","parseFloat","toInt","parseInt"],"mappings":";;;MAWaA,UAAU,GAAGC,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,IAAaA,CAAC,GAAG;;MCAnCE,UAAU,GAAGF,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,IAAaA,CAAC,GAAG;;MCKnCG,OAAO,GAAGC,GAAG,IACxBH,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAG,GAAG,CAAN,KAAY;;MCDfC,KAAK,GAAGD,GAAG,IACtBH,KAAK,CAACG,GAAD,CAAL,IAAeA,GAAG,GAAG,CAAN,KAAY;;MCKhBE,GAAG,GAAGC,GAAG,IAAI;AAExB,MAAG,CAACN,KAAK,CAACM,GAAD,CAAT,EAAe;AACbA,IAAAA,GAAG,GAAGC,OAAO,CAACD,GAAD,CAAb;AACA,QAAG,CAACA,GAAJ,EAAS,OAAO,EAAP;AACTA,IAAAA,GAAG,GAAGE,KAAK,CAACF,GAAD,CAAX;AACA,QAAGG,SAAS,CAACH,GAAD,CAAZ,EAAmB,OAAO,EAAP;AACpB;AAED,QAAMI,GAAG,GAAIJ,GAAG,GAAG,GAAnB;AACA,MAAII,GAAG,IAAI,EAAP,IAAaA,GAAG,IAAI,EAAxB,EACE,OAAO,IAAP;AAEF,UAAOJ,GAAG,GAAG,EAAb;AACE,SAAK,CAAL;AACE,aAAO,IAAP;AACF,SAAK,CAAL;AACE,aAAO,IAAP;AACF,SAAK,CAAL;AACE,aAAO,IAAP;AACF;AACE,aAAO,IAAP;AARJ;AAUD;;MC3BYK,OAAO,GAAGR,GAAG,IACxBA,GAAG,IACD,CAACM,SAAS,CAACN,GAAD,CADZ,IAEES,UAAU,CAAEZ,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAd,IAAqBI,OAAO,CAACJ,GAAD,CAA9B,CAFZ,IAGE;;MCJSU,KAAK,GAAGV,GAAG,IACtBA,GAAG,IACD,CAACM,SAAS,CAACN,GAAD,CADZ,IAEEW,QAAQ,CAAEd,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAd,IAAqBI,OAAO,CAACJ,GAAD,CAA9B,CAFV,IAGE;;;;"}