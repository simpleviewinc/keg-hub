{"version":3,"file":"shallowEqual-3485638f.js","sources":["../../src/collection/cleanColl.js","../../src/collection/isEmptyColl.js","../../src/collection/mapColl.js","../../src/collection/reduceColl.js","../../src/collection/unset.js","../../src/collection/deepEqual.js","../../src/collection/repeat.js","../../src/collection/shallowEqual.js"],"sourcesContent":["/** @module collection */\n\nimport { isObj } from '../object/isObj'\nimport { isColl } from './isColl'\n\n/**\n * Cleans a collection by creating a new collection\n * With the null and undefined values removed\n * @function\n * @param {Object|Array} coll - Collection to remove empty values from\n * @param {boolean} [recursive=true] - Should recursively clean child values\n *\n * @returns {Object|Array} - Cleaned collection\n */\nexport const cleanColl = (coll, recursive=true) => {\n  return isColl(coll)\n    ? Object.keys(coll)\n      .reduce((cleaned, key) => {\n        const value = coll[key]\n        if(value === null || value === undefined) return cleaned\n\n        cleaned[key] = recursive && isColl(value)\n          ? cleanColl(value)\n          : value\n\n        return cleaned\n      }, isObj(coll) && {} || [])\n    : console.error(`cleanColl requires a collection as the first argument`) || coll\n}","/** @module collection */\n\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if passed in obj || array is empty.\n * @example\n * isEmptyColl({})\n * // Returns true\n * @example\n * isEmptyColl({ foo: 'bar' })\n * // Returns false\n * @example\n * isEmptyColl([])\n * // Returns true\n * @function\n * @param {Object} obj - object to check if empty\n * @return {boolean}  true || false\n */\nexport const isEmptyColl = obj => (\n  isArr(obj)\n    ? obj.length === 0\n    : isColl(obj) && Object.getOwnPropertyNames(obj).length === 0\n)\n","/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over a collection and calls a passed in function for each one.\n * @example\n * mapColl([1, 2, 3], (key, val, coll) => { console.log(key) })\n * // Will log all keys of the collection\n * @function\n * @param {Array|Object} - collection to loop over\n * @return {Array|Object} returns the same type of collection passed in\n */\nexport const mapColl = (coll, cb) => (\n  isFunc(cb) && isColl(coll)\n    ? Object\n      .keys(coll)\n      .map(key => cb(key, coll[key], coll))\n    : isArr(coll)\n      ? []\n      : {}\n)\n","/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over collection and calls reduce.\n * @example\n * reduceColl([1, 2, 3], (key, val, coll) => { console.log(key) }, {})\n * // Returns what ever is returned from the last iteration of the reduce loop\n * @function\n * @param {Object} obj - object loop over\n * @param {function} path - path that should be created on the object, separated by .\n * @param {*} reduce - starting data passed to reduce method\n * @return {Object} - last returned data from the loop\n */\nexport const reduceColl = (coll, cb, reduce) => (\n  isFunc(cb) && isColl(coll)\n    ? Object\n      .keys(coll)\n      .reduce((data, key) => cb(key, coll[key], coll, data), reduce)\n    : isArr(coll)\n      ? []\n      : {}\n)\n","/** @module collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Removes a path from an object.\n * @example\n * unset(obj, 'foo.bar')\n * // Returns the passed in obj, with the value of bar set to undefined\n * @function\n * @param {Object} obj - object to have the attribute removed\n * @param {string|array} path - path of attribute to be removed, separated by string\n * @return the passed in object, with the attribute found at the path removed\n */\nexport const unset = (obj, path) => updateColl(obj, path, 'unset')\n","/** @module collection */\n\n// Cache the prototype methods for faster access\nconst isArray = Array.isArray\nconst keyList = Object.keys\nconst hasProp = Object.prototype.hasOwnProperty\n\n/**\n * Recursively checks if two collections are equal\n * <br/>Faster the JSON.stringify checks\n * <br/>See https://jsperf.com/fast-deep-equal-vs-json-stringify\n * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const test2 = { foo: [ { bar: 'baz' } ] }\n * console.log(test === test2)) // prints false\n * deepEqual(test, test2) // returns true\n * @example\n * // Works with arrays too\n * deepClone([ [ [ 0 ] ] ], [ [ [ 0 ] ] ]) // returns true\n * @function\n * @param {Object|Array} a - object to check\n * @param {Object|Array} b - object to check against\n */\nexport const deepEqual = (a, b) => {\n  if (a === b) return true\n\n  if(!a || !b || typeof a != 'object' || typeof b != 'object')\n    return a !== a && b !== b\n\n  const arrA = isArray(a)\n  const arrB = isArray(b)\n  let i\n  let length\n  let key\n\n  // If both are arrays\n  if (arrA && arrB) {\n    length = a.length\n    // If unequal length, then not equal\n    if (length != b.length) return false\n    // Loop the arrays and check the contents of both\n    for (i = length; i-- !== 0;)\n      if (!deepEqual(a[i], b[i])) return false\n\n    return true\n  }\n\n  // If on is an array and the other is not, then return false\n  if (arrA != arrB) return false\n\n  // Validate date objects\n  const dateA = a instanceof Date\n  const dateB = b instanceof Date\n  if (dateA != dateB) return false\n  if (dateA && dateB) return a.getTime() == b.getTime()\n\n  // Validate RegExp objects\n  const regexpA = a instanceof RegExp\n  const regexpB = b instanceof RegExp\n  if (regexpA != regexpB) return false\n  if (regexpA && regexpB) return a.toString() == b.toString()\n\n  // Cache the keys and length for faster iteration\n  const keys = keyList(a)\n  length = keys.length\n\n  // If unequal key length then return false\n  if (length !== keyList(b).length) return false\n\n  // Ensure both objects have the same keys\n  for (i = length; i-- !== 0;)\n    if (!hasProp.call(b, keys[i])) return false\n\n  // Check the value of the object keys\n  for (i = length; i-- !== 0;) {\n    key = keys[i]\n    if (!deepEqual(a[key], b[key])) return false\n  }\n\n  return true\n\n}","/** @module collection */\n\nimport { deepClone } from './deepClone'\nimport { isFunc } from '../method/isFunc'\nimport { isNum } from '../number/isNum'\n\n/**\n * Returns an array composed of element repeated \"times\" times. If element is a function, it will be called.\n * <br> Note: if you simply want to run a function some number of times, without returning an array of its results, @see Method.doIt\n * @param {*} element - a value or a function. If it is a function, repeat will call it each repeated time\n * @param {number} times - number of times that element should be included/called for the resulting array. Anything less than or equal to 0, or not a number, will return an empty array.\n * @function\n * @param {boolean} cloneDeep - if true, it will deeply clone the element for every instance in the resulting array \n * @returns an array of repeated elements or results from the function call\n * @example repeat(1, 3) // returns [1, 1, 1]\n * @example repeat(() => 2 * 2, 3) // returns [4, 4, 4]\n */\nexport const repeat = (element, times, cloneDeep=false) => {\n  if (!times || times <= 0) return []\n  if (!isNum(times)) {\n    console.error(\"Times argument must be a number\")\n    return []\n  }\n  const arr = []\n  for (let i = 0; i < times; i++) {\n    const value = isFunc(element)\n      ? element() \n      : cloneDeep\n        ? deepClone(element)\n        : element\n    arr.push(value)\n  }\n  return arr\n}\n","/** @module collection */\n\nimport { get } from './get'\nimport { isArr } from '../array/isArr'\nimport { isNum } from '../number/isNum'\nimport { isStr } from '../string/isStr'\nimport { isColl } from './isColl'\n\n/**\n * Compares a collection's keys / values with another collections keys / values\n * @example\n * shallowEqual({ foo: 'bar' }, { foo: 'bar' })\n * // Returns true\n * @example\n * shallowEqual({ foo: 'bar', baz: {} }, { foo: 'bar', baz: {} })\n * // Returns false, because the baz values are different objects\n * @example\n * // Works with array too\n * shallowEqual([ 1, 2 ], [ 1, 2 ])\n * // Returns true\n * @example\n * shallowEqual([{ foo: 'bar' }], [{ foo: 'bar' }])\n * // Returns false, because the objects in index 0 are different\n * @example\n * // Pass a path to compare instead of the root\n * shallowEqual({ foo: { bar: { baz: 'biz' }}}, { foo: { bar: { baz: 'biz' }}}, 'foo.bar')\n * // Returns true, because the bar object is compared\n * @function\n * @param {Object|Array} col1 - Collection to compare\n * @param {Object|Array} col2 - Collection to compare\n * @param {Array|string} path - path of object to compare. Uses the get method to find the path\n *\n * @returns {boolean} - true or false if the objects keys values are equal\n */\nexport const shallowEqual = (col1, col2, path) => {\n\n  // If a path is passed in, update the collections to be that path\n  if(path && (isArr(path) || isStr(path))){\n    col1 = get(col1, path)\n    col2 = get(col2, path)\n  }\n  \n  // If the objects are the same, so return true\n  if(col1 === col2) return true\n\n  // Ensure the objects exist, and they have keys we can compare\n  if (!col1 || !isColl(col1) || !col2 || !isColl(col2))\n    return false\n\n  // If they have different key lengths, then they are not equal\n  if (Object.keys(col1).length !== Object.keys(col2).length) return false\n  \n  // Loop the keys, and ensure the other collection has the key and it's value is the same\n  for (const key in col1)\n    if (col1[key] !== col2[key]) return false\n\n  // Keys and values are equal, so return true\n  return true\n}"],"names":["cleanColl","coll","recursive","isColl","Object","keys","reduce","cleaned","key","value","undefined","isObj","console","error","isEmptyColl","obj","isArr","length","getOwnPropertyNames","mapColl","cb","isFunc","map","reduceColl","data","unset","path","updateColl","isArray","Array","keyList","hasProp","prototype","hasOwnProperty","deepEqual","a","b","arrA","arrB","i","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","call","repeat","element","times","cloneDeep","isNum","arr","deepClone","push","shallowEqual","col1","col2","isStr","get"],"mappings":"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"}