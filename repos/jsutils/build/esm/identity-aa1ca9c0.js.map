{"version":3,"file":"identity-aa1ca9c0.js","sources":["../../src/method/isOrderable.js","../../src/method/compareTo.js","../../src/method/identity.js"],"sourcesContent":["/** @module functions */\n\nimport { isStr } from '../string'\nimport { isBool } from '../boolean'\nimport { isNum } from '../number'\n\n/**\n * Checks if param is an orderable primitive\n * @function\n * @param {*} x \n * @returns {bool} - true if x is a comparable primitive\n */\nexport const isOrderable = x => isStr(x) || isNum(x) || isBool(x)","/** @module method */\n\nimport { isStr } from '../string'\nimport { isOrderable } from './isOrderable'\nimport { validate } from '../validation'\n\n/**\n * @function\n * Generic compare to method that works for strings, numbers, and booleans\n * @param {string | number | boolean} x \n * @param {string | number | boolean} y \n * @return { number | null } - returns a value < 0 if x is less than y, 0 if they are equal, and a value greater than 0 if x is greater than y. Returns null if the args are not comparable.\n */\nexport const compareTo = (x, y) => {\n  const [ valid ] = validate({ x, y }, { $default: isOrderable }) \n  if (!valid) return null\n  return isStr(x)\n    ? (x.localeCompare(y))\n    : (x - y)\n}","/** @module functions */\n\n/**\n * A function that simply returns its input\n * @function\n * @param {*} x \n * @returns {*} the input\n */\nexport const identity = x => x"],"names":["isOrderable","x","isStr","isNum","isBool","compareTo","y","valid","validate","$default","localeCompare","identity"],"mappings":";;;;;MAYaA,WAAW,GAAGC,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,IAAYE,KAAK,CAACF,CAAD,CAAjB,IAAwBG,MAAM,CAACH,CAAD;;MCCjDI,SAAS,GAAG,CAACJ,CAAD,EAAIK,CAAJ,KAAU;AACjC,QAAM,CAAEC,KAAF,IAAYC,QAAQ,CAAC;AAAEP,IAAAA,CAAF;AAAKK,IAAAA;AAAL,GAAD,EAAW;AAAEG,IAAAA,QAAQ,EAAET;AAAZ,GAAX,CAA1B;AACA,MAAI,CAACO,KAAL,EAAY,OAAO,IAAP;AACZ,SAAOL,KAAK,CAACD,CAAD,CAAL,GACFA,CAAC,CAACS,aAAF,CAAgBJ,CAAhB,CADE,GAEFL,CAAC,GAAGK,CAFT;AAGD;;MCXYK,QAAQ,GAAGV,CAAC,IAAIA;;;;"}