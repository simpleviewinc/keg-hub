{"version":3,"file":"get-bfcf4646.js","sources":["../../src/collection/updateColl.js","../../src/collection/get.js"],"sourcesContent":["/** @module collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isArr } from '../array/isArr'\nimport { isColl } from './isColl'\n\n/**\n * Updates a collection by removing, getting, adding to it.\n * @memberof collection\n * @param {Object} obj - object to update\n * @param {string|array} path - path to the property to update\n * @param {*} type - value to update || type\n * @return {*} based on update method\n */\nexport const updateColl = (obj, path, type, val) => {\n  const org = obj\n  if (!isColl(obj) || !obj || !path)\n    return type !== 'set' && val || undefined\n  \n  // cloneDeep so we don't modify the reference\n  const parts = isArr(path) ? Array.from(path) : path.split('.')\n  const key = parts.pop()\n  let prop\n  let breakPath\n\n  while (prop = parts.shift()) {\n    const next = obj[prop]\n\n    isColl(next) || isFunc(next)\n      ? ( obj = next )\n      : (() => {\n          if(type === 'set') obj[prop] = {}\n          else breakPath = true\n          obj = obj[prop]\n        })()\n\n    if (breakPath) return val\n  }\n\n  return type === 'get'\n    // Get return the value\n    ? key in obj\n      ? obj[key]\n      : val\n    : type === 'unset'\n      // Unset, return if the key was removed\n      ? ( delete obj[key] )\n      // Set, updated object\n      : ( obj[key] = val ) && org || org\n}\n","/** @module collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Searches an object based on the path param\n * <br> I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br> If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - will search the object based on the path\n * @param {string|array} path - . separated string to search the object\n * @return the final value found from the path\n */\nexport const get = (obj, path, fallback) => (\n  updateColl(obj, path, 'get', fallback)\n)\n"],"names":["updateColl","obj","path","type","val","org","isColl","undefined","parts","isArr","Array","from","split","key","pop","prop","breakPath","shift","next","isFunc","get","fallback"],"mappings":";;;;;;MAcaA,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,GAAlB,KAA0B;AAClD,QAAMC,GAAG,GAAGJ,GAAZ;AACA,MAAI,CAACK,aAAM,CAACL,GAAD,CAAP,IAAgB,CAACA,GAAjB,IAAwB,CAACC,IAA7B,EACE,OAAOC,IAAI,KAAK,KAAT,IAAkBC,GAAlB,IAAyBG,SAAhC,CAHgD;AAMlD,QAAMC,KAAK,GAAGC,WAAK,CAACP,IAAD,CAAL,GAAcQ,KAAK,CAACC,IAAN,CAAWT,IAAX,CAAd,GAAiCA,IAAI,CAACU,KAAL,CAAW,GAAX,CAA/C;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACM,GAAN,EAAZ;AACA,MAAIC,IAAJ;AACA,MAAIC,SAAJ;AAEA,SAAOD,IAAI,GAAGP,KAAK,CAACS,KAAN,EAAd,EAA6B;AAC3B,UAAMC,IAAI,GAAGjB,GAAG,CAACc,IAAD,CAAhB;AAEAT,IAAAA,aAAM,CAACY,IAAD,CAAN,IAAgBC,aAAM,CAACD,IAAD,CAAtB,GACMjB,GAAG,GAAGiB,IADZ,GAEI,CAAC,MAAM;AACL,UAAGf,IAAI,KAAK,KAAZ,EAAmBF,GAAG,CAACc,IAAD,CAAH,GAAY,EAAZ,CAAnB,KACKC,SAAS,GAAG,IAAZ;AACLf,MAAAA,GAAG,GAAGA,GAAG,CAACc,IAAD,CAAT;AACD,KAJD,GAFJ;AAQA,QAAIC,SAAJ,EAAe,OAAOZ,GAAP;AAChB;AAED,SAAOD,IAAI,KAAK,KAAT;AAAA,IAEHU,GAAG,IAAIZ,GAAP,GACEA,GAAG,CAACY,GAAD,CADL,GAEET,GAJC,GAKHD,IAAI,KAAK,OAAT;AAAA,IAEI,OAAOF,GAAG,CAACY,GAAD,CAFd;AAIE,GAAEZ,GAAG,CAACY,GAAD,CAAH,GAAWT,GAAb,KAAsBC,GAAtB,IAA6BA,GATnC;AAUD;;MC9BYe,GAAG,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAYmB,QAAZ,KACjBrB,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,KAAZ,EAAmBmB,QAAnB;;;;;"}