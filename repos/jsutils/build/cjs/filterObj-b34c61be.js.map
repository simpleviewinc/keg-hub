{"version":3,"file":"filterObj-b34c61be.js","sources":["../../src/object/cloneJson.js","../../src/object/clearObj.js","../../src/object/eitherObj.js","../../src/object/deepMerge.js","../../src/object/applyToCloneOf.js","../../src/object/jsonEqual.js","../../src/object/isEntry.js","../../src/object/mapEntries.js","../../src/object/mapKeys.js","../../src/object/mapObj.js","../../src/object/isArrMap.js","../../src/object/omitKeys.js","../../src/object/pickKeys.js","../../src/object/sanitizeCopy.js","../../src/object/trimStringFields.js","../../src/object/toObj.js","../../src/object/keyMap.js","../../src/object/everyEntry.js","../../src/object/someEntry.js","../../src/object/filterObj.js"],"sourcesContent":["/** @module object */\n\nimport { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch(e){\n    logData(e.message, 'error')\n    return null\n  }\n}\n","/** @module object */\n\n/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} filter - list of keys to not remove\n * @returns { null }\n */\nexport const clearObj = (obj, filter) => {\n  obj && Object\n    .entries(obj)\n    .map(([key, value]) => {\n      if(filter && filter.indexOf(key) !== -1) return\n      if(typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n","/** @module object */\n\nimport { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (\n  isObj(obj1) && obj1 || obj2\n)\n","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n      const srcCopy = deepClone(source)\n      return isArr(srcCopy)\n        // Check if it's array, and join the arrays\n        ? [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n          // Check if it's an object, and loop the properties\n        : isObj(srcCopy)\n          // Loop the entries of the object, and add them to the merged object\n          ? Object.entries(srcCopy)\n            .reduce((joined, [ key, value ]) => ({\n              ...joined,\n              // Check it's a function, and if so, clone it\n              [key]: isFunc(value)\n                ? cloneFunc(value)\n                // Check if the value is an object of if key is in the object\n                : isColl(value) && key in joined\n                  // Set to value or deepMerge the object with the current merged object\n                  ? deepMerge(joined[key], value)\n                  // Otherwise just clone and set the value\n                  : deepClone(value)\n            // Pass in merged at the joined object\n            }), merged)\n          // If it's not an array or object, just return the merge object\n          : merged\n  // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && [] || {}))\n}\n","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj)) error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb) error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb)) error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n  \n  if(error) return console.warn(error) || obj\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n","/** @module object */\n\n/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch(e){\n    return false\n  }\n}\n","/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {any} maybeEntry - Item to check if it's an entry\n *\n * @returns true if it is an entry, false otherwise\n */\nexport const isEntry = (maybeEntry) => isArr(maybeEntry) \n  && (maybeEntry.length === 2)\n  && (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry \n * @param {Object | Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce(\n    (obj, [key, value]) => {\n      const result = cb(key, value)\n      if (!isEntry(result)) {\n        console.error(`Callback function must return entry. Found: ${result}. Using current entry instead.`)\n        return set(obj, key, value)\n      } \n      return set(obj, result[0], result[1])\n    },\n    initialValue\n  )\n}","/** @module object */\n\n\nimport { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj \n * @param {Function} keyMapper: (key) => nextKey\n * @returns the new object with each key mapped\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) \n    return obj\n\n  return mapEntries(\n    obj,\n    (key, value) => [keyMapper(key), value]\n  )\n}\n","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj\n * @return {Array} -  returned values from callback\n */\nexport const mapObj = (obj, cb) => (\n  (isObj(obj) && isFunc(cb) &&\n  Object\n    .entries(obj)\n    .map(([ key, value ]) => cb(key, value))\n  ) || obj\n)\n","import { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every\n * value is an array\n * @param {*} obj - data to check\n * @return {boolean} true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(\n    values.length && values.every(isArr)\n  )\n}","/** @module object */\n\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) => (\n  isObj(obj) && reduceObj(obj, (key, _, updated) => {\n      keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n      return updated\n    }, {}) || {}\n)\n","/** @module object */\n\nimport { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) => (\n  isObj(obj) && keys.reduce((updated, key) => {\n    key in obj && (updated[key] = obj[key])\n\n    return updated\n  }, {}) || {}\n)\n","/** @module object */\n\nimport { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n","/** @module object */\n\nimport { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object => (\n  Object\n    .entries(object)\n    .reduce((cleaned, [ key, value ]) => {\n      cleaned[key] = isStr(value) ? value.trim() : value\n      return cleaned\n    }, object)\n)\n","/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {string} divider - if string, what divides key from value\n * @param {string} split - if string, what splits each key/value pair\n * @return {Object} - converted object \n */\nexport const toObj = (val, divider, split) => {\n  if(isArr(val))\n    return Object.keys(val)\n      .reduce((obj, key) => {\n        obj[key] = val[key]\n\n        return obj\n      }, {})\n\n  if(!isStr(str)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return str\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n","/** @module object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {string} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) => (\n  isArr(arr) && arr.reduce((obj, key) => {\n    if(!isStr(key)) return obj\n    \n    const use = toUpperCase && key.toUpperCase() || key\n    obj[use] = use\n\n    return obj\n  }, {}) || {}\n)","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj \n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @returns boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate) => {\n  if (!obj) {\n    console.error(`everyEntry expects argument obj [${obj}] to be defined.`)\n    return false\n  }\n\n  if (!isObj(obj)) {\n    console.error(`Argument obj ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into everyEntry must a function. Found: ${predicate}`)\n    return false\n  }\n\n  return pipeline(\n    obj,\n    Object.entries,\n    entries => entries.every(([key, value]) => predicate(key, value))\n  )\n}\n","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj \n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @returns boolean indicating that at least one entry satisfied the predicate or not\n */\nexport const someEntry = (obj, predicate) => {\n  if (!obj) {\n    console.error(`someEntry expects argument obj [${obj}] to be defined.`)\n    return false\n  }\n\n  if (!isObj(obj)) {\n    console.error(`Argument obj ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into someEntry must a function. Found: ${predicate}`)\n    return false\n  }\n\n  return pipeline(\n    obj,\n    Object.entries,\n    entries => entries.some(([key, value]) => predicate(key, value))\n  )\n}","/** @module object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {*} obj - regular object\n * @param {*} predicate  - function of form: (key, value) => Boolean\n * @returns object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate) => {\n  if (!obj) return obj\n\n  if (!isObj(obj)) {\n    console.error(`Object ${obj} was not an object. It must be for filterObject`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    console.error(`Argument 'predicate' passed into filterObject must a function. Found: ${predicate}`)\n    return obj\n  } \n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value))\n        data[key] = value\n      return data\n    },\n    {}\n  )\n}\n"],"names":["cloneJson","obj","JSON","parse","stringify","e","logData","message","clearObj","filter","Object","entries","map","key","value","indexOf","undefined","eitherObj","obj1","obj2","isObj","deepMerge","sources","reduce","merged","source","srcCopy","deepClone","isArr","joined","isFunc","cloneFunc","isColl","applyToCloneOf","mutatorCb","error","console","warn","clone","jsonEqual","one","two","isEntry","maybeEntry","length","isNum","isStr","mapEntries","cb","initialValue","result","set","mapKeys","keyMapper","mapObj","isArrMap","values","toBool","every","omitKeys","keys","reduceObj","_","updated","pickKeys","sanitizeCopy","sanitize","trimStringFields","object","cleaned","trim","toObj","val","divider","split","str","item","sep","strToType","keyMap","arr","toUpperCase","use","everyEntry","predicate","pipeline","someEntry","some","filterObj","data"],"mappings":"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"}