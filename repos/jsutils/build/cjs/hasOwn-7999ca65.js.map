{"version":3,"file":"hasOwn-7999ca65.js","sources":["../../src/method/applyToFunc.js","../../src/method/pipeline.js","../../src/object/hasOwn.js"],"sourcesContent":["/** @module functions */\n\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\n\n/**\n * Helper for pipeline. Passes 'item' into 'expression' as its first argument.\n * <br> Expression may be a function or an array of form: [function, ...remainingArguments].\n * @function\n * @param {*} item \n * @param {*} expression \n */\nexport const applyToFunc = (item, expression) => {\n  if (isArr(expression)) {\n    const [func, ...args] = expression\n    return func(item, ...args)\n  }\n  else if (isFunc(expression)) {\n    return expression(item) \n  }\n  else {\n    console.error(`Pipeline expected either a function or an array (for function expressions). Found ${typeof expression}`)\n    return item\n  }\n}\n","/** @module functions */\n\nimport { applyToFunc } from './applyToFunc'\n\n/**\n * Function for making repeated nested function calls (the 'pipeline') succinct. Passes \"item\" into\n * <br> the first function (as its first argument), takes its result and passes that into the next function, and repeats.\n * <br> Continues until no functions remain, at which point it returns the value returned by the last function.\n * <br>  - you can also pass in an array in place of a function to specify a function to be called with some arguments. E.g.: [foo, 2, 3] would return foo(item, 2, 3)\n * @example: pipeline(1, addFour, subtract3, (x) => x * x) // would return 4\n * @function\n * @param {* | Function} item - the starting input. If it is a function, it will be executed immediately and the result will be piped into the remaining functions.\n * @param {...Function} functions \n * @returns the final result of calling the pipeline of functions , starting with item as input\n */\nexport const pipeline = (item, ...functions) => {\n  return functions.reduce(\n    (result, fn) => applyToFunc(result, fn),\n    item\n  )\n}\n","/** @module object */\n\n/**\n * Checks if prop exists on the object.\n * @function\n * @param {Object} obj - data to check\n * @param {string} prop - prop to check for\n * @returns {boolean} T/F if the prop exists\n */\nexport const hasOwn = (obj, prop) => (\n  Object.prototype.hasOwnProperty.call(obj, prop)\n)\n"],"names":["applyToFunc","item","expression","isArr","func","args","isFunc","console","error","pipeline","functions","reduce","result","fn","hasOwn","obj","prop","Object","prototype","hasOwnProperty","call"],"mappings":";;;;;MAYaA,WAAW,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC/C,MAAIC,WAAK,CAACD,UAAD,CAAT,EAAuB;AACrB,UAAM,CAACE,IAAD,EAAO,GAAGC,IAAV,IAAkBH,UAAxB;AACA,WAAOE,IAAI,CAACH,IAAD,EAAO,GAAGI,IAAV,CAAX;AACD,GAHD,MAIK,IAAIC,aAAM,CAACJ,UAAD,CAAV,EAAwB;AAC3B,WAAOA,UAAU,CAACD,IAAD,CAAjB;AACD,GAFI,MAGA;AACHM,IAAAA,OAAO,CAACC,KAAR,CAAe,qFAAoF,OAAON,UAAW,EAArH;AACA,WAAOD,IAAP;AACD;AACF;;MCTYQ,QAAQ,GAAG,CAACR,IAAD,EAAO,GAAGS,SAAV,KAAwB;AAC9C,SAAOA,SAAS,CAACC,MAAV,CACL,CAACC,MAAD,EAASC,EAAT,KAAgBb,WAAW,CAACY,MAAD,EAASC,EAAT,CADtB,EAELZ,IAFK,CAAP;AAID;;MCXYa,MAAM,GAAG,CAACC,GAAD,EAAMC,IAAN,KACpBC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,IAA1C;;;;;;"}