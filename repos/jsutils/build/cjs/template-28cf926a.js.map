{"version":3,"file":"template-28cf926a.js","sources":["../../src/string/buildPath.js","../../src/string/mapString.js","../../src/string/isLowerCase.js","../../src/string/isUpperCase.js","../../src/string/delimitString.js","../../src/string/snakeCase.js","../../src/string/capitalize.js","../../src/string/removeDot.js","../../src/string/cleanStr.js","../../src/string/camelCase.js","../../src/string/camelCasePath.js","../../src/string/containsStr.js","../../src/string/eitherStr.js","../../src/string/hyphenator.js","../../src/string/hashString.js","../../src/string/isEmail.js","../../src/string/isPhone.js","../../src/string/isUrl.js","../../src/string/isUuid.js","../../src/string/parseJSON.js","../../src/string/plural.js","../../src/string/singular.js","../../src/string/styleCase.js","../../src/string/trainCase.js","../../src/string/wordCaps.js","../../src/string/spaceJoin.js","../../src/string/template.js"],"sourcesContent":["/** @module string */\n\n/**\n * Builds a string path from passed in args ( i.e. path/to/thing ).\n * @function\n * @return {string} - built path from arguments\n */\nexport const buildPath = (...args) => {\n  const built = args.reduce((path, arg) => {\n    let str = toStr(arg)\n\n    return `${path}${ str && '/' + str || '' }`\n  }, '')\n  \n  return built.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\n}\n","/** @module string */\n\nimport { isFunc } from '../method/isFunc'\nimport { isStr } from './isStr'\n\n/**\n * Maps a string by applying function `charMapper` to each character.\n * @function\n * @param {string} str to be mapped\n * @param {Function} charMapper - function of form (character) => <some character or string>\n * @returns a new string, with each character mapped by charMap. If str is not a string or charMapper not a function, just returns str\n * @example\n *  mapString(\"hello\", c => c === 'h' ? 'x' : c) // returns 'xello'\n */\nexport const mapString = (str, charMapper) => {\n  if (!isStr(str)) return str\n  if (!isFunc(charMapper)) return str\n  let result = \"\"\n  for (const char of str) {\n    result += charMapper(char)\n  }\n  return result\n}","/** @module string */\n\n/**\n * @function\n * @returns true if str is upper case\n * @param {String} str \n */\nexport const isLowerCase = str => (str === str.toLowerCase())\n\n","/** @module string */\n\n/**\n * @function\n * @returns true if str is upper case\n * @param {String} str \n */\nexport const isUpperCase = str => (str === str.toUpperCase())\n","/** @module string */\n\nimport { isStr } from './isStr'\nimport { mapString } from './mapString'\nimport { isLowerCase } from './isLowerCase'\nimport { isUpperCase } from './isUpperCase'\n\n/**\n * @function\n * @returns a new string with the specified delimiter delimiting each word\n * @param {String} str - string of any casing\n * @param {String} delimiter - e.g. '_'\n * @param {Array} delimiters - optional. An array of delimiter characters on which this function searches and breaks. Defaults to checking -, _, and space\n * @example delimitString('fooBar', '_') // 'foo_Bar'\n */\nexport const delimitString = (str, delimiter, delimiters=['-', '_', ' ']) => {\n  if (!isStr(str)) return str\n  const isDelimiter = c => delimiters.some(del => del === c)\n  let prevChar = '_'\n  return mapString(str, char => {\n    if (isDelimiter(char)) {\n      prevChar = delimiter \n      return delimiter \n    }\n\n    if (isUpperCase(char) && isLowerCase(prevChar) && !isDelimiter(prevChar)) {\n      prevChar = char\n      return delimiter + char\n    }\n\n    prevChar = char\n    return char\n  })\n}\n","/** @module string */\n\nimport { delimitString } from './delimitString'\n\n/**\n * Converts a string to snake_case.\n * @function\n * @param {string} str to be converted\n * @example\n *  snakeCase('fooBar') // returns 'foo_bar'\n * @returns the string in snake_case, or the input if it is not a string\n */\nexport const snakeCase = (str) => {\n  const underscored = delimitString(str, '_')\n  return underscored.toLowerCase()\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts first letter of a string to be capitalized.\n * @function\n * @param {string} string\n * @param {boolean} lowercaseTail - if true, will also lowercase the all characters except the first\n * @return {string} - Passed in string, but capitalized\n */\nexport const capitalize = (str, lowercaseTail=true) => {\n  if (!isStr(str) || !str[0]) return str\n  const tail = lowercaseTail\n    ? str.slice(1).toLowerCase()\n    : str.slice(1)\n  return `${str[0].toUpperCase()}${tail}`\n}\n","/** @module string */\n\n/**\n * Removes a `.` from the start and end of a string.\n * @function\n * @param {string} str - string to convert\n * @return {string} - string without the `.`\n */\nexport const removeDot = string => {\n  const noDot = string.indexOf('.') === 0 ? string.slice(1) : string\n  return noDot.indexOf('.') === noDot.length - 1 ? noDot.slice(0, -1) : noDot\n}\n","/** @module string */\n\nimport { removeDot } from './removeDot'\n\n\n/**\n * Converts `-` and `_` to white space and calls remove removeDot, to remove a period.\n * @function\n * @param {string} string to be converted\n * @return {string} - cleaned string\n */\nexport const cleanStr = str => {\n  return str && removeDot(str)\n    .replace(/[-_]/gm, ' ') || str\n}\n","/** @module string */\n\nimport { capitalize } from './capitalize'\nimport { cleanStr } from './cleanStr'\n\n/**\n * Converts a string to camel case.\n * @function\n * @param {string} string to be converted\n * @return {string} - string in camel case format\n */\nexport const camelCase = (str, compCase) => {\n  return (\n    (str &&\n      cleanStr(str)\n        .split(/[\\s_-]/gm)\n        .reduce((cased, word, index) => {\n          if(!word) return cased\n          cased += ((index > 0 || compCase) && capitalize(word)) || word.toLowerCase()\n          return cased\n        }, '')\n      ) || str\n  )\n}\n","import { capitalize } from './capitalize'\n\n/**\n * Turns a path string into a camel-cased string, if there is more than one\n * step in the path. If there isn't, just returns path.\n * @param {string} path \n * @return {string} camel-cased string\n * @example\n * camelCasePath('settings.agendaMap.Count') -> 'settingsAgendaMapCount'\n * camelCasePath('settings') -> 'settings'\n */\nexport const camelCasePath = (path) => {\n  const split = path.split('.')\n  const camelCasedSplit = split.map(\n    (str, idx) => idx > 0\n      ? capitalize(str, false)\n      : str\n  )\n\n  return camelCasedSplit.length > 1 \n    ? camelCasedSplit.join('')\n    : path\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\nimport { toStr } from './toStr'\n\n\n/**\n * Checks if a string contains another string.\n * @function\n * @param {string} string - value to be checked\n * @param {string} substring - value to search for\n * @return {boolean} - if the substring exists string\n */\nexport const containsStr = (str, substring, fromIndex) => {\n  str = !isStr(str) && toStr(str) || str\n  substring = !isStr(substring) && toStr(substring) || substring\n\n  return str.indexOf(substring, fromIndex) !== -1;\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Checks if the first param is a string, and returns it.\n * <br> If it's not a string, the second param is returned\n * @function\n * @param {string} str1 - return if is string\n * @param {string} str2 - use if first is not a string\n * @returns {string}\n */\nexport const eitherStr = (str1, str2) => (\n  isStr(str1) && str1 || str2\n)\n","/** @module string */\n\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\n/**\n * Hyphenator cache, that stores already hyphenated text to be reused\n * @private\n * @Object\n */\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @private\n * @param {string} str - camelCase style rule rule\n * \n * @returns {string} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => ('-' + match.toLowerCase())\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {string} str - camelCase style rule rule\n *\n * @returns {string} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}","/** @module string */\n\nimport { isStr } from './isStr'\nimport { isNonNegative } from '../number/isNonNegative'\n/**\n * Creates a hash from a passed in string consistently\n * <br/> Not intended to be secure\n * <br/> Value comes from being a pure function\n * <br/> Given the same input, it will always return the same output\n * <br/> There is no expectation to convert back from the hash to the original string\n * @function\n * @param {string} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {string} - Hashed version of the string\n */\nexport const hashString = (str, maxLength) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse().join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash<<5) - hash) + char\n    // Convert to positive 32bit integer\n    hash = `${ Math.abs(hash & hash) }`\n  }\n\n  return isNonNegative(maxLength) ? hash.slice(0, maxLength) : hash\n}","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a email.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a email\n */\nexport const isEmail = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n  return Boolean(regex.test(str))\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a phone number.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a phone number\n */\nexport const isPhone = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\n  return Boolean(regex.test(str)) && str.replace(/\\D/g, '').length < 11\n}\n","/** @module string */\n\n/**\n * Check if string is a url.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a url\n */\nexport const isUrl = str => {\n  const regex = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n  return Boolean(regex.test(str))\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a uuid.\n * @function\n * @param {string} string to check\n * @return {boolean} - if it's a uuid\n */\nexport const isUuid = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n  return Boolean(regex.test(str))\n}\n","/** @module string */\n\n/**\n * Convert JSON string into object, wrapped in a try / catch.\n * @function\n * @param {string} string\n * @return {Object} - JSON object\n */\nexport const parseJSON = str => {\n  try {\n    return JSON.parse(str)\n  }\n  catch (e){\n    console.error(e.message)\n    return null\n  }\n}\n","/** @module string */\n\n/**\n * Adds an `s` to the end of a string, if one does not exist.\n * @function\n * @param {string} str - string to convert\n * @return {string} string as a plural\n */\nexport const plural = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] !== 's' ? str + 's' : str\n}\n","/** @module string */\n\n/**\n * Remove an `s` at the end of a string, if the last char is an `s`,\n * @function\n * @param {string} str - string to convert\n * @return {string} string as singular\n */\nexport const singular = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] === 's'\n    ? str.slice(0, str.length - 1)\n    : str\n}\n\n","/** @module string */\n\nimport { isStr } from './isStr'\nimport { camelCase } from './camelCase'\n\n/**\n * Converts a string to css in js format.\n * Useful for converting css rules into js format, I.E. margin-top => marginTop.\n * @function\n * @param {string} str - string to be converted\n * @return {string} - string in style case format\n */\nexport const styleCase = str => {\n  if(!isStr(str)) return str\n\n  const cased = camelCase(str)\n  return `${cased[0].toLowerCase()}${cased.slice(1)}`\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a string to train case, I.E. marginTop => margin-top.\n * @function\n * @param {string} string to be converted\n * @return {string} - string in train case format\n */\nexport const trainCase = str => (\n  isStr(str) && str\n    .split(/(?=[A-Z])|[\\s_-]/gm)\n    .join('-')\n    .toLowerCase() || str\n)\n","/** @module string */\n\nimport { isStr } from './isStr'\nimport { cleanStr } from './cleanStr'\nimport { capitalize } from './capitalize'\n\n/**\n * Converts all words in a string to be capitalized.\n * @function\n * @param {string} string to be converted\n * @return {string} - string with all words capitalized\n */\nexport const wordCaps = str => {\n  if (!isStr(str)) return str\n  let cleaned = cleanStr(str)\n  return cleaned\n    .split(' ')\n    .map(word => word && capitalize(word) || '')\n    .join(' ')\n}\n","/** @module string */\n\nimport { isStr } from './isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Joins strings and array of string together with spaces\n * @param {string} original - The default string that other strings get added to\n * @param {string|Array} toAdd - String of Array of Strings to add to the original\n *\n * @returns {string} Joined strings seperated by space\n */\nexport const spaceJoin = (original, toAdd) => {\n  toAdd = isArr(toAdd) ? toAdd : [ toAdd ]\n  return toAdd.reduce((joined, item) => {\n    return isStr(item)\n      ? `${ joined ? joined + ' ' : '' }${ item }`.trim()\n      : joined\n  }, isStr(original) ? original : '')\n}","/** @module string */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from '../collection/isColl'\nimport { get } from '../collection/get'\nimport { isStr } from './isStr'\n/**\n * Simple template replace for ES6 template strings\n * @function\n * @example\n * template('${ who } in ${ where }!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {string} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n *\n * @returns {string} - template with placeholder values filled\n */\nexport const template = (tempStr, data, fallback='') => {\n  data = isColl(data) && data || {}\n  const regex = template.regex || /\\${(.*?)\\}/g\n\n  return isStr(tempStr)\n    ? tempStr.replace(regex, (match, exact) => {\n      const path = (exact || match.substr(2, match.length - 3)).trim()\n      const replaceWith = get(data, path, fallback)\n      return isFunc(replaceWith)\n        ? replaceWith(data, path, fallback)\n        : replaceWith\n\n    })\n    : console.error(`template requires a string as the first argument`) || tempStr\n}"],"names":["buildPath","args","built","reduce","path","arg","str","toStr","replace","mapString","charMapper","isStr","isFunc","result","char","isLowerCase","toLowerCase","isUpperCase","toUpperCase","delimitString","delimiter","delimiters","isDelimiter","c","some","del","prevChar","snakeCase","underscored","capitalize","lowercaseTail","tail","slice","removeDot","string","noDot","indexOf","length","cleanStr","camelCase","compCase","split","cased","word","index","camelCasePath","camelCasedSplit","map","idx","join","containsStr","substring","fromIndex","eitherStr","str1","str2","uppercasePattern","msPattern","hyphenCache","toHyphenLower","match","hyphenator","rule","hasOwnProperty","hRule","test","hashString","maxLength","reverse","hash","i","charCodeAt","Math","abs","isNonNegative","isEmail","regex","Boolean","isPhone","isUrl","isUuid","parseJSON","JSON","parse","e","console","error","message","plural","singular","styleCase","trainCase","wordCaps","cleaned","spaceJoin","original","toAdd","isArr","joined","item","trim","template","tempStr","data","fallback","isColl","exact","substr","replaceWith","get"],"mappings":"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"}